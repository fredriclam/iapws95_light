#cython: language_level=3

''' # For cython timing: place at top
# cython: binding=True
# cython: linetrace=True
# cython: profile=True
# distutils: define_macros=CYTHON_TRACE_NOGIL=1'''

ctypedef double DTYPE_t
cimport cython

cdef extern from "math.h":
    double exp(double x)
    double log(double x)

''' Load coefficients for the ideal gas part. '''
# Ideal gas part coefficients: updated values of the 2018 IAPWS Release
cdef DTYPE_t[8] n_ideal = [-8.3204464837497,  6.6832105275932,  3.00632   ,
        0.012436  ,  0.97315   ,  1.2795    ,  0.96956   ,  0.24873   ]
cdef DTYPE_t[8] g_ideal = [ 0.        ,  0.        ,  0.        ,
        1.28728967,  3.53734222,  7.74073708,  9.24437796, 27.5075105 ]
''' Load critical properties. '''
cdef DTYPE_t Tc   = 647.096      # K
cdef DTYPE_t rhoc = 322          # kg / m^3
cdef DTYPE_t R    = 0.46151805e3 # J / kg K
cdef DTYPE_t pc   = 22.064e6     # MPa
''' Load Saul and Wagner saturation curve correlations. '''
# Saturated liquid density correlation (updated from Saul and Wagner 1987
# Eq. 2.3 to IAPWS95 auxiliary equation calibrated to ITS-90)
cdef DTYPE_t[6] satl_powsb = [
  0.3333333333333333, 0.6666666666666666, 1.6666666666666667,
  5.333333333333333, 14.333333333333334, 36.666666666666664]
# Rational factorized version
cdef int[6] satl_powsb_times3 = [
  1, 2, 5, 16, 43, 110]
cdef DTYPE_t[6] satl_coeffsb = [1.992_740_64, 1.099_653_42, -0.510_839_303,
  -1.754_934_79, -45.517_035_2, -6.746_944_50e5]
# Saturated vapour density correlation (updated from Saul and Wagner 1987
# Eq. 2.3 to IAPWS95 auxiliary equation calibrated to ITS-90)
cdef DTYPE_t[6] satv_powsc = [1.0/3.0, 2.0/3.0, 4.0/3.0, 3.0,
    37.0/6.0, 71.0/6.0]
# Rational factorized version
cdef int[6] satv_powsc_times6 = [2, 4, 8, 18, 37, 71]
cdef DTYPE_t[6] satv_coeffsc = [-2.031_502_40, -2.683_029_40, -5.386_264_92,
  -17.299_160_5, -44.758_658_1, -63.920_106_3]

''' Load coefficients for the residual part. '''
cdef DTYPE_t[2] a_res55_56 = [3.5, 3.5]
cdef DTYPE_t[2] A_res55_56 = [0.32, 0.32]
cdef DTYPE_t[3] alpha_res52_54 = [20., 20., 20.]
cdef DTYPE_t[2] b_res55_56 = [0.85, 0.95]
cdef DTYPE_t[2] B_res55_56 = [0.2, 0.2]
cdef DTYPE_t[3] beta_res52_54 = [150., 150., 250.]
cdef DTYPE_t[2] beta_res55_56 = [0.3, 0.3]
# range(7,22) -> 1; range(22,42) -> 2; range(42,46) -> 3; range(46,52)
cdef DTYPE_t[51] c_res1_51 = [
  0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,
  1., 1., 1., 1., 1., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.,
  2., 2., 2., 2., 2., 2., 2., 2., 3., 3., 3., 3., 4., 6., 6., 6., 6.]
cdef DTYPE_t[3] c_res52_54 = [0., 0., 0.]
cdef DTYPE_t[2] C_res55_56 = [28., 32.]
cdef DTYPE_t[56] d_res = [
  1.,  1.,  1.,  2.,  2.,  3.,  4.,  1.,  1.,  1.,  2.,  2.,  3.,
  4.,  4.,  5.,  7.,  9., 10., 11., 13., 15.,  1.,  2.,  2.,  2.,
  3.,  4.,  4.,  4.,  5.,  6.,  6.,  7.,  9.,  9.,  9.,  9.,  9.,
  10., 10., 12.,  3.,  4.,  4.,  5., 14.,  3.,  6.,  6.,  6.,  3.,
  3.,  3.,  1.,  1.]
cdef DTYPE_t[2] D_res55_56 = [700., 800.]
cdef DTYPE_t[3] eps_res52_54 = [1., 1., 1.]
cdef DTYPE_t[3] gamma_res52_54 = [1.21, 1.21, 1.25]
cdef DTYPE_t[56] n_res = [
        1.2533547935523e-02,  7.8957634722828e+00, -8.7803203303561e+00,
        3.1802509345418e-01, -2.6145533859358e-01, -7.8199751687981e-03,
        8.8089493102134e-03, -6.6856572307965e-01,  2.0433810950965e-01,
       -6.6212605039687e-05, -1.9232721156002e-01, -2.5709043003438e-01,
        1.6074868486251e-01, -4.0092828925807e-02,  3.9343422603254e-07,
       -7.5941377088144e-06,  5.6250979351888e-04, -1.5608652257135e-05,
        1.1537996422951e-09,  3.6582165144204e-07, -1.3251180074668e-12,
       -6.2639586912454e-10, -1.0793600908932e-01,  1.7611491008752e-02,
        2.2132295167546e-01, -4.0247669763528e-01,  5.8083399985759e-01,
        4.9969146990806e-03, -3.1358700712549e-02, -7.4315929710341e-01,
        4.7807329915480e-01,  2.0527940895948e-02, -1.3636435110343e-01,
        1.4180634400617e-02,  8.3326504880713e-03, -2.9052336009585e-02,
        3.8615085574206e-02, -2.0393486513704e-02, -1.6554050063734e-03,
        1.9955571979541e-03,  1.5870308324157e-04, -1.6388568342530e-05,
        4.3613615723811e-02,  3.4994005463765e-02, -7.6788197844621e-02,
        2.2446277332006e-02, -6.2689710414685e-05, -5.5711118565645e-10,
       -1.9905718354408e-01,  3.1777497330738e-01, -1.1841182425981e-01,
       -3.1306260323435e+01,  3.1546140237781e+01, -2.5213154341695e+03,
       -1.4874640856724e-01,  3.1806110878444e-01]
cdef DTYPE_t[56] t_res = [
  -0.5  ,  0.875,  1.   ,  0.5  ,  0.75 ,  0.375,  1.   ,  4.   ,
  6.   , 12.   ,  1.   ,  5.   ,  4.   ,  2.   , 13.   ,  9.   ,
  3.   ,  4.   , 11.   ,  4.   , 13.   ,  1.   ,  7.   ,  1.   ,
  9.   , 10.   , 10.   ,  3.   ,  7.   , 10.   , 10.   ,  6.   ,
  10.   , 10.   ,  1.   ,  2.   ,  3.   ,  4.   ,  8.   ,  6.   ,
  9.   ,  8.   , 16.   , 22.   , 23.   , 23.   , 10.   , 50.   ,
  44.   , 46.   , 50.   ,  0.   ,  1.   ,  4.   ,  0.   ,  0.   ]
cdef DTYPE_t[2] _exp1_55_56 = [1.6666666666666667, 1.6666666666666667]

''' Rearrange coefficients in memory for contiguous memory representations. '''
# Fused coefficient arrays for 1 to 51 of uniform type.
#   Coefficients (n, d, t, c) are contiguous in memory.
# These arrays are used in some earlier implementations.
cdef DTYPE_t[204] ndtc1_51
for i in range(51):
  ndtc1_51[4*i] = n_res[i]
  ndtc1_51[4*i+1] = d_res[i]
  ndtc1_51[4*i+2] = t_res[i]
  ndtc1_51[4*i+3] = c_res1_51[i]
# Coefficients (n, d, t) are contiguous in memory for int c_coeff optimization
cdef DTYPE_t[153] ndt1_51
for i in range(51):
  ndt1_51[3*i] = n_res[i]
  ndt1_51[3*i+1] = d_res[i]
  ndt1_51[3*i+2] = t_res[i]

''' Define output struct types for cdef functions. '''
# Generic pair
cdef struct Pair:
  DTYPE_t first
  DTYPE_t second
# Triple of saturation information
cdef struct SatTriple:
  DTYPE_t psat
  DTYPE_t rho_satl
  DTYPE_t rho_satv
# Collection of phir and its derivatives
cdef struct Derivatives_phir_0_1_2:
  DTYPE_t phir
  DTYPE_t phir_d
  DTYPE_t phir_dd
  DTYPE_t phir_t
  DTYPE_t phir_tt
  DTYPE_t phir_dt
cdef struct Derivatives_phir_d3:
  DTYPE_t phir
  DTYPE_t phir_d
  DTYPE_t phir_dd
  DTYPE_t phir_ddd
cdef struct Derivatives_phi0_0_1_2:
  DTYPE_t phi0
  DTYPE_t phi0_d
  DTYPE_t phi0_dd
  DTYPE_t phi0_t
  DTYPE_t phi0_tt
  DTYPE_t phi0_dt
# Coefficient triple (more efficient packing and tighter typing)
cdef struct CoeffTriple_ndt_did:
  double n
  int d
  double t
# Coefficient triple (more efficient packing and tighter typing)
cdef struct CoeffTriple_ndt_dii:
  double n
  int d
  int t

''' Fill type-optimized, memory-contiguous coefficients. '''
# Fill typed ndt arrays (type suffix did->double int double, ...)
cdef CoeffTriple_ndt_did[7] typed_ndt_1_7
for i in range(7):
  typed_ndt_1_7[i].n = ndtc1_51[4*i]
  typed_ndt_1_7[i].d = int(ndtc1_51[4*i+1])
  typed_ndt_1_7[i].t = ndtc1_51[4*i+2]
cdef CoeffTriple_ndt_dii[44] typed_ndt_8_51
for i in range(7,51):
  typed_ndt_8_51[i-7].n = ndtc1_51[4*i]
  typed_ndt_8_51[i-7].d = int(ndtc1_51[4*i+1])
  typed_ndt_8_51[i-7].t = int(ndtc1_51[4*i+2])
# Typed t coefficients for 1-index terms 52 to 54
cdef int[3] t_res_52_54
for i in range(3):
  t_res_52_54[i] = int(t_res[51+i])

cdef DTYPE_t[320] sat_spline_T = [260.              , 264.8298940543189 , 269.61443736272406,
       274.3539147010963 , 279.0486099483848 , 283.6988060866068 ,
       288.30478520084745, 292.8668284792604 , 297.385216213067  ,
       301.86022779655684, 306.29214172708754, 310.6812356050849 ,
       315.02778613404274, 319.3320691205229 , 323.59435947415557,
       327.81493120763884, 331.9940574367389 , 336.13201038029   ,
       340.2290613601946 , 344.28548080142315, 348.3015382320141 ,
       352.2775022830744 , 356.2136406887786 , 360.11022028636967,
       363.96750701615844, 367.785765921524  , 371.5652611489133 ,
       375.30625594784186, 379.00901267089284, 382.67379277371765,
       386.3008568150358 , 389.8904644566348 , 393.44287446337034,
       396.95834470316606, 400.43713214701404, 403.87949286897424,
       407.28568204617454, 410.6559539588111 , 413.9905619901481 ,
       417.28975862651794, 420.5537954573209 , 423.78292317502564,
       426.97739157516867, 430.1374495563547 , 433.2633451202564 ,
       436.35532537161464, 439.41363651823843, 442.4385238710047 ,
       445.43023184385873, 448.3890039538137 , 451.31508282095086,
       454.20871016841966, 457.0701268224376 , 459.8995727122902 ,
       462.69728687033125, 465.4635074319825 , 468.19847163573377,
       470.902415823143  , 473.57557543883615, 476.2181850305076 ,
       478.83047824891923, 481.41268784790174, 483.9650456843533 ,
       486.4877827182405 , 488.9811290125979 , 491.4453137335281 ,
       493.8805651502021 , 496.2871106348584 , 498.66517666280424,
       501.0149888124147 , 503.33677176513277, 505.6307493054697 ,
       507.8971443210049 , 510.13617880238564, 512.3480738433275 ,
       514.5330496406141 , 516.6913254940971 , 518.8231198066964 ,
       520.9286500843997 , 523.0081329362629 , 525.0617840744102 ,
       527.0898183140338 , 529.0924495733938 , 531.0698908738185 ,
       533.0223543397044 , 534.950051198516  , 536.8531917807859 ,
       538.7319855201147 , 540.5866409531714 , 542.4173657196926 ,
       544.2243665624835 , 546.007849327417  , 547.7680189634343 ,
       549.5050795225446 , 551.2192341598252 , 552.9106851334217 ,
       554.5796338045475 , 556.2262806374841 , 557.8508251995814 ,
       559.453466161257  , 561.0344012959969 , 562.5938274803549 ,
       564.1319406939533 , 565.6489360194821 , 567.1450076426995 ,
       568.620348852432  , 570.0751520405739 , 571.5096087020877 ,
       572.923909435004  , 574.3182439404217 , 575.6928010225073 ,
       577.047768588496  , 578.3833336486904 , 579.6996823164618 ,
       580.9969998082493 , 582.27547044356   , 583.5352776449696 ,
       584.7766039381213 , 585.9996309517265 , 587.2045394175651 ,
       588.3915091704846 , 589.5607191484007 , 590.7123473922975 ,
       591.8465710462269 , 592.963566357309  , 594.0635086757319 ,
       595.1465724547519 , 596.2129312506933 , 597.2627577229485 ,
       598.2962236339781 , 599.3134998493107 , 600.3147563375429 ,
       601.3001621703397 , 602.2698855224338 , 603.2240936716262 ,
       604.1629529987861 , 605.0866289878505 , 605.9952862258249 ,
       606.8890884027824 , 607.7681983118645 , 608.6327778492807 ,
       609.4829880143086 , 610.3189889092941 , 611.1409397396509 ,
       611.9489988138607 , 612.7433235434738 , 613.524070443108  ,
       614.2913951304497 , 615.045452326253  , 615.7863958543403 ,
       616.5143786416021 , 617.2295527179967 , 617.932069216551  ,
       618.6220783733596 , 619.2997295275852 , 619.9651711214589 ,
       620.6185507002796 , 621.2600149124142 , 621.8897095092982 ,
       622.5077793454346 , 623.1143683783949 , 623.7096196688185 ,
       624.2936753804129 , 624.8666767799538 , 625.4287642372848 ,
       625.9800772253178 , 626.5207543200327 , 627.0509332004774 ,
       627.5707506487681 , 628.080342550089  , 628.5798438926921 ,
       629.0693887678981 , 629.5491103700953 , 630.0191409967401 ,
       630.4796120483574 , 630.9306540285397 , 631.3723965439478 ,
       631.8049683043109 , 632.2284971224257 , 632.6431099141573 ,
       633.0489326984391 , 633.4460905972721 , 633.8347078357259 ,
       634.2149077419379 , 634.5868127471133 , 634.9505443855262 ,
       635.3062232945182 , 635.6539692144989 , 635.9939009889464 ,
       636.3261365644067 , 636.6507929904939 , 636.96798641989   ,
       637.2778321083455 , 637.5804444146786 , 637.8759368007759 ,
       638.1644218315919 , 638.4460111751491 , 638.7208156025384 ,
       638.9889449879186 , 639.2505083085165 , 639.5056136446271 ,
       639.7543681796136 , 639.9968781999072 , 640.2332490950072 ,
       640.4635853574808 , 640.6879905829636 , 640.9065674701591 ,
       641.1194178208389 , 641.3266425398427 , 641.5283416350786 ,
       641.7246142175222 , 641.9155585012177 , 642.101271803277  ,
       642.2818505438805 , 642.4573902462763 , 642.627985536781  ,
       642.7937301447788 , 642.9547169027225 , 643.1110377461325 ,
       643.2627837135979 , 643.4100449467751 , 643.5529106903892 ,
       643.6914692922333 , 643.8258082031683 , 643.9560139771236 ,
       644.0821722710964 , 644.2043678451521 , 644.3226845624241 ,
       644.4372053891141 , 644.5480123944915 , 644.6551867508942 ,
       644.7588087337282 , 644.8589577214672 , 644.9557121956531 ,
       645.0491497408963 , 645.1393470448747 , 645.2263798983349 ,
       645.3103231950912 , 645.3912509320259 , 645.4692362090897 ,
       645.5443512293011 , 645.6166672987471 , 645.6862548265824 ,
       645.7531833250298 , 645.8175214093806 , 645.8793367979937 ,
       645.9386963122962 , 645.9956658767837 , 646.0503105190194 ,
       646.1026943696348 , 646.1528806623295 , 646.2009317338711 ,
       646.2469090240954 , 646.2908730759062 , 646.3328835352754 ,
       646.3729991512431 , 646.4112777759174 , 646.4477763644745 ,
       646.4825509751587 , 646.5156567692823 , 646.5471480112259 ,
       646.5770780684379 , 646.6054994114352 , 646.6324636138024 ,
       646.6580213521925 , 646.6822224063261 , 646.7051156589926 ,
       646.7267490960488 , 646.7471698064202 , 646.7664239820998 ,
       646.7845569181493 , 646.801613012698  , 646.8176357669436 ,
       646.8326677851516 , 646.8467507746557 , 646.859925545858  ,
       646.8722320122283 , 646.8837091903047 , 646.8943951996932 ,
       646.9043272630681 , 646.9135417061717 , 646.9220739578144 ,
       646.9299585498746 , 646.937229117299  , 646.9439183981021 ,
       646.9500582333669 , 646.9556795672441 , 646.9608124469527 ,
       646.9654860227796 , 646.9697285480802 , 646.9735673792774 ,
       646.9770289758626 , 646.9801389003953 , 646.9829218185031 ,
       646.9854014988813 , 646.9876008132936 , 646.9895417365719 ,
       646.9912453466161 , 646.992731824394  , 646.9940204539417 ,
       646.9951296223634 , 646.9960768198312 , 646.9968786395855 ,
       646.9975507779345 , 646.998108034255  , 646.9985643109915 ,
       646.9989326136564 , 646.9992250508309 , 646.9994528341635 ,
       646.9996262783714 , 646.9997548012394 , 646.9998469236209 ,
       646.999910269437  , 646.999951565677  , 646.9999766423982 ,
       646.9999904327263 , 646.9999969728548 , 646.9999994020454 ,
       646.9999999626278 , 647.              ]
cdef DTYPE_t[1276] satl_spline_coeffs = [ 1.7527506812099430e-04, -1.5340508828630209e-02,
        3.8313480992439991e-01,  9.9701062870114754e+02,
        1.7527506812098579e-04, -1.2800828800466405e-02,
        2.4721513062904502e-01,  9.9852301619245065e+02,
        1.1026617417824361e-04, -1.0284995337540820e-02,
        1.3676000523052437e-01,  9.9943199034355155e+02,
        8.6547380903726390e-05, -8.7171832364204439e-03,
        4.6699610499532460e-02,  9.9986087215462351e+02,
        6.5383910297579103e-05, -7.4982425030384698e-03,
       -2.9426871652265034e-02,  9.9989693966827417e+02,
        5.1947849864499321e-05, -6.5860984815355192e-03,
       -9.4921819708132585e-02,  9.9960452934976752e+02,
        4.1791440037373293e-05, -5.8682863470187500e-03,
       -1.5228645610916919e-01,  9.9903267320283805e+02,
        3.4318147071221899e-05, -5.2963232726656552e-03,
       -2.0321988838075494e-01,  9.9821977156615958e+02,
        2.8573256826936924e-05, -4.8311351883448660e-03,
       -2.4897967246562103e-01,  9.9719658222504847e+02,
        2.4098887209997227e-05, -4.4475382225091769e-03,
       -2.9050184345861191e-01,  9.9598820890716911e+02,
        2.0542960734379517e-05, -4.1271256407004178e-03,
       -3.2850401568358839e-01,  9.9461546964549245e+02,
        1.7675141711232317e-05, -3.8566306911146952e-03,
       -3.6354547172298129e-01,  9.9309586608561051e+02,
        1.5329138703254599e-05, -3.6261530014516522e-03,
       -3.9606976913998243e-01,  9.9144428735543886e+02,
        1.3385793779795357e-05, -3.4282101486982101e-03,
       -4.2643374442762494e-01,  9.8967353220589712e+02,
        1.1757144798109952e-05, -3.2570477295882309e-03,
       -4.5492825459379210e-01,  9.8779470357797902e+02,
        1.0377450304844500e-05, -3.1081821105841470e-03,
       -4.8179316373434772e-01,  9.8581751164499383e+02,
        9.1967824868576945e-06, -2.9780760863035226e-03,
       -5.0722840500203692e-01,  9.8375050993643299e+02,
        8.1767513241544660e-06, -2.8639085268153913e-03,
       -5.3140226242807276e-01,  9.8160128171404165e+02,
        7.2874879108959615e-06, -2.7634068257401719e-03,
       -5.5445766030749277e-01,  9.7937658881644347e+02,
        6.5055103267431776e-06, -2.6747235028215920e-03,
       -5.7651699789620592e-01,  9.7708249181371173e+02,
        5.8121785125367385e-06, -2.5963439935591803e-03,
       -5.9768590768219187e-01,  9.7472444796823595e+02,
        5.1925648011343561e-06, -2.5270169550866239e-03,
       -6.1805620663461380e-01,  9.7230739184030438e+02,
        4.6346148712689066e-06, -2.4657009938729318e-03,
       -6.3770823550236266e-01,  9.6983580218577049e+02,
        4.1285186482405779e-06, -2.4115235566228646e-03,
       -6.5671272917869417e-01,  9.6731375792592746e+02,
        3.6662330363252413e-06, -2.3637489160362704e-03,
       -6.7513232431860770e-01,  9.6474498532998621e+02,
        3.2411166483529163e-06, -2.3217530352157446e-03,
       -6.9302278387008420e-01,  9.6213289807340630e+02,
        2.8476474063420364e-06, -2.2850036805040128e-03,
       -7.1043399889089109e-01,  9.5948063147571838e+02,
        2.4812035017163781e-06, -2.2530445780952111e-03,
       -7.2741081382359729e-01,  9.5679107194787218e+02,
        2.1378903073882003e-06, -2.2254826992533457e-03,
       -7.4399371080916743e-01,  9.5406688246915201e+02,
        1.8144051081120415e-06, -2.2019780056718665e-03,
       -7.6021938070661543e-01,  9.5131052475131287e+02,
        1.5079282828935138e-06, -2.1822351150997130e-03,
       -7.7612120246644156e-01,  9.4852427862084983e+02,
        1.2160373872468071e-06, -2.1659965024380867e-03,
       -7.9172964790819711e-01,  9.4571025905096701e+02,
        9.3663700315397570e-07, -2.1530369122892664e-03,
       -8.0707262543009894e-01,  9.4287043119615737e+02,
        6.6790273847175264e-07, -2.1431587537589815e-03,
       -8.2217577343843107e-01,  9.4000662371984072e+02,
        4.0823555580980736e-07, -2.1361882787782394e-03,
       -8.3706271216308903e-01,  9.3712054065540678e+02,
        1.5622348025178658e-07, -2.1319723966504080e-03,
       -8.5175526082719955e-01,  9.3421377200076574e+02,
       -8.9387979487016042e-08, -2.1303760164676049e-03,
       -8.6627362586141832e-01,  9.3128780321388729e+02,
       -3.2972262687937580e-07, -2.1312798018574704e-03,
       -8.8063656476724317e-01,  9.2834402375017623e+02,
       -5.6579359529675228e-07, -2.1345782890162769e-03,
       -8.9486152941761554e-01,  9.2538373476091226e+02,
       -7.9852232660059999e-07, -2.1401782819959543e-03,
       -9.0896479191799828e-01,  9.2240815605397847e+02,
       -1.0287519418033797e-06, -2.1479975008487301e-03,
       -9.2296155561016069e-01,  9.1941843240339676e+02,
       -1.2572615539389174e-06, -2.1579634150785251e-03,
       -9.3686605335513451e-01,  9.1641563928180506e+02,
       -1.4847753465629486e-06, -2.1700122619929371e-03,
       -9.5069163489212660e-01,  9.1340078807986276e+02,
       -1.7119731055757112e-06, -2.1840881905455193e-03,
       -9.6445084477805620e-01,  9.1037483086782606e+02,
       -1.9394972061393958e-06, -2.2001425379542302e-03,
       -9.7815549216339526e-01,  9.0733866474740137e+02,
       -2.1679601843265751e-06, -2.2181331991308929e-03,
       -9.9181671348751821e-01,  9.0429313583574799e+02,
       -2.3979502472024457e-06, -2.2380240895228452e-03,
       -1.0054450289945154e+00,  9.0123904291833730e+02,
       -2.6300369394731535e-06, -2.2597846776489174e-03,
       -1.0190503938494939e+00,  8.9817714080288226e+02,
       -2.8647759061503066e-06, -2.2833895850913745e-03,
       -1.0326422445133985e+00,  8.9510814340276329e+02,
       -3.1027130344369691e-06, -2.3088182422486450e-03,
       -1.0462295409560485e+00,  8.9203272657507318e+02,
       -3.3443882967658029e-06, -2.3360545913708470e-03,
       -1.0598208051950431e+00,  8.8895153073556003e+02,
       -3.5903397299891691e-06, -2.3650868316789937e-03,
       -1.0734241565810987e+00,  8.8586516327031200e+02,
       -3.8411062925472332e-06, -2.3959072053701038e-03,
       -1.0870473442083908e+00,  8.8277420076188957e+02,
       -4.0972311109968383e-06, -2.4285118126063966e-03,
       -1.1006977767697297e+00,  8.7967919104572331e+02,
       -4.3592647787715545e-06, -2.4629004570707906e-03,
       -1.1143825501294202e+00,  8.7658065511100017e+02,
       -4.6277674922831413e-06, -2.4990765206650456e-03,
       -1.1281084728716730e+00,  8.7347908885882441e+02,
       -4.9033122809806276e-06, -2.5370468559692584e-03,
       -1.1418820900324425e+00,  8.7037496472916257e+02,
       -5.1864875814640368e-06, -2.5768217041930103e-03,
       -1.1557097052008674e+00,  8.6726873320701770e+02,
       -5.4778996121472206e-06, -2.6184146316433877e-03,
       -1.1695974011678065e+00,  8.6416082421727083e+02,
       -5.7781745189587304e-06, -2.6618424818155594e-03,
       -1.1835510592623235e+00,  8.6105164841676060e+02,
       -6.0879625568283568e-06, -2.7071253401478044e-03,
       -1.1975763774935084e+00,  8.5794159839143174e+02,
       -6.4079374301805761e-06, -2.7542865262056731e-03,
       -1.2116788876388023e+00,  8.5483104976569632e+02,
       -6.7388029269548285e-06, -2.8033525741522178e-03,
       -1.2258639713487696e+00,  8.5172036223049577e+02,
       -7.0812911644280193e-06, -2.8543532572757424e-03,
       -1.2401368753765529e+00,  8.4860988049612297e+02,
       -7.4361685273484964e-06, -2.9073215905283021e-03,
       -1.2545027260076167e+00,  8.4549993517523035e+02,
       -7.8042361718582153e-06, -2.9622938691297993e-03,
       -1.2689665427410433e+00,  8.4239084360117306e+02,
       -8.1863333082634467e-06, -3.0193097007106826e-03,
       -1.2835332513084790e+00,  8.3928291058633147e+02,
       -8.5833401659155761e-06, -3.0784120510865404e-03,
       -1.2982076960569591e+00,  8.3617642912477538e+02,
       -8.9961794739606022e-06, -3.1396473000508823e-03,
       -1.3129946517596505e+00,  8.3307168104330106e+02,
       -9.4258207791317150e-06, -3.2030652955348593e-03,
       -1.3278988348782450e+00,  8.2996893760458511e+02,
       -9.8732819520392326e-06, -3.2687194255356677e-03,
       -1.3429249143172888e+00,  8.2686846006597807e+02,
       -1.0339632329811317e-05, -3.3366666866771022e-03,
       -1.3580775217039600e+00,  8.2377050019718263e+02,
       -1.0825995937618353e-05, -3.4069677602008197e-03,
       -1.3733612612009565e+00,  8.2067530075989566e+02,
       -1.1333554249216516e-05, -3.4796870948001551e-03,
       -1.3887807188826711e+00,  8.1758309595229935e+02,
       -1.1863548615147968e-05, -3.5548929921205060e-03,
       -1.4043404716920387e+00,  8.1449411182109577e+02,
       -1.2417284673261235e-05, -3.6326576919032071e-03,
       -1.4200450959783999e+00,  8.1140856664363787e+02,
       -1.2996134028489586e-05, -3.7130574689318348e-03,
       -1.4358991756365940e+00,  8.0832667128257731e+02,
       -1.3601538710266265e-05, -3.7961727227560486e-03,
       -1.4519073098512307e+00,  8.0524862951528166e+02,
       -1.4235013382441067e-05, -3.8820880774893974e-03,
       -1.4680741204462504e+00,  8.0217463834018895e+02,
       -1.4898150699097400e-05, -3.9708924761634344e-03,
       -1.4844042588435873e+00,  7.9910488826212827e+02,
       -1.5592621783294383e-05, -4.0626792885817085e-03,
       -1.5009024126416446e+00,  7.9603956355854120e+02,
       -1.6320183658918317e-05, -4.1575464011670681e-03,
       -1.5175733117978900e+00,  7.9297884252840947e+02,
       -1.7082679538036044e-05, -4.2555963310288792e-03,
       -1.5344217344228424e+00,  7.8992289772565232e+02,
       -1.7882045584527366e-05, -4.3569363191499630e-03,
       -1.5514525121865630e+00,  7.8687189617859281e+02,
       -1.8720313887198863e-05, -4.4616784412470113e-03,
       -1.5686705353259607e+00,  7.8382599959706886e+02,
       -1.9599614754642316e-05, -4.5699397120770799e-03,
       -1.5860807572701072e+00,  7.8078536456862184e+02,
       -2.0522187028195510e-05, -4.6818421787866429e-03,
       -1.6036881988449192e+00,  7.7775014274514433e+02,
       -2.1490374578704499e-05, -4.7975130483047706e-03,
       -1.6214979520984516e+00,  7.7472048102130645e+02,
       -2.2506640082303222e-05, -4.9170847682175889e-03,
       -1.6395151837188247e+00,  7.7169652170590643e+02,
       -2.3573562732062380e-05, -5.0406951584476955e-03,
       -1.6577451380501380e+00,  7.6867840268734051e+02,
       -2.4693848817580201e-05, -5.1684875016213385e-03,
       -1.6761931397210885e+00,  7.6566625759416945e+02,
       -2.5870336316023755e-05, -5.3006106629193313e-03,
       -1.6948645958619442e+00,  7.6266021595179450e+02,
       -2.7106001205570380e-05, -5.4372192042902072e-03,
       -1.7137649979509260e+00,  7.5966040333609703e+02,
       -2.8403963920462528e-05, -5.5784735011190374e-03,
       -1.7328999232807707e+00,  7.5666694152482728e+02,
       -2.9767498396688027e-05, -5.7245398605323657e-03,
       -1.7522750360498913e+00,  7.5367994864745845e+02,
       -3.1200042651756394e-05, -5.8755906529649260e-03,
       -1.7718960881007946e+00,  7.5069953933413967e+02,
       -3.2705200194168175e-05, -6.0318044621339171e-03,
       -1.7917689193547073e+00,  7.4772582486426279e+02,
       -3.4286763129318340e-05, -6.1933662050944038e-03,
       -1.8118994579160097e+00,  7.4475891331505409e+02,
       -3.5948711455732227e-05, -6.3604673288751735e-03,
       -1.8322937199170950e+00,  7.4179890971059717e+02,
       -3.7695236300685017e-05, -6.5333059613690344e-03,
       -1.8529578091426009e+00,  7.3884591617145247e+02,
       -3.9530749092609526e-05, -6.7120871318089989e-03,
       -1.8738979164570477e+00,  7.3590003206506117e+02,
       -4.1459902066358016e-05, -6.8970229874763039e-03,
       -1.8951203191228720e+00,  7.3296135415692936e+02,
       -4.3487608805152367e-05, -7.0883330570855304e-03,
       -1.9166313800518899e+00,  7.3002997676251448e+02,
       -4.5619065181236186e-05, -7.2862445549129870e-03,
       -1.9384375470957429e+00,  7.2710599189960169e+02,
       -4.7859778808172091e-05, -7.4909927215990992e-03,
       -1.9605453524546830e+00,  7.2418948944081319e+02,
       -5.0215601032731383e-05, -7.7028212334925841e-03,
       -1.9829614123156381e+00,  7.2128055726579271e+02,
       -5.2692758537036829e-05, -7.9219826829230195e-03,
       -2.0056924268673320e+00,  7.1837928141243333e+02,
       -5.5297903336487849e-05, -8.1487391184142145e-03,
       -2.0287451808105947e+00,  7.1548574622636704e+02,
       -5.8038158167682594e-05, -8.3833627140684364e-03,
       -2.0521265445489201e+00,  7.1260003450781710e+02,
       -6.0921167895785777e-05, -8.6261365337617288e-03,
       -2.0758434762700437e+00,  7.0972222765468246e+02,
       -6.3955181915423230e-05, -8.8773554021016731e-03,
       -2.0999030250717139e+00,  7.0685240580059758e+02,
       -6.7149110593867225e-05, -9.1373269936202550e-03,
       -2.1243123354295017e+00,  7.0399064794656431e+02,
       -7.0512626733179411e-05, -9.4063730114157199e-03,
       -2.1490786532429569e+00,  7.0113703208447691e+02,
       -7.4056263842244788e-05, -9.6848306181997260e-03,
       -2.1742093337069535e+00,  6.9829163531081167e+02,
       -7.7791528604234387e-05, -9.9730540775779964e-03,
       -2.1997118513743250e+00,  6.9545453392850879e+02,
       -8.1731022937067685e-05, -1.0271416632567131e-02,
       -2.2255938127046551e+00,  6.9262580353490353e+02,
       -8.5888615535829394e-05, -1.0580312626388422e-02,
       -2.2518629713869327e+00,  6.8980551909347309e+02,
       -9.0279568651756834e-05, -1.0900160016629955e-02,
       -2.2785272468680366e+00,  6.8699375498705353e+02,
       -9.4920762535645228e-05, -1.1231403070345274e-02,
       -2.3055947463767135e+00,  6.8419058504997486e+02,
       -9.9830858672677366e-05, -1.1574515561433742e-02,
       -2.3330737908073704e+00,  6.8139608257667680e+02,
       -1.0503054931137794e-04, -1.1930004190389403e-02,
       -2.3609729448096850e+00,  6.7861032030418153e+02,
       -1.1054279660645119e-04, -1.2298412489113385e-02,
       -2.3893010513404680e+00,  6.7583337036599630e+02,
       -1.1639307050159846e-04, -1.2680325109307909e-02,
       -2.4180672710556959e+00,  6.7306530421500338e+02,
       -1.2260966568144346e-04, -1.3076372430457206e-02,
       -2.4472811266524035e+00,  6.7030619251308303e+02,
       -1.2922398051336346e-04, -1.3487235695437068e-02,
       -2.4769525523744473e+00,  6.6755610498555575e+02,
       -1.3627082536419178e-04, -1.3913652469600071e-02,
       -2.5070919488295469e+00,  6.6481511023869814e+02,
       -1.4378877283034556e-04, -1.4356422454868113e-02,
       -2.5377102430104190e+00,  6.6208327553908248e+02,
       -1.5182048130364328e-04, -1.4816413722864553e-02,
       -2.5688189534711001e+00,  6.5936066655401078e+02,
       -1.6041304455784814e-04, -1.5294569203776510e-02,
       -2.6004302604531127e+00,  6.5664734705281091e+02,
       -1.6961836742788045e-04, -1.5791913443480431e-02,
       -2.6325570805628660e+00,  6.5394337856948380e+02,
       -1.7949344018947894e-04, -1.6309559636084926e-02,
       -2.6652131456038455e+00,  6.5124882002790014e+02,
       -1.9010084220188214e-04, -1.6848716550841022e-02,
       -2.6984130847745997e+00,  6.4856372733153307e+02,
       -2.0150881833115206e-04, -1.7410695987018568e-02,
       -2.7321725097175964e+00,  6.4588815292069035e+02,
       -2.1379192983234075e-04, -1.7996919407384043e-02,
       -2.7665081012075152e+00,  6.4322214530080259e+02,
       -2.2703099096834883e-04, -1.8608925412415909e-02,
       -2.8014376966426400e+00,  6.4056574854677444e+02,
       -2.4131367572295559e-04, -1.9248375902691097e-02,
       -2.8369803770834303e+00,  6.3791900178863648e+02,
       -2.5673447875691085e-04, -1.9917062846989932e-02,
       -2.8731565524576816e+00,  6.3528193868535004e+02,
       -2.7339508481917182e-04, -2.0616913774071158e-02,
       -2.9099880436982914e+00,  6.3265458689382535e+02,
       -2.9140445424904825e-04, -2.1349997140015065e-02,
       -2.9474981600334806e+00,  6.3003696754151986e+02,
       -3.1087892654673777e-04, -2.2118526769858156e-02,
       -2.9857117701358229e+00,  6.2742909471138285e+02,
       -3.3194228205792698e-04, -2.2924865445378171e-02,
       -3.0246553653409300e+00,  6.2483097494859783e+02,
       -3.5472571469685835e-04, -2.3771527552604203e-02,
       -3.0643571133379499e+00,  6.2224260679907161e+02,
       -3.7936773318721155e-04, -2.4661180597483161e-02,
       -3.1048469006979995e+00,  6.1966398038991133e+02,
       -4.0601404266227801e-04, -2.5596645467398881e-02,
       -3.1461563625639504e+00,  6.1709507706234911e+02,
       -4.3481716159220744e-04, -2.6580895461687931e-02,
       -3.1883188979816546e+00,  6.1453586906758699e+02,
       -4.6593629289006774e-04, -2.7617053534622935e-02,
       -3.2313696691637359e+00,  6.1198631933590070e+02,
       -4.9953657127184837e-04, -2.8708388482921600e-02,
       -3.2753455833894631e+00,  6.0944638132917976e+02,
       -5.3578867147426686e-04, -2.9858308713025448e-02,
       -3.3202852560039751e+00,  6.0691599898639788e+02,
       -5.7486803014707741e-04, -3.1070354622489846e-02,
       -3.3662289530227967e+00,  6.0439510677132523e+02,
       -6.1695377898216344e-04, -3.2348188861815848e-02,
       -3.4132185123782168e+00,  6.0188362983083721e+02,
       -6.6222782550320923e-04, -3.3695584056720462e-02,
       -3.4612972422687380e+00,  5.9938148427145359e+02,
       -7.1087341947099060e-04, -3.5116408577119701e-02,
       -3.5105097955455213e+00,  5.9688857756104221e+02,
       -7.6307353237660728e-04, -3.6614609493810249e-02,
       -3.5609020191984397e+00,  5.9440480906145194e+02,
       -8.1900910159559445e-04, -3.8194192667790151e-02,
       -3.6125207776998258e+00,  5.9193007069694374e+02,
       -8.7885678481823288e-04, -3.9859200056845040e-02,
       -3.6654137493708969e+00,  5.8946424776226195e+02,
       -9.4278646411902222e-04, -4.1613683635873776e-02,
       -3.7196291949528622e+00,  5.8700721987296151e+02,
       -1.0109584894871539e-03, -4.3461675904407700e-02,
       -3.7752156975373099e+00,  5.8455886205952174e+02,
       -1.0835203599967231e-03, -4.5407156977289032e-02,
       -3.8322218734050946e+00,  5.8211904600552134e+02,
       -1.1606032063391275e-03, -4.7454017726197714e-02,
       -3.8906960533761783e+00,  5.7968764142878081e+02,
       -1.2423178822340403e-03, -4.9606019226892714e-02,
       -3.9506859345111658e+00,  5.7726451760307691e+02,
       -1.3287509771390429e-03, -5.1866748435322331e-02,
       -4.0122382025192005e+00,  5.7484954501648292e+02,
       -1.4199600004562245e-03, -5.4239570636696592e-02,
       -4.0753981258689169e+00,  5.7244259716068950e+02,
       -1.5159694628327212e-03, -5.6727577882205123e-02,
       -4.1402091227607203e+00,  5.7004355244375108e+02,
       -1.6167662228151992e-03, -5.9333535753796150e-02,
       -4.2067123033064240e+00,  5.6765229621687422e+02,
       -1.7222956637718491e-03, -6.2059827799626176e-02,
       -4.2749459903630331e+00,  5.6526872290325559e+02,
       -1.8324586896637639e-03, -6.4908399705636721e-02,
       -4.3449452232542169e+00,  5.6289273821451729e+02,
       -1.9471090982392453e-03, -6.7880705027178259e-02,
       -4.4167412506109391e+00,  5.6052426143729292e+02,
       -2.0660543203933897e-03, -7.0977653392619550e-02,
       -4.4903610196183328e+00,  5.5816322776916070e+02,
       -2.1890562733192769e-03, -7.4199566647180609e-02,
       -4.5658266716893676e+00,  5.5580959067965182e+02,
       -2.3158381183149752e-03, -7.7546142692436690e-02,
       -4.6431550562290234e+00,  5.5346332426766219e+02,
       -2.4460924134717317e-03, -8.1016435440492668e-02,
       -4.7223572768930335e+00,  5.5112442558264229e+02,
       -2.5794979873452429e-03, -8.4608851456384873e-02,
       -4.8034382872979160e+00,  5.4879291687187617e+02,
       -2.7157392403207993e-03, -8.8321174178443720e-02,
       -4.8863965562634544e+00,  5.4646884771166663e+02,
       -2.8545387440760293e-03, -9.2150616029235119e-02,
       -4.9712238249064944e+00,  5.4415229697483142e+02,
       -2.9956936236366092e-03, -9.6093913401329431e-02,
       -5.0579049813345778e+00,  5.4184337458264019e+02,
       -3.1391276601979955e-03, -1.0014746415340273e-01,
       -5.1464180808605802e+00,  5.3954222298407296e+02,
       -3.2849530674819742e-03, -1.0430752259980516e-01,
       -5.2367345409966806e+00,  5.3724901830205624e+02,
       -3.4335453583805402e-03, -1.0857045639313284e-01,
       -5.3288195431121945e+00,  5.3496397108287624e+02,
       -3.5856333947909156e-03, -1.1293307261586871e-01,
       -5.4226326709616188e+00,  5.3268732658350871e+02,
       -3.7424023693690706e-03, -1.1739302103168936e-01,
       -5.5181288156574793e+00,  5.3041936453201231e+02,
       -3.9056080912066825e-03, -1.2194927748001497e-01,
       -5.6152593736358973e+00,  5.2816039829854276e+02,
       -4.0777057436842861e-03, -1.2660270678952568e-01,
       -5.7139737574591667e+00,  5.2591077341998584e+02,
       -4.2619802221944628e-03, -1.3135670702554733e-01,
       -5.8142212324891318e+00,  5.2367086543015728e+02,
       -4.4626888533709748e-03, -1.3621792046781830e-01,
       -5.9159530807668030e+00,  5.2144107695961134e+02,
       -4.6851875098694162e-03, -1.4119700943113783e-01,
       -6.0191250817066244e+00,  5.1922183408578417e+02,
       -4.9360694274496221e-03, -1.4630946221884958e-01,
       -6.1237002816941848e+00,  5.1701358193377291e+02,
       -5.2232620931160290e-03, -1.5157642958484502e-01,
       -6.2296520106950277e+00,  5.1481677955269788e+02,
       -5.5561315837391228e-03, -1.5702553383045764e-01,
       -6.3369670843707491e+00,  5.1263189411774295e+02,
       -5.9455345766132777e-03, -1.6269165083542647e-01,
       -6.4456491142755672e+00,  5.1045939453787997e+02,
       -6.4038590522419265e-03, -1.6861760513986485e-01,
       -6.5557218355898588e+00,  5.0829974457650673e+02,
       -6.9450268867291614e-03, -1.7485476711904596e-01,
       -6.6672323484271114e+00,  5.0615339562066970e+02,
       -7.5844668820452656e-03, -1.8146351780537673e-01,
       -6.7802541671788612e+00,  5.0402077925792338e+02,
       -8.3390738548487376e-03, -1.8851356089329235e-01,
       -6.8948899698409747e+00,  5.0190229983879379e+02,
       -9.2271535200979214e-03, -1.9608408000900135e-01,
       -7.0112739489646891e+00,  4.9979832721498434e+02,
       -1.0268363713764413e-02, -2.0426374084062418e-01,
       -7.1295736818163968e+00,  4.9770918984659249e+02,
       -1.1483684759263915e-02, -2.1315054850780579e-01,
       -7.2499914559421157e+00,  4.9563516846602278e+02,
       -1.2895408897597816e-02, -2.2285159826672010e-01,
       -7.3727650142419110e+00,  4.9357649047181360e+02,
       -1.4527183082040294e-02, -2.3348274464087770e-01,
       -7.4981677120427142e+00,  4.9153332520173655e+02,
       -1.6404107706847894e-02, -2.4516823865415441e-01,
       -7.6265081060052013e+00,  4.8950578020440537e+02,
       -1.8552903696356843e-02, -2.5804037730390028e-01,
       -7.7581290225486788e+00,  4.8749389859299220e+02,
       -2.1002149417143456e-02, -2.7223921150376396e-01,
       -7.8934061752840803e+00,  4.8549765752636887e+02,
       -2.3782587094413818e-02, -2.8791235123967335e-01,
       -8.0327464167962699e+00,  4.8351696782451432e+02,
       -2.6927511276546905e-02, -3.0521489827635689e-01,
       -8.1765857181130883e+00,  4.8155167468902243e+02,
       -3.0473187481113509e-02, -3.2430953810606800e-01,
       -8.3253869726281238e+00,  4.7960155946784977e+02,
       -3.4459367088697394e-02, -3.4536677843626190e-01,
       -8.4796377124476034e+00,  4.7766634237740482e+02,
       -3.8929791584381618e-02, -3.6856536456090139e-01,
       -8.6398478159762711e+00,  4.7574568607692095e+02,
       -4.3932734273999109e-02, -3.9409282255191574e-01,
       -8.8065472685095347e+00,  4.7383919997777087e+02,
       -4.9521604763347285e-02, -4.2214611624152998e-01,
       -8.9802840128702179e+00,  4.7194644516692478e+02,
       -5.5755399902695520e-02, -4.5293241813667806e-01,
       -9.1616219162630586e+00,  4.7006693982573961e+02,
       -6.2699337570413433e-02, -4.8666985928133116e-01,
       -9.3511388454998485e+00,  4.6820016503180557e+02,
       -7.0425178546124220e-02, -5.2358834198866400e-01,
       -9.5494248315979497e+00,  4.6634557084520031e+02,
       -7.9011770873293100e-02, -5.6393019780348341e-01,
       -9.7570802801840806e+00,  4.6450258259270885e+02,
       -8.8545192571518813e-02, -6.0795080841477167e-01,
       -9.9747141714694472e+00,  4.6267060728208838e+02,
       -9.9119020467984736e-02, -6.5591894649792237e-01,
       -1.0202942180098507e+01,  4.6084904009222964e+02,
       -1.1083429803948756e-01, -7.0811691656207165e-01,
       -1.0442384629557230e+01,  4.5903727090321712e+02,
       -1.2379932821816146e-01, -7.6484034437782400e-01,
       -1.0693664201388295e+01,  4.5723469084265156e+02,
       -1.3812931837986547e-01, -8.2639755775549872e-01,
       -1.0957403303708622e+01,  4.5544069883699217e+02,
       -1.5394565553274187e-01, -8.9310853118446043e-01,
       -1.1234221014231405e+01,  4.5365470816588493e+02,
       -1.7137510456510577e-01, -9.6530327532106319e-01,
       -1.1524729515227580e+01,  4.5187615302254602e+02,
       -1.9054840510383814e-01, -1.0433197184461833e+00,
       -1.1829529954689901e+01,  4.5010449508570440e+02,
       -2.1159916902214809e-01, -1.1275008977929217e+00,
       -1.2149207675643819e+01,  4.4833923010599608e+02,
       -2.3466193281016662e-01, -1.2181917156844941e+00,
       -1.2484326795158479e+01,  4.4657989450530221e+02,
       -2.5987090958024062e-01, -1.3157350036331341e+00,
       -1.2835424138562301e+01,  4.4482607197500511e+02,
       -2.8735818472918762e-01, -1.4204673285633067e+00,
       -1.3203002579967569e+01,  4.4307740004747302e+02,
       -3.1725326332658610e-01, -1.5327144130984560e+00,
       -1.3587523894271159e+01,  4.4133357659465594e+02,
       -3.4968248071325714e-01, -1.6527868044744023e+00,
       -1.3989401293328477e+01,  4.3959436618764602e+02,
       -3.8477123599035357e-01, -1.7809757588783881e+00,
       -1.4408991880928321e+01,  4.3785960622396658e+02,
       -4.2264680468349952e-01, -1.9175503675076158e+00,
       -1.4846589350947124e+01,  4.3612921270515585e+02,
       -4.6344636212251739e-01, -2.0627559519182617e+00,
       -1.5302417321127029e+01,  4.3440318551685687e+02,
       -5.0732645112913033e-01, -2.2168152625377093e+00,
       -1.5776623791700272e+01,  4.3268161304064381e+02,
       -5.5448011259674912e-01, -2.3799324201954422e+00,
       -1.6269277266143089e+01,  4.3096467589996132e+02,
       -6.0515833723280843e-01, -2.5523014063232181e+00,
       -1.6780365115047598e+01,  4.2925264963132054e+02,
       -6.5969820329035211e-01, -2.7341193910101920e+00,
       -1.7309794806662815e+01,  4.2754590606091313e+02,
       -7.1856244014664339e-01, -2.9256056493523745e+00,
       -1.7857398526979868e+01,  4.2584491317526340e+02,
       -7.8237896705802057e-01, -3.1270277808860407e+00,
       -1.8422941736958315e+01,  4.2415023329633777e+02,
       -8.5199864555412108e-01, -3.3387332014403297e+00,
       -1.9006135945733345e+01,  4.2246251940444898e+02,
       -9.2855079001904339e-01, -3.5611888212407168e+00,
       -1.9606655848020061e+01,  4.2078250951926083e+02,
       -1.0135100168896785e+00, -3.7950256648002627e+00,
       -2.0224160743624601e+01,  4.1911101911165497e+02,
       -1.1087692795200856e+00, -4.0410888808825458e+00,
       -2.0858319760167451e+01,  4.1744893161448431e+02,
       -1.2167057973018576e+00, -4.3004919192722930e+00,
       -2.1508840250017741e+01,  4.1579718719397539e+02,
       -1.3402725215147298e+00, -4.5746705609395750e+00,
       -2.2175498259098806e+01,  4.1415677004044045e+02,
       -1.4830564005612961e+00, -4.8654402831661487e+00,
       -2.2858169970478620e+01,  4.1252869453645604e+02,
       -1.6493830154427294e+00, -5.1750469688327465e+00,
       -2.3556862656607290e+01,  4.1091399072347440e+02,
       -1.8443866291410749e+00, -5.5062191545975434e+00,
       -2.4271743759765510e+01,  4.0931368956176897e+02,
       -2.0741178484194496e+00, -5.8622120621608182e+00,
       -2.5003166846325193e+01,  4.0772880848315350e+02,
       -2.3456509890608048e+00, -6.2468492646495504e+00,
       -2.5751693177982141e+01,  4.0616033774386193e+02,
       -2.6672267947269042e+00, -6.6645593749516348e+00,
       -2.6518108123790125e+01,  4.0460922803875900e+02,
       -3.0484024434287020e+00, -7.1204116216065758e+00,
       -2.7303431917937306e+01,  4.0307637977110039e+02,
       -3.5002751985627856e+00, -7.6201482043406550e+00,
       -2.8108924535979305e+01,  4.0156263427948608e+02,
       -4.0357250916465013e+00, -8.1702218836840963e+00,
       -2.8936084923833164e+01,  4.0006876722578170e+02,
       -4.6697189312024925e+00, -8.7778361257378972e+00,
       -2.9786645123700115e+01,  3.9859548422946779e+02,
       -5.4197193818632536e+00, -9.4509911210653783e+00,
       -3.0662559805856390e+01,  3.9714341873599108e+02,
       -6.3061236343247042e+00, -1.0198543153928076e+01,
       -3.1565992145990098e+01,  3.9571313201576493e+02,
       -7.3528385326228678e+00, -1.1030271392482284e+01,
       -3.2499296848590433e+01,  3.9430511510608596e+02,
       -8.5879266670873342e+00, -1.1956959765750963e+01,
       -3.3465000989173355e+01,  3.9291979246111572e+02,
       -1.0044424532522118e+01, -1.2990489670156789e+01,
       -3.4465783290117699e+01,  3.9155752703736079e+02,
       -1.1761217600560959e+01, -1.4143949940403639e+01,
       -3.5504452319716826e+01,  3.9021862652892895e+02,
       -1.3784215250264165e+01, -1.5431753466805688e+01,
       -3.6583923749664898e+01,  3.8890335046390106e+02,
       -1.6167425912443179e+01, -1.6869775623550666e+01,
       -3.7707196848285307e+01,  3.8761191789288495e+02,
       -1.8974610169375005e+01, -1.8475482044846036e+01,
       -3.8877329671899858e+01,  3.8634451541619882e+02,
       -2.2280824572249632e+01, -2.0268084163735058e+01,
       -4.0097412689133222e+01,  3.8510130534338674e+02,
       -2.6174307040858601e+01, -2.2268683226269353e+01,
       -4.1370540570730796e+01,  3.8388243378459526e+02,
       -3.0758482226469187e+01, -2.4500410100641592e+01,
       -4.2699781013845893e+01,  3.8268803851646044e+02,
       -3.6154988228085131e+01, -2.6988543918433859e+01,
       -4.4088139589694435e+01,  3.8151825649653352e+02,
       -4.2504636592867151e+01, -2.9760663110317530e+01,
       -4.5538520976777185e+01,  3.8037323091521648e+02,
       -4.9972892317770579e+01, -3.2846634143664104e+01,
       -4.7053683566781714e+01,  3.7925311767554820e+02,
       -5.8749854806777392e+01, -3.6278760294577133e+01,
       -4.8636188687324321e+01,  3.7815809126078284e+02,
       -6.9054909591111340e+01, -4.0091644152658354e+01,
       -5.0288343024895198e+01,  3.7708834985422328e+02,
       -8.1141147068077572e+01, -4.4322095078100240e+01,
       -5.2012131545089524e+01,  3.7604411969335564e+02,
       -9.5293204858322014e+01, -4.9009012779592098e+01,
       -5.3809145092156371e+01,  3.7502565855943203e+02,
       -1.1183492014091448e+02, -5.4192849548533133e+01,
       -5.5680497861939756e+01,  3.7403325828971469e+02,
       -1.3113000669320391e+02, -5.9915250463844998e+01,
       -5.7626736404524159e+01,  3.7306724629031697e+02,
       -1.5357458639327697e+02, -6.6218442078240273e+01,
       -5.9647745562212094e+01,  3.7212798589005172e+02,
       -1.7960953870144306e+02, -7.3144050015083664e+01,
       -6.1742645080869757e+01,  3.7121587542904956e+02,
       -2.0970132466921561e+02, -8.0732367760197121e+01,
       -6.3909685057330321e+01,  3.7033134603839096e+02,
       -2.4435473167122268e+02, -8.9020668680221220e+01,
       -6.6146142473333626e+01,  3.6947485792584882e+02,
       -2.8406752564404758e+02, -9.8042098543438954e+01,
       -6.8448224127310439e+01,  3.6864689511734031e+02,
       -3.2938056844916429e+02, -1.0782297927600946e+02,
       -7.0810974285145420e+01,  3.6784795853995661e+02,
       -3.8077192968525435e+02, -1.1838227081658277e+02,
       -7.3228205711377427e+01,  3.6707855748739348e+02,
       -4.3872215420399681e+02, -1.2972782362761279e+02,
       -7.5692450893347285e+01,  3.6633919931979159e+02,
       -5.0363674755148855e+02, -1.4185556461220995e+02,
       -7.8194940572162622e+01,  3.6563037763286763e+02,
       -5.7580714929273211e+02, -1.5474703101205202e+02,
       -8.0725628555904308e+01,  3.6495255890436130e+02,
       -6.5544728364370883e+02, -1.6836704444466366e+02,
       -8.3273251229800962e+01,  3.6430616789039522e+02,
       -7.4257637522317702e+02, -1.8266346545120973e+02,
       -8.5825442220010217e+01,  3.6369157211855611e+02,
       -8.3706481498108144e+02, -1.9756537112612588e+02,
       -8.8368899677323355e+01,  3.6310906581955385e+02,
       -9.3851417685161834e+02, -2.1298369133591902e+02,
       -9.0889603288948294e+01,  3.6255885385276133e+02,
       -1.0464571956157499e+03, -2.2881079594570977e+02,
       -9.3373077607077732e+01,  3.6204103618203357e+02,
       -1.1599426689693596e+03, -2.4492481266137074e+02,
       -9.5804705499703260e+01,  3.6155559353779415e+02,
       -1.2782556021825840e+03, -2.6118805271634841e+02,
       -9.8170062353029650e+01,  3.6110237484921680e+02,
       -1.3995025344437947e+03, -2.7745714791497363e+02,
       -1.0045527824474566e+02,  3.6068108713743612e+02,
       -1.5237102935620162e+03, -2.9357450988426302e+02,
       -1.0264737238728608e+02,  3.6029128832761722e+02,
       -1.6473544626188514e+03, -3.0939792093140943e+02,
       -1.0473461969478285e+02,  3.5993238353087145e+02,
       -1.7711603789599287e+03, -3.2476736510367243e+02,
       -1.0670682587563334e+02,  3.5960362483606082e+02,
       -1.8924757559448935e+03, -3.3955434797468956e+02,
       -1.0855557880033399e+02,  3.5930411510074140e+02,
       -2.0076441098253883e+03, -3.5363255296940486e+02,
       -1.1027446075703104e+02,  3.5903281525049488e+02,
       -2.1221311904973704e+03, -3.6687887484621615e+02,
       -1.1185909192447940e+02,  3.5878855516726441e+02,
       -2.2263528032198774e+03, -3.7923555632798877e+02,
       -1.1330724279222990e+02,  3.5857004763530625e+02,
       -2.3236829668544506e+03, -3.9061406732024176e+02,
       -1.1461876634356986e+02,  3.5837590462001282e+02,
       -2.4131714083277775e+03, -4.0097637659983138e+02,
       -1.1579544794766805e+02,  3.5820465563150384e+02,
       -2.5014061225392884e+03, -4.1030542854138059e+02,
       -1.1684088965330882e+02,  3.5805476718416759e+02,
       -2.5729906622752055e+03, -4.1862887058389384e+02,
       -1.1776031740150889e+02,  3.5792466276555501e+02,
       -2.6086566925284123e+03, -4.2594026130385180e+02,
       -1.1856029114459865e+02,  3.5781274271783133e+02,
       -2.7394128239930410e+03, -4.3221527870868380e+02,
       -1.1924837720885574e+02,  3.5771740354619845e+02,
       -2.6699520568404087e+03, -4.3773907194747306e+02,
       -1.1983310688985085e+02,  3.5763705604510767e+02,
       -2.9122133514344837e+03, -4.4220261492448617e+02,
       -1.2032345995649852e+02,  3.5757014189373393e+02,
       -2.5498655526340785e+03, -4.4618894053633716e+02,
       -1.2072881235614588e+02,  3.5751514875998510e+02,
       -2.9948720210938304e+03, -4.4900630737100039e+02,
       -1.2105851515157759e+02,  3.5747062336514659e+02,
       -3.0371350872927487e+03, -4.5163374310655672e+02,
       -1.2132189578317526e+02,  3.5743518288133288e+02,
       -3.7447091697385522e+03, -4.5370916936247079e+02,
       -1.2152811780897899e+02,  3.5740752430656374e+02,
        5.0076057402087672e+03, -4.5565766370902196e+02,
       -1.2168584221894349e+02,  3.5738643229002128e+02,
       -4.0005552707688614e+04, -4.5372688815300694e+02,
       -1.2180271892972485e+02,  3.5737078536059562e+02,
        1.5129089215230441e+05, -4.6478310851855633e+02,
       -1.2188733425803912e+02,  3.5735956072221143e+02,
       -6.9134582786695473e+05, -4.3603217342351718e+02,
       -1.2194439713723071e+02,  3.5735183784297493e+02,
        3.6521990316235810e+06, -5.2168212299103141e+02,
       -1.2198394713661182e+02,  3.5734680120560228e+02,
       -2.4160092126656767e+07, -2.4692659155559869e+02,
       -1.2200322132311365e+02,  3.5734374197769728e+02,
        2.0125537683854052e+08, -1.2464533854919114e+03,
       -1.2202381552301316e+02,  3.5734205940292298e+02,
       -1.8832236395331671e+09,  2.7022546465145688e+03,
       -1.2201429439580542e+02,  3.5734126135448344e+02,
        5.2674629992914009e+09, -1.1021873171923784e+04,
       -1.2203450433540901e+02,  3.5734096494745000e+02,
        5.2674629907898302e+09, -2.1633319090344935e+03,
       -1.2204189572941196e+02,  3.5734089653451809e+02]
cdef DTYPE_t[1276] satv_spline_coeffs = [ 1.2911957797801625e-07,  4.6510006051228431e-06,
        1.4421174348198766e-04,  1.8552889771409394e-03,
        1.2911957797802231e-07,  6.5219022510393853e-06,
        1.9817568055644850e-04,  2.6748624418457328e-03,
        1.6689532668646502e-07,  8.3752368894359206e-06,
        2.6945168794538998e-04,  3.7864830957091795e-03,
        1.9970598117161977e-07,  1.0748226745567956e-05,
        3.6008691047467717e-04,  5.2694411178349021e-03,
        2.3929274578824121e-07,  1.3560902907552479e-05,
        4.7421086592290161e-04,  7.2174960469427764e-03,
        2.8251213534308246e-07,  1.6899177514659522e-05,
        6.1585621427220297e-04,  9.7399775882860747e-03,
        3.3018969130762951e-07,  2.0802912499388901e-05,
        7.8951125344013076e-04,  1.2962721205693037e-02,
        3.8199982121371779e-07,  2.5321931484882453e-05,
        9.9993478790642203e-04,  1.7028811197763092e-02,
        4.3786393092124102e-07,  3.0500001404347375e-05,
        1.2521599247504946e-03,  2.2099110663055997e-02,
        4.9757870587144894e-07,  3.6378339892942035e-05,
        1.5514412767404526e-03,  2.8352564920532192e-02,
        5.6092680550057025e-07,  4.2994017887203365e-05,
        1.9032127348853453e-03,  3.5986272168815628e-02,
        6.2765724227460210e-07,  5.0379899111285044e-05,
        2.3130396223480444e-03,  4.5215322092199889e-02,
        6.9750151953976317e-07,  5.8564330866523981e-05,
        2.7865712227849930e-03,  5.6272409468859461e-02,
        7.7017994657563146e-07,  6.7571062637320671e-05,
        3.3294936510365703e-03,  6.9407235394697120e-02,
        8.4541014885968715e-07,  7.7419254307872895e-05,
        3.9474844803222145e-03,  8.4885713362708504e-02,
        9.2291420245242374e-07,  8.8123596840304714e-05,
        4.6461699585584378e-03,  1.0298900105705393e-01,
        1.0024251302192505e-06,  9.9694521692336274e-05,
        5.4310855840184304e-03,  1.2401238131575110e-01,
        1.0836923975167250e-06,  1.1213848574717942e-04,
        6.3076406006940507e-03,  1.4826401731755254e-01,
        1.1664864119172460e-06,  1.2545831474466295e-04,
        7.2810868049713422e-03,  1.7606360772712945e-01,
        1.2506019929664025e-06,  1.3965358922235428e-04,
        8.3564918863242681e-03,  2.0774096738685077e-01,
        1.3358608483970353e-06,  1.5472105750204558e-04,
        9.5387173736793847e-03,  2.4363455829114344e-01,
        1.4221131167814057e-06,  1.7065506163338297e-04,
        1.0832401126435362e-02,  2.8408999414926217e-01,
        1.5092380784713784e-06,  1.8744796380204356e-04,
        1.2241944198050593e-02,  3.2945853996682334e-01,
        1.5971441467273827e-06,  2.0509056271548172e-04,
        1.3771501811747246e-02,  3.8009562588480911e-01,
        1.6857682732815246e-06,  2.2357249148367267e-04,
        1.5424978122260381e-02,  4.3635939212926961e-01,
        1.7750749047811704e-06,  2.4288259064919043e-04,
        1.7206024393567214e-02,  4.9860927945490602e-01,
        1.8650546212703244e-06,  2.6300925204182760e-04,
        1.9118040198593096e-02,  5.6720467700616439e-01,
        1.9557225823117735e-06,  2.8394073095549296e-04,
        2.1164177240260158e-02,  6.4250363714880909e-01,
        2.0471168892481036e-06,  3.0566542577571345e-04,
        2.3347345401048925e-02,  7.2486166460289037e-01,
        2.1392969539962309e-06,  3.2817212550732909e-04,
        2.5670220647414230e-02,  8.1463058517811959e-01,
        2.2323419405983423e-06,  3.5145022667395061e-04,
        2.8135254442687004e-02,  9.1215749760115994e-01,
        2.3263493392778078e-06,  3.7548992173985584e-04,
        3.0744684354418302e-02,  1.0177838103435364e+00,
        2.4214336866238569e-06,  4.0028236175589115e-04,
        3.3500545577256700e-02,  1.1318443640083697e+00,
        2.5177254691651621e-06,  4.2581979594479100e-04,
        3.6404683127684460e-02,  1.2546666387054934e+00,
        2.6153701856323310e-06,  4.5209569119237212e-04,
        3.9458764501096852e-02,  1.3865700449198566e+00,
        2.7145275896919561e-06,  4.7910483399359104e-04,
        4.2664292613265722e-02,  1.5278652956389143e+00,
        2.8153710676200543e-06,  5.0684341748527030e-04,
        4.6022618876732528e-02,  1.6788538569263620e+00,
        2.9180871634032234e-06,  5.3530911558382960e-04,
        4.9534956287618323e-02,  1.8398274736914504e+00,
        3.0228752116304562e-06,  5.6450114625749290e-04,
        5.3202392419701282e-02,  2.0110677670807493e+00,
        3.1299470734280463e-06,  5.9442032544862120e-04,
        5.7025902240970899e-02,  2.1928458996955151e+00,
        3.2395269549153133e-06,  6.2506911302701940e-04,
        6.1006360682930631e-02,  2.3854223046930656e+00,
        3.3518513114785682e-06,  6.5645165187410597e-04,
        6.5144554905687074e-02,  2.5890464747511532e+00,
        3.4671687938705290e-06,  6.8857380116359710e-04,
        6.9441196212804063e-02,  2.8039568068473186e+00,
        3.5857402929044324e-06,  7.2144316442114922e-04,
        7.3896931578507866e-02,  3.0303804988218266e+00,
        3.7078390104267586e-06,  7.5506911344582189e-04,
        7.8512354757938690e-02,  3.2685334937419110e+00,
        3.8337506165068857e-06,  7.8946280843220768e-04,
        8.3288016957977842e-02,  3.5186204681655266e+00,
        3.9637734599336103e-06,  8.2463721516370611e-04,
        8.8224437051906995e-02,  3.7808348605037803e+00,
        4.0982188475090874e-06,  8.6060711978827109e-04,
        9.3322111327024171e-02,  4.0553589358028610e+00,
        4.2374114012014003e-06,  8.9738914179007866e-04,
        9.8581522759035659e-02,  4.3423638834033405e+00,
        4.3816894895553531e-06,  9.3500174580694894e-04,
        1.0400314981179327e-01,  4.6420099440838136e+00,
        4.5314057357627952e-06,  9.7346525286017103e-04,
        1.0958747476522186e-01,  4.9544465634563908e+00,
        4.6869276182550755e-06,  1.0128018515386029e-03,
        1.1533499157788782e-01,  5.2798125685487971e+00,
        4.8486381775032531e-06,  1.0530356097677377e-03,
        1.2124621329416399e-01,  5.6182363646806905e+00,
        5.0169367572062919e-06,  1.0941924878559378e-03,
        1.2732167900956118e-01,  5.9698361499189483e+00,
        5.1922399470262709e-06,  1.1363003528429021e-03,
        1.3356196040939339e-01,  6.3347201445756696e+00,
        5.3749824928905025e-06,  1.1793889955503500e-03,
        1.3996766789931570e-01,  6.7129868333884755e+00,
        5.5656184304581939e-06,  1.2234901496919175e-03,
        1.4653945634749360e-01,  7.1047252182024181e+00,
        5.7646222571983738e-06,  1.2686375145050297e-03,
        1.5327803045938068e-01,  7.5100150791419544e+00,
        5.9724901687469618e-06,  1.3148667807580602e-03,
        1.6018414980844778e-01,  7.9289272424325077e+00,
        6.1897414871901653e-06,  1.3622156601763443e-03,
        1.6725863354455620e-01,  8.3615238531926614e+00,
        6.4169201412550124e-06,  1.4107239193085642e-03,
        1.7450236480310966e-01,  8.8078586516699122e+00,
        6.6545961262808612e-06,  1.4604334176626175e-03,
        1.8191629483882546e-01,  9.2679772515432006e+00,
        6.9033673474532881e-06,  1.5113881493765938e-03,
        1.8950144690399381e-01,  9.7419174190512212e+00,
        7.1638611539661217e-06,  1.5636342907745103e-03,
        1.9725891989379704e-01,  1.0229709351830682e+01,
        7.4367363900722387e-06,  1.6172202507591441e-03,
        2.0518989177781968e-01,  1.0731375956472952e+01,
        7.7226852118448531e-06,  1.6721967273171455e-03,
        2.1329562283596382e-01,  1.1246933123909001e+01,
        8.0224352359033366e-06,  1.7286167676250986e-03,
        2.2157745871736603e-01,  1.1776390001839108e+01,
        8.3367517684183851e-06,  1.7865358335038262e-03,
        2.3003683333749073e-01,  1.2319749263511039e+01,
        8.6664400797210418e-06,  1.8460118719954954e-03,
        2.3867527163083138e-01,  1.2877007372237802e+01,
        9.0123480442638290e-06,  1.9071053905752291e-03,
        2.4749439217333247e-01,  1.3448154841124120e+01,
        9.3753687784310450e-06,  1.9698795387345651e-03,
        2.5649590969014902e-01,  1.4033176487541906e+01,
        9.7564434423229865e-06,  2.0344001949647258e-03,
        2.6568163746448176e-01,  1.4632051681966448e+01,
        1.0156564536445990e-05,  2.1007360593256912e-03,
        2.7505348965976467e-01,  1.5244754590845528e+01,
        1.0576778804082441e-05,  2.1689587539541330e-03,
        2.8461348357167071e-01,  1.5871254413230240e+01,
        1.1018191092869842e-05,  2.2391429277119155e-03,
        2.9436374182131503e-01,  1.6511515610955509e+01,
        1.1481967574584155e-05,  2.3113663703153127e-03,
        3.0430649450283220e-01,  1.7165498132196475e+01,
        1.1969340003791309e-05,  2.3857101304152720e-03,
        3.1444408129632179e-01,  1.7833157628279068e+01,
        1.2481609377359816e-05,  2.4622586432521756e-03,
        3.2477895355568492e-01,  1.8514445663650090e+01,
        1.3020150486569926e-05,  2.5410998626277420e-03,
        3.3531367638001952e-01,  1.9209309918951508e+01,
        1.3586416349429886e-05,  2.6223254016243696e-03,
        3.4605093067390869e-01,  1.9917694387160715e+01,
        1.4181942695841317e-05,  2.7060306798223632e-03,
        3.5699351520502604e-01,  2.0639539562786492e+01,
        1.4808353521542550e-05,  2.7923150759369703e-03,
        3.6814434865899504e-01,  2.1374782624123913e+01,
        1.5467365650507020e-05,  2.8812820909226919e-03,
        3.7950647169836438e-01,  2.2123357608581294e+01,
        1.6160795224000983e-05,  2.9730395138610395e-03,
        3.9108304902563246e-01,  2.2885195581112683e+01,
        1.6890562829193834e-05,  3.0676996006243399e-03,
        4.0287737145361363e-01,  2.3660224795784789e+01,
        1.7658700313149776e-05,  3.1653792553527553e-03,
        4.1489285798500519e-01,  2.4448370850530740e+01,
        1.8467357800095221e-05,  3.2662002229410232e-03,
        4.2713305789824024e-01,  2.5249556835133212e+01,
        1.9318809894564093e-05,  3.3702892915912683e-03,
        4.3960165284926472e-01,  2.6063703472496300e+01,
        2.0215464914654628e-05,  3.4777784987849035e-03,
        4.5230245898262600e-01,  2.6890729253274632e+01,
        2.1159871258995690e-05,  3.5888053556428598e-03,
        4.6523942905962623e-01,  2.7730550563918754e+01,
        2.2154728036362870e-05,  3.7035130712376957e-03,
        4.7841665460289939e-01,  2.8583081808226389e+01,
        2.3202892634299222e-05,  3.8220507980816472e-03,
        4.9183836806023684e-01,  2.9448235522468245e+01,
        2.4307392464621849e-05,  3.9445738793297894e-03,
        5.0550894499175869e-01,  3.0325922484190212e+01,
        2.5471433913975582e-05,  4.0712441175649412e-03,
        5.1943290628317151e-01,  3.1216051814778197e+01,
        2.6698414790002266e-05,  4.2022300472504305e-03,
        5.3361492038921066e-01,  3.2118531075899433e+01,
        2.7991936929962254e-05,  4.3377072263204039e-03,
        5.4805980560504530e-01,  3.3033266359918976e+01,
        2.9355817236668955e-05,  4.4778585441453732e-03,
        5.6277253238288560e-01,  3.3960162374411162e+01,
        3.0794104157339075e-05,  4.6228745345883223e-03,
        5.7775822568438451e-01,  3.4899122520897464e+01,
        3.2311090580415533e-05,  4.7729537179487004e-03,
        5.9302216737844371e-01,  3.5850048967922390e+01,
        3.3911330761142177e-05,  4.9283029497903018e-03,
        6.0856979869389061e-01,  3.6812842718615379e+01,
        3.5599657336494456e-05,  5.0891377925884147e-03,
        6.2440672272369224e-01,  3.7787403672872372e+01,
        3.7381198903351058e-05,  5.2556829060019690e-03,
        6.4053870699356363e-01,  3.8773630684302198e+01,
        3.9261401365520676e-05,  5.4281724539216834e-03,
        6.5697168609483714e-01,  3.9771421612091302e+01,
        4.1246045912037143e-05,  5.6068505409570743e-03,
        6.7371176439517133e-01,  4.0780673367936878e+01,
        4.3341275637292332e-05,  5.7919716575340714e-03,
        6.9076521882443420e-01,  4.1801281958218844e+01,
        4.5553616491954074e-05,  5.9838011676242994e-03,
        7.0813850174983850e-01,  4.2833142521559552e+01,
        4.7890004127722846e-05,  6.1826158071358241e-03,
        7.2583824395298369e-01,  4.3876149361960415e+01,
        5.0357813669518623e-05,  6.3887042134583103e-03,
        7.4387125770054674e-01,  4.4930195977680754e+01,
        5.2964887978711757e-05,  6.6023674918008670e-03,
        7.6224453993466346e-01,  4.5995175086033896e+01,
        5.5719568777712936e-05,  6.8239198044530592e-03,
        7.8096527559148177e-01,  4.7070978644298457e+01,
        5.8630738395204429e-05,  7.0536889880744302e-03,
        8.0004084103966577e-01,  4.8157497866925908e+01,
        6.1707845097351186e-05,  7.2920172347607443e-03,
        8.1947880768280923e-01,  4.9254623239230853e+01,
        6.4960958807200385e-05,  7.5392617603165834e-03,
        8.3928694570662987e-01,  5.0362244527788867e+01,
        6.8400799117971064e-05,  7.7957955750648728e-03,
        8.5947322800025860e-01,  5.1480250787703824e+01,
        7.2038798952637776e-05,  8.0620082345079242e-03,
        8.8004583426375227e-01,  5.2608530366989527e+01,
        7.5887135873216772e-05,  8.3383067016998998e-03,
        9.0101315531954274e-01,  5.3746970908242389e+01,
        7.9958807709798821e-05,  8.6251161825023244e-03,
        9.2238379762961631e-01,  5.4895459347853304e+01,
        8.4267675418535240e-05,  8.9228810936407121e-03,
        9.4416658804064635e-01,  5.6053881912922179e+01,
        8.8828533796248940e-05,  9.2320660238731731e-03,
        9.6637057879593979e-01,  5.7222124116141799e+01,
        9.3657181907757711e-05,  9.5531567810104214e-03,
        9.8900505278620798e-01,  5.8400070748839426e+01,
        9.8770493311899093e-05,  9.8866615072148046e-03,
        1.0120795290965825e+00,  5.9587605872391450e+01,
        1.0418649636321181e-04,  1.0233111846128014e-02,
        1.0356037688547204e+00,  6.0784612808243352e+01,
        1.0992447067794794e-04,  1.0593064181661437e-02,
        1.0595877813806889e+00,  6.1990974126734912e+01,
        1.1600502292898648e-04,  1.0967100986027298e-02,
        1.0840418306965067e+00,  6.3206571634938918e+01,
        1.2245020808861396e-04,  1.1355832186047913e-02,
        1.1089764423793134e+00,  6.4431286363748697e+01,
        1.2928362825544103e-04,  1.1759896683376073e-02,
        1.1344024107839841e+00,  6.5664998554378784e+01,
        1.3653054680572808e-04,  1.2179963928326019e-02,
        1.1603308066873073e+00,  6.6907587644510215e+01,
        1.4421804231014906e-04,  1.2616735576828868e-02,
        1.1867729853149442e+00,  6.8158932254263121e+01,
        1.5237510180002618e-04,  1.3070947332611171e-02,
        1.2137405948441742e+00,  6.9418910172166818e+01,
        1.6103284070579269e-04,  1.3543370752811033e-02,
        1.2412455853307556e+00,  7.0687398341350018e+01,
        1.7022457812798550e-04,  1.4034815389022983e-02,
        1.2693002181548583e+00,  7.1964272846057270e+01,
        1.7998612174366713e-04,  1.4546130778944942e-02,
        1.2979170759453520e+00,  7.3249408898747063e+01,
        1.9035584598834618e-04,  1.5078208901511262e-02,
        1.3271090730592270e+00,  7.4542680827821087e+01,
        2.0137501385332962e-04,  1.5631986428699396e-02,
        1.3568894666183027e+00,  7.5843962066259124e+01,
        2.1308791480438699e-04,  1.6208447466486559e-02,
        1.3872718681149105e+00,  7.7153125141179714e+01,
        2.2554218614932297e-04,  1.6808626195442950e-02,
        1.4182702556779394e+00,  7.8470041664570559e+01,
        2.3878902633579685e-04,  1.7433609901044960e-02,
        1.4498989869721415e+00,  7.9794582325253273e+01,
        2.5288354028598601e-04,  1.8084542032431688e-02,
        1.4821728128059679e+00,  8.1126616882266674e+01,
        2.6788504101205827e-04,  1.8762625608904061e-02,
        1.5151068914585113e+00,  8.2466014159746280e+01,
        2.8385739902874108e-04,  1.9469126791052171e-02,
        1.5487168038348842e+00,  8.3812642043469651e+01,
        3.0086945196501836e-04,  2.0205378687286672e-02,
        1.5830185694285646e+00,  8.5166367479190214e+01,
        3.1899541956467270e-04,  2.0972785486507432e-02,
        1.6180286631863110e+00,  8.6527056472870996e+01,
        3.3831536683867120e-04,  2.1772826855261586e-02,
        1.6537640333607375e+00,  8.7894574092979639e+01,
        3.5891572180165476e-04,  2.2607062645347141e-02,
        1.6902421203869042e+00,  8.9268784474984727e+01,
        3.8088984594172892e-04,  2.3477137962982772e-02,
        1.7274808768661714e+00,  9.0649550828198386e+01,
        4.0433864704404092e-04,  2.4384788634653393e-02,
        1.7654987887696001e+00,  9.2036735445122915e+01,
        4.2937125670382281e-04,  2.5331847069899407e-02,
        1.8043148979561727e+00,  9.3430199713488008e+01,
        4.5610578930919835e-04,  2.6320248565812419e-02,
        1.8439488260903862e+00,  9.4829804131164110e+01,
        4.8467017892414718e-04,  2.7352038123240521e-02,
        1.8844208000834837e+00,  9.6235408324134752e+01,
        5.1520307437421945e-04,  2.8429377820235378e-02,
        1.9257516792143465e+00,  9.7646871067751221e+01,
        5.4785485983158794e-04,  2.9554554730501174e-02,
        1.9679629840490322e+00,  9.9064050311506676e+01,
        5.8278879916055933e-04,  3.0729989510634631e-02,
        2.0110769272975597e+00,  1.0048680320756051e+02,
        6.2018219118149527e-04,  3.1958245750384230e-02,
        2.0551164468336749e+00,  1.0191498614327962e+02,
        6.6022788565767620e-04,  3.3242039922795723e-02,
        2.1001052409747096e+00,  1.0334845477808706e+02,
        7.0313558079975976e-04,  3.4584252489102560e-02,
        2.1460678063144734e+00,  1.0478706408487375e+02,
        7.4913382012036238e-04,  3.5987939473893886e-02,
        2.1930294782174862e+00,  1.0623066839634234e+02,
        7.9847145763138800e-04,  3.7456345693506796e-02,
        2.2410164743269494e+00,  1.0767912145651954e+02,
        8.5142020373077984e-04,  3.8992918286952637e-02,
        2.2900559412144501e+00,  1.0913227647788977e+02,
        9.0827644557439115e-04,  4.0601322392854036e-02,
        2.3401760045136051e+00,  1.1058998620435982e+02,
        9.6936429204429848e-04,  4.2285457214504621e-02,
        2.3914058228034016e+00,  1.1205210298055013e+02,
        1.0350379848527240e-03,  4.4049474459990599e-02,
        2.4437756455185315e+00,  1.1351847882764609e+02,
        1.1056854915064845e-03,  4.5897797548352617e-02,
        2.4973168752515775e+00,  1.1498896552628932e+02,
        1.1817316914363872e-03,  4.7835143327977253e-02,
        2.5520621347349350e+00,  1.1646341470677075e+02,
        1.2636426061708931e-03,  4.9866545067203123e-02,
        2.6080453389228806e+00,  1.1794167794697111e+02,
        1.3519294958825522e-03,  5.1997378045637310e-02,
        2.6653017724591384e+00,  1.1942360687831928e+02,
        1.4471542632060487e-03,  5.4233386915594421e-02,
        2.7238681729109486e+00,  1.2090905330012316e+02,
        1.5499340039203911e-03,  5.6580716403502561e-02,
        2.7837828203469472e+00,  1.2239786930251412e+02,
        1.6609482610775675e-03,  5.9045943228381859e-02,
        2.8450856333001475e+00,  1.2388990739835450e+02,
        1.7809445145515411e-03,  6.1636112888834277e-02,
        2.9078182717654752e+00,  1.2538502066408280e+02,
        1.9107467386398431e-03,  6.4358777592781219e-02,
        2.9720242475627163e+00,  1.2688306288982781e+02,
        2.0512628354072641e-03,  6.7222039276755532e-02,
        3.0377490422498683e+00,  1.2838388873860436e+02,
        2.2034945678360489e-03,  7.0234594903082939e-02,
        3.1050402330756688e+00,  1.2988735391461347e+02,
        2.3685471168109575e-03,  7.3405786736625317e-02,
        3.1739476270960840e+00,  1.3139331534029165e+02,
        2.5476408205181598e-03,  7.6745655793291040e-02,
        3.2445234037200485e+00,  1.3290163134177831e+02,
        2.7421235415069911e-03,  8.0265000336596948e-02,
        3.3168222656632853e+00,  1.3441216184210487e+02,
        2.9534840840437990e-03,  8.3975438832802826e-02,
        3.3909015985722695e+00,  1.3592476856132436e+02,
        3.1833676136300317e-03,  8.7889477298306359e-02,
        3.4668216389344346e+00,  1.3743931522251700e+02,
        3.4335925028658020e-03,  9.2020582095833164e-02,
        3.5446456500335874e+00,  1.3895566776223856e+02,
        3.7061680564009804e-03,  9.6383258219712400e-02,
        3.6244401058507072e+00,  1.4047369454376985e+02,
        4.0033146847991653e-03,  1.0099313227316897e-01,
        3.7062748821348852e+00,  1.4199326657126284e+02,
        4.3274867823089400e-03,  1.0586704120837485e-01,
        3.7902234536941846e+00,  1.4351425770235863e+02,
        4.6813952192434546e-03,  1.1102312788143717e-01,
        3.8763630975274372e+00,  1.4503654485660763e+02,
        5.0680359511489593e-03,  1.1648094052808122e-01,
        3.9647751003297409e+00,  1.4656000821680158e+02,
        5.4907161976821689e-03,  1.2226154090799900e-01,
        4.0555449693805441e+00,  1.4808453141975420e+02,
        5.9530906837602180e-03,  1.2838761541573779e-01,
        4.1487626451603488e+00,  1.4961000173304717e+02,
        6.4591912821440290e-03,  1.3488359769981989e-01,
        4.2445227148538205e+00,  1.5113631021370725e+02,
        7.0134721980974280e-03,  1.4177579202441912e-01,
        4.3429246247533326e+00,  1.5266335184506622e+02,
        7.6208470048941346e-03,  1.4909251104976706e-01,
        4.4440728903991094e+00,  1.5419102564736605e+02,
        8.2867409987207284e-03,  1.5686421518525559e-01,
        4.5480773032523159e+00,  1.5571923475833256e+02,
        9.0171423028167670e-03,  1.6512366567844908e-01,
        4.6550531321423296e+00,  1.5724788647943751e+02,
        9.8186613166244378e-03,  1.7390608525909240e-01,
        4.7651213194189248e+00,  1.5877689228425339e+02,
        1.0698597267860281e-02,  1.8324932982438957e-01,
        4.8784086703566727e+00,  1.6030616778548193e+02,
        1.1665013522576104e-02,  1.9319407253229731e-01,
        4.9950480355243805e+00,  1.6183563265762186e+02,
        1.2726817414140515e-02,  2.0378400246870193e-01,
        5.1151784863641199e+00,  1.6336521051288364e+02,
        1.3893861040829739e-02,  2.1506603540410038e-01,
        5.2389454834720928e+00,  1.6489482872858568e+02,
        1.5177030594199416e-02,  2.2709054819566385e-01,
        5.3665010391173613e+00,  1.6642441822479577e+02,
        1.6588389004960267e-02,  2.3991161844218392e-01,
        5.4980038726607203e+00,  1.6795391319197657e+02,
        1.8141271778140258e-02,  2.5358730666763318e-01,
        5.6336195621927665e+00,  1.6948325076837065e+02,
        1.9850473314102158e-02,  2.6817993082329467e-01,
        5.7735206908926928e+00,  1.7101237066872491e+02,
        2.1732373343398018e-02,  2.8375639796973223e-01,
        5.9178869898104267e+00,  1.7254121476481038e+02,
        2.3805144163821727e-02,  3.0038853118850967e-01,
        6.0669054783006704e+00,  1.7406972662051589e+02,
        2.6088954375418708e-02,  3.1815344388878009e-01,
        6.2207705996806286e+00,  1.7559785098296851e+02,
        2.8606165273597436e-02,  3.3713394245384537e-01,
        6.3796843570407153e+00,  1.7712553323256870e+02,
        3.1381647330894769e-02,  3.5741893712712153e-01,
        6.5438564428815420e+00,  1.7865271879477217e+02,
        3.4442979249362515e-02,  3.7910393119652702e-01,
        6.7135043675975865e+00,  1.8017935251563256e+02,
        3.7820861344312520e-02,  4.0229148477078885e-01,
        6.8888535821089327e+00,  1.8170537800503521e+02,
        4.1549378164290399e-02,  4.2709178320188290e-01,
        7.0701375951143994e+00,  1.8323073694907561e+02,
        4.5666479873238866e-02,  4.5362318234032017e-01,
        7.2575980843789836e+00,  1.8475536839561454e+02,
        5.0214350810385888e-02,  4.8201285271920619e-01,
        7.4514849988340943e+00,  1.8627920801470714e+02,
        5.5240026570395770e-02,  5.1239742009816303e-01,
        7.6520566511546182e+00,  1.8780218733738346e+02,
        6.0795785546280387e-02,  5.4492372810578349e-01,
        7.8595798033848627e+00,  1.8932423297505017e+02,
        6.6940064111073394e-02,  5.7974955127431937e-01,
        8.0743297371074974e+00,  1.9084526582359828e+02,
        7.3737843540727960e-02,  6.1704453231269996e-01,
        8.2965903182554754e+00,  1.9236520025377027e+02,
        8.1261914808786223e-02,  6.5699099307694375e-01,
        8.5266540489145140e+00,  1.9388394329387853e+02,
        8.9593359177153761e-02,  6.9978507010190494e-01,
        8.7648221152626444e+00,  1.9540139380635074e+02,
        9.8823190675288247e-02,  7.4563768551025544e-01,
        9.0114044301584144e+00,  1.9691744166592301e+02,
        1.0905310392539901e-01,  7.9477591850895535e-01,
        9.2667196791110502e+00,  1.9843196694198335e+02,
        1.2039742757435344e-01,  8.4744423544296654e-01,
        9.5310953775254728e+00,  1.9994483909469980e+02,
        1.3298450805054765e-01,  9.0390611771144835e-01,
        9.8048679418370988e+00,  2.0145591618944911e+02,
        1.4695908391903434e-01,  9.6444570620749437e-01,
        1.0088382796923300e+01,  2.0296504413991829e+02,
        1.6248417324307807e-01,  1.0293698339809563e+00,
        1.0381994532099393e+01,  2.0447205598841478e+02,
        1.7974455670057249e-01,  1.0990101006887174e+00,
        1.0686067114159409e+01,  2.0597677123503738e+02,
        1.9894943264370593e-01,  1.1737255640852977e+00,
        1.1000974190231505e+01,  2.0747899522504076e+02,
        2.2033686294315741e-01,  1.2539055144228191e+00,
        1.1327099505470416e+01,  2.0897851860965460e+02,
        2.4417792670743516e-01,  1.3399729097340041e+00,
        1.1664837453233588e+01,  2.1047511689165108e+02,
        2.7078278340406842e-01,  1.4323881217116379e+00,
        1.2014593791237509e+01,  2.1196855007023046e+02,
        3.0050680654011297e-01,  1.5316534946990437e+00,
        1.2376786558079777e+01,  2.1345856239770180e+02,
        3.3375823864557524e-01,  1.6383184313021963e+00,
        1.2751847230208718e+01,  2.1494488226305288e+02,
        3.7100793255943232e-01,  1.7529852395151269e+00,
        1.3140222130147382e+01,  2.1642722221407470e+02,
        4.1279919484732425e-01,  1.8763160734498010e+00,
        1.3542374140249311e+01,  2.1790527912833110e+02,
        4.5976189935601153e-01,  2.0090405375438447e+00,
        1.3958784734427784e+01,  2.1937873454324708e+02,
        5.1262525488522503e-01,  2.1519648564722775e+00,
        1.4389956363938452e+01,  2.2084725514963230e+02,
        5.7223967642484419e-01,  2.3059815575708766e+00,
        1.4836415184699469e+01,  2.2231049345261366e+02,
        6.3959009000549372e-01,  2.4720818045731452e+00,
        1.5298714192930639e+01,  2.2376808859541720e+02,
        7.1583074599469843e-01,  2.6513669884890696e+00,
        1.5777436671333639e+01,  2.2521966734447943e+02,
        8.0230226033872099e-01,  2.8450649986699901e+00,
        1.6273200018076409e+01,  2.2666484521447643e+02,
        9.0057436998823548e-01,  3.0545449638344833e+00,
        1.6786659907415320e+01,  2.2810322772803539e+02,
        1.0124795545744052e+00,  3.2813365086074762e+00,
        1.7318514686069104e+01,  2.2953441177704477e+02,
        1.1401597713027283e+00,  3.5271495457401576e+00,
        1.7869510054398631e+01,  2.3095798706460457e+02,
        1.2861263878326408e+00,  3.7938965727264526e+00,
        1.8440443864344225e+01,  2.3237353759348315e+02,
        1.4533093587604164e+00,  4.0837188015761452e+00,
        1.9032171102403034e+01,  2.3378064316642087e+02,
        1.6451533987630600e+00,  4.3990116631200937e+00,
        1.9645608827779238e+01,  2.3517888086615537e+02,
        1.8656871756919655e+00,  4.7424581369097272e+00,
        2.0281741111944573e+01,  2.3656782646823970e+02,
        2.1196383879143688e+00,  5.1170610606343505e+00,
        2.0941623927249495e+01,  2.3794705576220224e+02,
        2.4125581794183613e+00,  5.5261814808181970e+00,
        2.1626389763647150e+01,  2.3931614573851246e+02,
        2.7509681456960591e+00,  5.9735811450556735e+00,
        2.2337252059324257e+01,  2.4067467561095205e+02,
        3.1425263461129709e+00,  6.4634695440259602e+00,
        2.3075509347583910e+01,  2.4202222764987411e+02,
        3.5962600659310211e+00,  7.0005546160120158e+00,
        2.3842548940230859e+01,  2.4335838780243614e+02,
        4.1227735324204060e+00,  7.5901036500793753e+00,
        2.4639850241163970e+01,  2.4468274607890183e+02,
        4.7345717289570759e+00,  8.2380039086105601e+00,
        2.5468987463043746e+01,  2.4599489669960076e+02,
        5.4464043398034017e+00,  8.9508357163304542e+00,
        2.6331631599542636e+01,  2.4729443798398825e+02,
        6.2756573421227166e+00,  9.7359524100605483e+00,
        2.7229551792687221e+01,  2.4858097198479999e+02,
        7.2428038110223927e+00,  1.0601565566961138e+01,
        2.8164615759158696e+01,  2.4985410387237212e+02,
        8.3721014230520918e+00,  1.1556834572970427e+01,
        2.9138788810955184e+01,  2.5111344106608453e+02,
        9.6920563412247169e+00,  1.2611982052973488e+01,
        3.0154131899820584e+01,  2.5235859211639973e+02,
        1.1236405630906901e+01,  1.3778390483339903e+01,
        3.1212797949731645e+01,  2.5358916536896103e+02,
        1.3044907918178749e+01,  1.5068732944840244e+01,
        3.2317026160371057e+01,  2.5480476740227718e+02,
        1.5164394660276130e+01,  1.6497095125454521e+01,
        3.3469134331574530e+01,  2.5600500127316127e+02,
        1.7650163499430267e+01,  1.8079102887170691e+01,
        3.4671508156402240e+01,  2.5718946458361557e+02,
        2.0567272013916622e+01,  1.9832070924350017e+01,
        3.5926587671589338e+01,  2.5835774738965478e+02,
        2.3991974513773037e+01,  2.1775137741683761e+01,
        3.7236850346290325e+01,  2.5950942999766295e+02,
        2.8014174685108411e+01,  2.3929381251165246e+01,
        3.8604789214594447e+01,  2.6064408067167369e+02,
        3.2738935575237839e+01,  2.6317982653697680e+01,
        4.0032886778842816e+01,  2.6176125327811650e+02,
        3.8288447338754935e+01,  2.8966320506113000e+01,
        4.1523583916976584e+01,  2.6286048494784035e+02,
        4.4806775636012794e+01,  3.1902018867446813e+01,
        4.3079241010921855e+01,  2.6394129378241064e+02,
        5.2458296783123572e+01,  3.5155132475608951e+01,
        4.4702094760622956e+01,  2.6500317665863736e+02,
        6.1435769727089827e+01,  3.8757955603731190e+01,
        4.6394205761380825e+01,  2.6604560726384057e+02,
        7.1959593688365473e+01,  4.2745156175914566e+01,
        4.8157398199955615e+01,  2.6706803434490860e+02,
        8.4280089048190760e+01,  4.7153554239366485e+01,
        4.9993193728104309e+01,  2.6806988036253671e+02,
        9.8685619821073615e+01,  5.2021785161851689e+01,
        5.1902733136022789e+01,  2.6905054060655380e+02,
        1.1549705343627782e+02,  5.7390165261509246e+01,
        5.3886693036098777e+01,  2.7000938286605458e+02,
        1.3507187939261132e+02,  6.3299951252027007e+01,
        5.5945195074448101e+01,  2.7094574786376324e+02,
        1.5781145240478469e+02,  6.9792621839009044e+01,
        5.8077704664996197e+01,  2.7185895050511300e+02,
        1.8414298626123687e+02,  7.6909295716947270e+01,
        6.0282930560844250e+01,  2.7274828210122291e+02,
        2.1453538547657735e+02,  8.4689146945271517e+01,
        6.2558719732738048e+01,  2.7361301377334769e+02,
        2.4946922222446142e+02,  9.3168510800646459e+01,
        6.4901953680122773e+01,  2.7445240107774276e+02,
        2.8946466414184164e+02,  1.0237876458185066e+02,
        6.7308449648424983e+01,  2.7526569003813069e+02,
        3.3500551175254446e+02,  1.1234547707335120e+02,
        6.9772878007210409e+01,  2.7605212463046223e+02,
        3.8659822774497678e+02,  1.2308509320476759e+02,
        7.2288691291557541e+01,  2.7681095586788234e+02,
        4.4469334036333163e+02,  1.3460424750051823e+02,
        7.4848078154476113e+01,  2.7754145234114873e+02,
        5.0965625761450605e+02,  1.4689705195047563e+02,
        7.7441955861853373e+01,  2.7824291231259485e+02,
        5.8182358327343820e+02,  1.5994259827418429e+02,
        8.0059988971525627e+01,  2.7891467714188127e+02,
        6.6132864080215211e+02,  1.7370492308959933e+02,
        8.2690663569387937e+01,  2.7955614580002850e+02,
        7.4820923280654506e+02,  1.8812962650745740e+02,
        8.5321406058700148e+01,  2.8016679025579458e+02,
        8.4231549370979542e+02,  2.0314457148066248e+02,
        8.7938749040062135e+01,  2.8074617119286933e+02,
        9.4329371462529696e+02,  2.1865960659771270e+02,
        9.0528557207457396e+01,  2.8129395364325131e+02,
        1.0505041191922737e+03,  2.3456731334032767e+02,
        9.3076297046577423e+01,  2.8180992195788866e+02,
        1.1633212864765801e+03,  2.5074364717169865e+02,
        9.5567339828114982e+01,  2.8229399347431087e+02,
        1.2803343156908441e+03,  2.6705425790198944e+02,
        9.7987307600501225e+01,  2.8274623025811144e+02,
        1.4013753240169206e+03,  2.8334981008456253e+02,
        1.0032241078447801e+02,  2.8316684837291388e+02,
        1.5231430635975778e+03,  2.9948874002299476e+02,
        1.0255982959355332e+02,  2.8355622407087998e+02,
        1.6468950521387328e+03,  3.1530626050622152e+02,
        1.0468800186799905e+02,  2.8391489667441692e+02,
        1.7684879532146583e+03,  3.3067141848269239e+02,
        1.0669694369948706e+02,  2.8424356752076403e+02,
        1.8873673263776384e+03,  3.4543608992777769e+02,
        1.0857849552743156e+02,  2.8454309542192635e+02,
        2.0056608867019079e+03,  3.5947629310480499e+02,
        1.1032645293198838e+02,  2.8481448818618452e+02,
        2.1123412243495541e+03,  3.7270952978793002e+02,
        1.1193675976478534e+02,  2.8505889086153394e+02,
        2.2187963678640108e+03,  3.8500920655017393e+02,
        1.1340743369855697e+02,  2.8527757103437409e+02,
        2.3162963127944472e+03,  3.9634909788492700e+02,
        1.1473856355408046e+02,  2.8547190145533114e+02,
        2.4068401105434536e+03,  4.0667846687304012e+02,
        1.1593224618414773e+02,  2.8564334116768595e+02,
        2.4784144297325265e+03,  4.1598304272221395e+02,
        1.1699235211319262e+02,  2.8579341535242162e+02,
        2.5562755664781621e+03,  4.2422997978597914e+02,
        1.1792428986520527e+02,  2.8592369472194912e+02,
        2.6447059574238892e+03,  4.3149387301657572e+02,
        1.1873482933169944e+02,  2.8603577509499075e+02,
        2.6246562381316198e+03,  4.3785560545977330e+02,
        1.1943189091694524e+02,  2.8613125780387321e+02,
        2.7987780007162314e+03,  4.4314800179197573e+02,
        1.2002404722702677e+02,  2.8621173116484891e+02,
        2.6387276002735557e+03,  4.4782691198327359e+02,
        1.2052054862910146e+02,  2.8627875342088527e+02,
        3.0062637585449193e+03,  4.5143888203738925e+02,
        1.2093086269083051e+02,  2.8633383762654535e+02,
        2.7539023192823720e+03,  4.5476052689856613e+02,
        1.2126461834809433e+02,  2.8637843817199985e+02,
        2.5910811892001989e+03,  4.5717655713819238e+02,
        1.2153130265226612e+02,  2.8641393941412156e+02,
        2.1342330194425313e+03,  4.5894717246332266e+02,
        1.2173998036852520e+02,  2.8644164597060376e+02,
        1.0890899402073939e+04,  4.6005768352863078e+02,
        1.2189937643774012e+02,  2.8646277488265133e+02,
       -4.0068543717291534e+04,  4.6425687240934190e+02,
        1.2201817199546555e+02,  2.8647844936253915e+02,
        2.0386335433433356e+05,  4.5318324340088083e+02,
        1.2210268876380691e+02,  2.8648969387573402e+02,
       -1.0525392227053298e+06,  4.9192491506221211e+02,
        1.2216255741140930e+02,  2.8649743044050643e+02,
        6.7560415923934514e+06,  3.6152717819366103e+02,
        1.2219780177383166e+02,  2.8650247605958202e+02,
       -5.2357260507584877e+07,  8.6978529393560120e+02,
        1.2222867905349392e+02,  2.8650554071367861e+02,
        5.1400080950604057e+08, -1.2962861125471854e+03,
        1.2222279746725947e+02,  2.8650722631536939e+02,
       -7.1548998868695621e+09,  8.7886078010146957e+03,
        1.2227179821330049e+02,  2.8650802575650283e+02,
        2.1009259269275687e+11, -4.3353240100128067e+04,
        1.2218783413140866e+02,  2.8650832272731168e+02,
        2.1009259267756256e+11,  3.0996939391717798e+05,
        1.2233729445670215e+02,  2.8650839124704885e+02]


@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cdef double pow_fd(double x, int y) noexcept:
  ''' Exponentiation of type double ** int.
    Input x expected to be strictly positive.'''
  cdef double out = 1.0
  if y < 0:
    x = 1.0 / x
    y = -y
  elif y == 0:
    return 1.0
  while y > 1:
    if y % 2:
      out *= x    # Apply x^(2^i)
    x *= x        # x^(2^i) -> x^(2^(i+1))
    y //= 2       # Bit shift
  return out * x

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
def _dummy(DTYPE_t d, DTYPE_t t):
  ''' Dummy function that returns d (for profiling). '''
  return d

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef DTYPE_t phi0(DTYPE_t d, DTYPE_t t) noexcept:
  ''' Ideal gas part phi0 of dimless Helmholtz function. '''
  cdef DTYPE_t out = log(d) + n_ideal[0] + n_ideal[1] * t + n_ideal[2] * log(t)
  cdef unsigned short i
  for i in range(3,8):
    out += n_ideal[i] * log(1.0 - exp(-g_ideal[i] * t))
  return out

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef DTYPE_t phi0_d(DTYPE_t d, DTYPE_t t) noexcept:
  ''' Ideal gas part phi0 of d/dd dimless Helmholtz function. '''
  return 1.0/d

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef DTYPE_t phi0_dd(DTYPE_t d, DTYPE_t t) noexcept:
  ''' Ideal gas part phi0 of d2/dd2 dimless Helmholtz function. '''
  return -1.0/(d*d)

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef DTYPE_t phi0_t(DTYPE_t d, DTYPE_t t) noexcept:
  ''' Ideal gas part phi0 of d/dt dimless Helmholtz function. '''
  cdef DTYPE_t out = n_ideal[1] + n_ideal[2] / t
  cdef unsigned short i
  for i in range(3,8):
    out += n_ideal[i] * g_ideal[i] * (1.0 / (1.0 - exp(-g_ideal[i] * t)) - 1.0)
  return out

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef DTYPE_t phi0_tt(DTYPE_t d, DTYPE_t t) noexcept:
  ''' Ideal gas part phi0 of d2/dt2 dimless Helmholtz function. '''
  cdef DTYPE_t out = -n_ideal[2] / (t * t)
  cdef DTYPE_t _temp
  cdef unsigned short i
  for i in range(3,8):
    _exp_result = exp(-g_ideal[i] * t)
    out += -n_ideal[i] * g_ideal[i] * g_ideal[i] \
      * _exp_result/((1.0 - _exp_result)*(1.0 - _exp_result))
  return out

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef DTYPE_t phi0_dt(DTYPE_t d, DTYPE_t t) noexcept:
  ''' Ideal gas part phi0 of d2/(dd dt) dimless Helmholtz function. '''
  return 0.0

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef DTYPE_t phir(DTYPE_t d, DTYPE_t t):
  ''' Residual part of dimless Helmholtz function
      phi = f/(RT).
  Cython implementation for float input. '''
  cdef DTYPE_t d_quad = (d - 1.0) * (d - 1.0)
  cdef DTYPE_t out = 0.0

  # Use strides as below
  # cdef n_coeff ndtc1_51[4*i]
  # cdef d_coeff ndtc1_51[4*i+1]
  # cdef t_coeff ndtc1_51[4*i+2]
  # cdef c_coeff ndtc1_51[4*i+3]

  # Compute uniform coefficients with mixed data (1-indices 1 to 51)
  cdef unsigned short i
  for i in range(7):
    out += ndtc1_51[4*i] \
      * (d ** (ndtc1_51[4*i+1])) * (t ** ndtc1_51[4*i+2])
  for i in range(7, 51):
    out += ndtc1_51[4*i] \
      * (d ** (ndtc1_51[4*i+1])) * (t ** ndtc1_51[4*i+2]) \
      * exp(-d ** ndtc1_51[4*i+3])

  # Declare temporary registers
  cdef DTYPE_t _theta
  cdef DTYPE_t _Delta
  cdef DTYPE_t _d_shift
  cdef DTYPE_t _t_shift
  # Compute heterogeneous coefficients for 1-indices 52 to 54
  for i in range(51,54):
    _d_shift = d - eps_res52_54[i-51]
    _t_shift = t - gamma_res52_54[i-51]
    out += n_res[i] * (d ** (d_res[i])) * (t ** t_res[i]) \
      * exp(-alpha_res52_54[i-51] * _d_shift * _d_shift \
      -beta_res52_54[i-51] * _t_shift * _t_shift)
  # Compute heterogeneous coefficients for 1-indices 55 to 56
  for i in range(54,56):
    _theta = (1.0 - t) + A_res55_56[i-54] * d_quad ** _exp1_55_56[i-54]
    _Delta = _theta*_theta + B_res55_56[i-54] * d_quad ** a_res55_56[i-54]
    out += n_res[i] * (d ** (d_res[i])) * (t ** t_res[i]) \
      * _Delta ** b_res55_56[i-54] * exp(-C_res55_56[i-54] * d_quad \
      - D_res55_56[i-54]*(t - 1.0)*(t - 1.0))

  return out

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef DTYPE_t phir_d(DTYPE_t d, DTYPE_t t):
  ''' First delta-derivative of residual part of dimless Helmholtz function
      phi = f/(RT).
  See also phir for more details.
  Cython implementation for float input. '''
  cdef DTYPE_t d_quad = (d - 1.0) * (d - 1.0)
  cdef DTYPE_t _theta
  cdef DTYPE_t _Delta
  cdef DTYPE_t _neg_dpowc
  cdef DTYPE_t out = 0.0

  # Use strides as below
  # cdef n_coeff ndtc1_51[4*i]
  # cdef d_coeff ndtc1_51[4*i+1]
  # cdef t_coeff ndtc1_51[4*i+2]
  # cdef c_coeff ndtc1_51[4*i+3]

  # Compute uniform coefficients with mixed data (1-indices 1 to 51)
  cdef unsigned short i
  for i in range(7):
    # out += n_coeff * d_coeff * (d ** (d_coeff-1.0)) * (t ** t_coeff)
    out += ndtc1_51[4*i] \
      * ndtc1_51[4*i+1] \
      * (d ** (ndtc1_51[4*i+1]-1.0)) * (t ** ndtc1_51[4*i+2])
  for i in range(7, 51):
    _neg_dpowc = -d ** ndtc1_51[4*i+3]
    out += ndtc1_51[4*i] \
      * (ndtc1_51[4*i+1] + ndtc1_51[4*i+3] * _neg_dpowc) \
      * (d ** (ndtc1_51[4*i+1]-1.0)) * (t ** ndtc1_51[4*i+2]) \
      * exp(_neg_dpowc)

  # Compute pre-exponential coefficients
  cdef DTYPE_t _d_shift
  cdef DTYPE_t _t_shift
  cdef DTYPE_t _coeff  
  # Compute heterogeneous coefficients for 1-indices 52 to 54
  for i in range(51,54):
    _coeff = n_res[i] * (d ** (d_res[i]-1.0)) * (t ** t_res[i]) \
      * (d_res[i] - 2.0 * alpha_res52_54[i-51] * d * (d - eps_res52_54[i-51]))
    _d_shift = d - eps_res52_54[i-51]
    _t_shift = t - gamma_res52_54[i-51]
    out += _coeff * exp(-alpha_res52_54[i-51] * _d_shift * _d_shift \
      -beta_res52_54[i-51] * _t_shift * _t_shift)
  # Compute heterogeneous coefficients for 1-indices 55 to 56
  for i in range(54,56):
    _coeff = n_res[i] * (d ** (d_res[i]-1.0)) * (t ** t_res[i])
    _theta = (1.0 - t) + A_res55_56[i-54] * d_quad ** _exp1_55_56[i-54]
    _Delta = _theta*_theta + B_res55_56[i-54] * d_quad ** a_res55_56[i-54]
    _coeff *= (
      _Delta * (1.0 - 2.0 * C_res55_56[i-54] * (d-1.0) * d)
      + b_res55_56[i-54] * d * (d-1.0) * (
        A_res55_56[i-54] * _theta * 2.0 / beta_res55_56[i-54]
        * d_quad**(_exp1_55_56[i-54] - 1.0)
        + 2.0 * B_res55_56[i-54] * a_res55_56[i-54]
        * d_quad**(a_res55_56[i-54] - 1.0)
      )
    )
    if _Delta != 0:
      _Delta = _Delta ** (b_res55_56[i-54]-1.0)
    _coeff *= _Delta
    out += _coeff * exp(-C_res55_56[i-54] * d_quad \
      - D_res55_56[i-54]*(t - 1.0)*(t - 1.0))

  return out

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef DTYPE_t phir_dd(DTYPE_t d, DTYPE_t t):
  ''' Second delta-derivative of residual part of dimless Helmholtz function
      phi = f/(RT).
  See also phir for more details.
  Cython implementation for float input.
  '''

  cdef DTYPE_t d_quad = (d - 1.0) * (d - 1.0)
  cdef DTYPE_t _neg_dpowc
  cdef DTYPE_t out = 0.0

  # Use strides as below
  # cdef n_coeff ndtc1_51[4*i]
  # cdef d_coeff ndtc1_51[4*i+1]
  # cdef t_coeff ndtc1_51[4*i+2]
  # cdef c_coeff ndtc1_51[4*i+3]

  # Compute uniform coefficients with mixed data (1-indices 1 to 51)
  cdef unsigned short i
  for i in range(7):
    out += ndtc1_51[4*i] \
      * ndtc1_51[4*i+1] * (ndtc1_51[4*i+1] - 1.0) \
      * (d ** (ndtc1_51[4*i+1] - 2.0)) * (t ** ndtc1_51[4*i+2])
  for i in range(7, 51):
    _neg_dpowc = -d ** ndtc1_51[4*i+3]
    out += ndtc1_51[4*i] \
      * ((ndtc1_51[4*i+1] + ndtc1_51[4*i+3] * _neg_dpowc) \
        * (ndtc1_51[4*i+1] + ndtc1_51[4*i+3] * _neg_dpowc - 1.0) \
        + ndtc1_51[4*i+3] * ndtc1_51[4*i+3] * _neg_dpowc ) \
      * (d ** (ndtc1_51[4*i+1] - 2.0)) * (t ** ndtc1_51[4*i+2]) \
      * exp(_neg_dpowc)

  # Compute pre-exponential coefficients
  cdef DTYPE_t _c1
  cdef DTYPE_t _c2
  cdef DTYPE_t _coeff
  cdef DTYPE_t _theta
  cdef DTYPE_t _Delta
  cdef DTYPE_t _dDelta_div
  cdef DTYPE_t _ddDelta
  # Compute heterogeneous coefficients for 1-indices 52 to 54
  for i in range(51,54):
    _coeff = n_res[i] * (d ** (d_res[i])) * (t ** t_res[i]) \
    * (-2.0 * alpha_res52_54[i-51] \
    + 4.0 * alpha_res52_54[i-51] * alpha_res52_54[i-51] \
      * (d - eps_res52_54[i-51]) * (d - eps_res52_54[i-51]) \
    - 4.0 * d_res[i] * alpha_res52_54[i-51] / d * (d - eps_res52_54[i-51]) \
    + d_res[i] * (d_res[i] - 1.0) / (d * d))
    _c1 = d - eps_res52_54[i-51]
    _c2 = t - gamma_res52_54[i-51]
    out += _coeff * exp(-alpha_res52_54[i-51] * _c1 * _c1 \
      -beta_res52_54[i-51] * _c2 * _c2)
  # Compute heterogeneous coefficients for 1-indices 55 to 56
  for i in range(54,56):
    _theta = (1.0 - t) + A_res55_56[i-54] * d_quad ** _exp1_55_56[i-54]
    _Delta = _theta*_theta + B_res55_56[i-54] * d_quad ** a_res55_56[i-54]
    # Compute d(Delta)/d(delta) divided by (delta - 1.0) for numerical stability
    _dDelta_div = A_res55_56[i-54] * _theta * 2.0 / beta_res55_56[i-54] \
        * d_quad**(_exp1_55_56[i-54] - 1.0) \
      + 2.0 * B_res55_56[i-54] * a_res55_56[i-54] \
        * d_quad**(a_res55_56[i-54] - 1.0)
    # Reuse register
    if d_quad != 0.0:
      _c1 = d_quad ** (_exp1_55_56[i-54] - 2.0)
    else:
      _c1 = 0.0
    _c2 = A_res55_56[i-54] / beta_res55_56[i-54] \
      * d_quad**(_exp1_55_56[i-54] - 1.0)
    _ddDelta = _dDelta_div + ((d-1.0)**2) * (
      4.0 * B_res55_56[i-54] * a_res55_56[i-54] * (a_res55_56[i-54] - 1.0)
        * d_quad**(a_res55_56[i-54] - 2.0)
      + 2.0 * _c2*_c2
      + 4.0 * _theta * A_res55_56[i-54] / beta_res55_56[i-54] \
        * (_exp1_55_56[i-54] - 1.0) * _c1
    )
    # Finish d(Delta)/d(delta) computation in-place
    _dDelta_div *= d - 1.0
    # Replace (t_res is zero, so coeffs[54:56] contains invalid entries) for
    #   1-indices from 55 to 56
    _coeff = _Delta*_Delta * (-4.0 * C_res55_56[i-54] * (d-1.0) 
      + d * (2.0*C_res55_56[i-54]*d_quad - 1.0) * 2.0 * C_res55_56[i-54])
    _coeff += _Delta * 2.0 * b_res55_56[i-54] * _dDelta_div \
      * (1.0 - 2.0 * d * C_res55_56[i-54] * (d - 1.0))
    _coeff += b_res55_56[i-54] * (_Delta * _ddDelta
      + (b_res55_56[i-54] - 1.0) * _dDelta_div * _dDelta_div) * d
    # Reuse register
    if _Delta != 0.0:
      _c1 = _Delta ** (b_res55_56[i-54] - 2.0)
    else:
      _c1 = 0.0
    _coeff *= n_res[i] * _c1
    out += _coeff * exp(-C_res55_56[i-54] * d_quad \
      - D_res55_56[i-54]*(t - 1.0)*(t - 1.0))

  return out

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef DTYPE_t phir_t(DTYPE_t d, DTYPE_t t):
  '''First tau-derivative of residual part of dimless Helmholtz function
      phi = f/(RT). '''
  cdef DTYPE_t d_quad = (d - 1.0) * (d - 1.0)
  cdef DTYPE_t out = 0.0

  # Use strides as below
  # cdef n_coeff ndtc1_51[4*i]
  # cdef d_coeff ndtc1_51[4*i+1]
  # cdef t_coeff ndtc1_51[4*i+2]
  # cdef c_coeff ndtc1_51[4*i+3]

  # Compute uniform coefficients with mixed data (1-indices 1 to 51)
  cdef unsigned short i
  for i in range(7):
    out += ndtc1_51[4*i] * ndtc1_51[4*i+2] \
      * (d ** (ndtc1_51[4*i+1])) * (t ** (ndtc1_51[4*i+2]-1))
  for i in range(7, 51):
    out += ndtc1_51[4*i] * ndtc1_51[4*i+2] \
      * (d ** (ndtc1_51[4*i+1])) * (t ** (ndtc1_51[4*i+2]-1)) \
      * exp(-d ** ndtc1_51[4*i+3])

  # Declare temporary registers
  cdef DTYPE_t _theta
  cdef DTYPE_t _Delta
  cdef DTYPE_t _d_shift
  cdef DTYPE_t _t_shift
  cdef DTYPE_t _coeff
  # Compute heterogeneous coefficients for 1-indices 52 to 54
  for i in range(51,54):
    _d_shift = d - eps_res52_54[i-51]
    _t_shift = t - gamma_res52_54[i-51]
    out += n_res[i] * (d ** (d_res[i])) * (t ** (t_res[i]-1.0)) \
      * (t_res[i] - 2.0 * beta_res52_54[i-51] * t * _t_shift) \
      * exp(-alpha_res52_54[i-51] * _d_shift * _d_shift \
      -beta_res52_54[i-51] * _t_shift * _t_shift)
  # Compute heterogeneous coefficients for 1-indices 55 to 56
  for i in range(54,56):
    _theta = (1.0 - t) + A_res55_56[i-54] * d_quad ** _exp1_55_56[i-54]
    _Delta = _theta*_theta + B_res55_56[i-54] * d_quad ** a_res55_56[i-54]
    _coeff = n_res[i] * d * 2.0 * (
      -_theta * b_res55_56[i-54] + _Delta * D_res55_56[i-54] * (1.0 - t)
    ) * exp(-C_res55_56[i-54] * d_quad - D_res55_56[i-54]*(t - 1.0)*(t - 1.0))
    # Replace limiting value if Delta == 0
    if _Delta != 0.0:
      _coeff *= _Delta ** (b_res55_56[i-54] - 1.0) # 0.85 to 0.95
    else:
      _coeff = 0.0
    out += _coeff

  return out

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef DTYPE_t phir_tt(DTYPE_t d, DTYPE_t t):
  '''Second tau-derivative of residual part of dimless Helmholtz function
      phi = f/(RT). '''
  cdef DTYPE_t d_quad = (d - 1.0) * (d - 1.0)
  cdef DTYPE_t out = 0.0

  # Use strides as below
  # cdef n_coeff ndtc1_51[4*i]
  # cdef d_coeff ndtc1_51[4*i+1]
  # cdef t_coeff ndtc1_51[4*i+2]
  # cdef c_coeff ndtc1_51[4*i+3]

  # Stable summation pattern
  # # Get term
  # tent = out + term + comp
  # comp = (term + comp) - (tent - out)
  # out = tent

  # Compute uniform coefficients with mixed data (1-indices 1 to 51)
  cdef unsigned short i
  for i in range(7):
    out += ndtc1_51[4*i] * ndtc1_51[4*i+2] * (ndtc1_51[4*i+2] - 1.0) \
      * (d ** (ndtc1_51[4*i+1])) * (t ** (ndtc1_51[4*i+2] - 2.0))
  for i in range(7, 51):
    out += ndtc1_51[4*i] * ndtc1_51[4*i+2] * (ndtc1_51[4*i+2] - 1.0) \
      * (d ** (ndtc1_51[4*i+1])) * (t ** (ndtc1_51[4*i+2] - 2.0)) \
      * exp(-d ** ndtc1_51[4*i+3])

  # Declare temporary registers
  cdef DTYPE_t _theta
  cdef DTYPE_t _Delta
  cdef DTYPE_t _d_shift
  cdef DTYPE_t _t_shift
  cdef DTYPE_t _coeff
  # Compute heterogeneous coefficients for 1-indices 52 to 54
  for i in range(51,54):
    _d_shift = d - eps_res52_54[i-51]
    _t_shift = t - gamma_res52_54[i-51]
    _coeff = t_res[i] - 2.0 * beta_res52_54[i-51] * t \
      * (t - gamma_res52_54[i-51])
    out += n_res[i] * (d ** (d_res[i])) * (t ** (t_res[i]-2.0)) \
      * exp(-alpha_res52_54[i-51] * _d_shift * _d_shift \
        -beta_res52_54[i-51] * _t_shift * _t_shift) \
      * (_coeff * _coeff - t_res[i] - 2.0 * beta_res52_54[i-51] * t * t)
  # Compute heterogeneous coefficients for 1-indices 55 to 56
  for i in range(54,56):
    _theta = (1.0 - t) + A_res55_56[i-54] * d_quad ** _exp1_55_56[i-54]
    _Delta = _theta*_theta + B_res55_56[i-54] * d_quad ** a_res55_56[i-54]
    # Replace limiting value if Delta == 0
    if _Delta != 0.0:
      _coeff = _Delta ** (b_res55_56[i-54] - 2.0) # 0.85 to 0.95
    else:
      return -float("inf")
    out += _coeff * n_res[i] * 2.0 * d * (
      b_res55_56[i-54] * (_Delta \
        + 2.0 * _theta*_theta * (b_res55_56[i-54] - 1.0)
        + 4.0 * _theta * _Delta * D_res55_56[i-54] * (t - 1.0))
      + _Delta * _Delta * D_res55_56[i-54] \
        * (2.0 * D_res55_56[i-54] * (t - 1.0) * (t - 1.0) - 1.0)
    ) * exp(-C_res55_56[i-54] * d_quad - D_res55_56[i-54]*(t - 1.0)*(t - 1.0))

  return out

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef DTYPE_t phir_dt(DTYPE_t d, DTYPE_t t):
  '''Second mixed-derivative of residual part of dimless Helmholtz function
      phi = f/(RT). '''
  cdef DTYPE_t d_quad = (d - 1.0) * (d - 1.0)
  cdef DTYPE_t out = 0.0
  cdef DTYPE_t _c1

  # Use strides as below
  # cdef n_coeff ndtc1_51[4*i]
  # cdef d_coeff ndtc1_51[4*i+1]
  # cdef t_coeff ndtc1_51[4*i+2]
  # cdef c_coeff ndtc1_51[4*i+3]

  # Compute uniform coefficients with mixed data (1-indices 1 to 51)
  cdef unsigned short i
  for i in range(7):
    out += ndtc1_51[4*i] * ndtc1_51[4*i+1] * ndtc1_51[4*i+2] \
      * (d ** (ndtc1_51[4*i+1] - 1.0)) * (t ** (ndtc1_51[4*i+2] - 1.0))
  for i in range(7, 51):
    _c1 = -d ** ndtc1_51[4*i+3]
    out += ndtc1_51[4*i] * ndtc1_51[4*i+2] \
      * (ndtc1_51[4*i+1] + c_res1_51[i] * _c1) \
      * (d ** (ndtc1_51[4*i+1] - 1.0)) * (t ** (ndtc1_51[4*i+2] - 1.0)) \
      * exp(_c1)

  # Declare temporary registers
  cdef DTYPE_t _theta
  cdef DTYPE_t _Delta
  cdef DTYPE_t _dDelta
  cdef DTYPE_t _d_shift
  cdef DTYPE_t _t_shift
  cdef DTYPE_t _coeff
  cdef DTYPE_t _c2
  # Compute heterogeneous coefficients for 1-indices 52 to 54
  for i in range(51,54):
    _d_shift = d - eps_res52_54[i-51]
    _t_shift = t - gamma_res52_54[i-51]
    out += n_res[i] * (d ** (d_res[i] - 1.0)) * (t ** (t_res[i] - 1.0)) \
      * (d_res[i] - 2.0 * alpha_res52_54[i-51] * d * _d_shift) \
      * (t_res[i] - 2.0 * beta_res52_54[i-51] * t * _t_shift) \
      * exp(-alpha_res52_54[i-51] * _d_shift * _d_shift \
      -beta_res52_54[i-51] * _t_shift * _t_shift)
  # Compute heterogeneous coefficients for 1-indices 55 to 56
  for i in range(54,56):
    _c1 = d_quad**(_exp1_55_56[i-54] - 1.0)
    _c2 = d_quad**(a_res55_56[i-54] - 1.0)
    _theta = (1.0 - t) + A_res55_56[i-54] * d_quad * _c1
    _Delta = _theta * _theta + B_res55_56[i-54] * d_quad * _c2
    _dDelta = (d - 1.0) * (
      A_res55_56[i-54] * _theta * 2.0 / beta_res55_56[i-54] * _c1
      + 2.0 * B_res55_56[i-54] * a_res55_56[i-54] * _c2)
    _coeff = n_res[i] * (
      _Delta * _Delta * (-2.0 * D_res55_56[i-54] * (t - 1.0) \
      + d * 4.0 * C_res55_56[i-54] * D_res55_56[i-54] * (d - 1.0) * (t - 1.0))
      + d * _Delta * b_res55_56[i-54] * _dDelta \
        * (-2.0 * D_res55_56[i-54] * (t - 1.0))
      - 2.0 * _theta * b_res55_56[i-54] * _Delta \
        * (1.0 - 2.0 * d * C_res55_56[i-54] * (d - 1.0))
      + d * (
        -A_res55_56[i-54] * b_res55_56[i-54] * 2.0 / beta_res55_56[i-54] \
          * _Delta * (d - 1.0) * _c1
        - 2.0 * _theta * b_res55_56[i-54] * (b_res55_56[i-54] - 1.0) * _dDelta
      )
    ) * exp(-C_res55_56[i-54] * d_quad - D_res55_56[i-54]*(t - 1.0)*(t - 1.0))
    # Replace limiting value if Delta == 0
    if _Delta != 0.0:
      _coeff *= _Delta ** (b_res55_56[i-54] - 2.0) # 0.85 to 0.95
    else:
      _coeff = 0.0
    out += _coeff
    _c1 = (
      _Delta * _Delta * (-2.0 * D_res55_56[i-54] * (t - 1.0) \
      + d * 4.0 * C_res55_56[i-54] * D_res55_56[i-54] * (d - 1.0) * (t - 1.0))
      + d * _Delta * b_res55_56[i-54] * _dDelta \
        * (-2.0 * D_res55_56[i-54] * (t - 1.0))
      - 2.0 * _theta * b_res55_56[i-54] * _Delta \
        * (1.0 - 2.0 * d * C_res55_56[i-54] * (d - 1.0))
      + d * (
        -A_res55_56[i-54] * b_res55_56[i-54] * 2.0 / beta_res55_56[i-54] \
          * _Delta * (d - 1.0) * _c1
        - 2.0 * _theta * b_res55_56[i-54] * (b_res55_56[i-54] - 1.0) * _dDelta
      )
    )

  return out

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef prho_sat_stepinfo(DTYPE_t T):
  ''' Returns isothermal saturation curve properties as tuple
  (psat, rho_satl, rho_satv). Solves the Maxwell construction (see e.g. P.
  Junglas).
  Calls def functions in float_phi_functions (can be optimized to cdef fns).
  '''
  # Compute reciprocal reduced temperature
  cdef DTYPE_t t = Tc / T
  if t < 1.0:
    return None, None, None, [0.0, 0.0], [0.0, 0.0]
  elif t == 1.0:
    # Special case: exactly critical
    return pc, None, None, [0.0, 0.0], [0.0, 0.0]

  cdef DTYPE_t _phir_d0
  cdef DTYPE_t _phir_dd0
  cdef DTYPE_t _phir_d1
  cdef DTYPE_t _phir_dd1
  cdef DTYPE_t _J00, _J01, _J10, _J11, _detJ
  cdef DTYPE_t f0, f1
  cdef DTYPE_t step0, step1
  cdef DTYPE_t d0 = 1.0
  cdef DTYPE_t d1 = 0
  cdef DTYPE_t _c0
  cdef DTYPE_t _c1
  cdef DTYPE_t _c2
  cdef Pair pair

  # Compute initial guess using independent sat curve correlations
  cdef unsigned short i
  _c0 = 1.0-1.0/t
  _c1 = _c0**(1.0/6.0)
  _c2 = _c1 * _c1
  for i in range(6):
    d0 += satl_coeffsb[i] * pow_fd(_c2, satl_powsb_times3[i])
    d1 += satv_coeffsc[i] * pow_fd(_c1, satv_powsc_times6[i])
  d1 = exp(d1)
  # Fixed step Newton
  for i in range(12):
    # Compute phir_d, phir_dd values
    pair = fused_phir_d_phir_dd(d0, t)
    _phir_d0 = pair.first
    _phir_dd0 = pair.second
    pair = fused_phir_d_phir_dd(d1, t)
    _phir_d1 = pair.first
    _phir_dd1 = pair.second 
    # Assemble Jacobian for Maxwell residual equation
    _J00 = -2.0 * _phir_d0 - d0 * _phir_dd0 - phi0_d(d0, t)
    _J01 = 2.0 * _phir_d1 + d1 * _phir_dd1 + phi0_d(d1, t)
    _J10 = 1.0 + 2.0 * d0 * _phir_d0 + d0 * d0 * _phir_dd0
    _J11 = -1.0 - 2.0 * d1 * _phir_d1 - d1 * d1 * _phir_dd1
    _detJ = _J00 * _J11 - _J01 * _J10
    # Assemble vector of Maxwell residuals
    f0 = d1 * _phir_d1 - d0 * _phir_d0 \
        - phir(d0, t) - phi0(d0, t) + phir(d1, t) + phi0(d1, t)
    f1 = d0 + d0 * d0 * _phir_d0 - d1 - d1 * d1 * _phir_d1
    # Compute Newton step
    step0 = -( _J11 * f0 - _J01 * f1) / (_detJ)
    step1 = -(-_J10 * f0 + _J00 * f1) / (_detJ)
    d0 += step0
    d1 += step1
  # Compute latest function value
  pair = fused_phir_d_phir_dd(d0, t)
  _phir_d0 = pair.first
  _phir_dd0 = pair.second
  f0 = d1 * _phir_d1 - d0 * _phir_d0 \
       - phir(d0, t) - phi0(d0, t) + phir(d1, t) + phi0(d1, t)
  f1 = d0 + d0 * d0 * _phir_d0 - d1 - d1 * d1 * _phir_d1
  # Return psat, rho_satl, rho_satv, last_newton_step, residual
  return d0 * (1.0 + d0 * _phir_d0) * rhoc * R * T, \
    d0 * rhoc, d1 * rhoc, [step0, step1], [f0, f1]

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef SatTriple prho_sat_newton(DTYPE_t T) noexcept:
  ''' Version of prho_sat that uses Newton iteration, started from the auxiliary
  equations of iapws95. Does not return stepping/convergence info. '''
  # Compute reciprocal reduced temperature
  cdef DTYPE_t t = Tc / T
  if t < 1.0:
    return SatTriple(-1.0, -1.0, -1.0)
  elif t == 1.0:
    # Special case: exactly critical
    return SatTriple(pc, -1.0, -1.0)

  cdef DTYPE_t _phir_d0, _phir_dd0, _phir_d1, _phir_dd1
  cdef DTYPE_t _J00, _J01, _J10, _J11, _detJ
  cdef DTYPE_t f0, f1, step0, step1
  cdef DTYPE_t d0 = 1.0
  cdef DTYPE_t d1 = 0
  cdef DTYPE_t _c0, _c1, _c2

  # Compute initial guess using independent sat curve correlations
  cdef unsigned short i
  _c0 = 1.0-1.0/t
  _c1 = _c0**(1.0/6.0)
  _c2 = _c1 * _c1
  for i in range(6):
    d0 += satl_coeffsb[i] * pow_fd(_c2, satl_powsb_times3[i])
    d1 += satv_coeffsc[i] * pow_fd(_c1, satv_powsc_times6[i])
  d1 = exp(d1)
  # Fixed step Newton
  for i in range(12):
    # Compute phir_d, phir_dd values
    pair = fused_phir_d_phir_dd(d0, t)
    _phir_d0 = pair.first
    _phir_dd0 = pair.second
    pair = fused_phir_d_phir_dd(d1, t)
    _phir_d1 = pair.first
    _phir_dd1 = pair.second 
    # Assemble Jacobian for Maxwell residual equation
    _J00 = -2.0 * _phir_d0 - d0 * _phir_dd0 - phi0_d(d0, t)
    _J01 = 2.0 * _phir_d1 + d1 * _phir_dd1 + phi0_d(d1, t)
    _J10 = 1.0 + 2.0 * d0 * _phir_d0 + d0 * d0 * _phir_dd0
    _J11 = -1.0 - 2.0 * d1 * _phir_d1 - d1 * d1 * _phir_dd1
    _detJ = _J00 * _J11 - _J01 * _J10
    # Assemble vector of Maxwell residuals
    f0 = d1 * _phir_d1 - d0 * _phir_d0 \
        - phir(d0, t) - phi0(d0, t) + phir(d1, t) + phi0(d1, t)
    f1 = d0 + d0 * d0 * _phir_d0 - d1 - d1 * d1 * _phir_d1
    # Compute Newton step
    step0 = -( _J11 * f0 - _J01 * f1) / (_detJ)
    step1 = -(-_J10 * f0 + _J00 * f1) / (_detJ)
    d0 += step0
    d1 += step1
    if step0*step0 + step1*step1 < 1e-18: # square norm step comparison
      break
  # Compute latest function value
  pair = fused_phir_d_phir_dd(d1, t)
  _phir_d1 = pair.first
  _phir_dd1 = pair.second
  # Return psat, rho_satl, rho_satv, last_newton_step, residual
  return SatTriple(d1 * (1.0 + d1 * _phir_d1) * rhoc * R * T, \
    d0 * rhoc, d1 * rhoc)

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef SatTriple prho_sat(DTYPE_t T) noexcept:
  ''' Returns pressure, saturation density computed using predictor-corrector
  Newton iteration. Two iterations are performed, and then the saturation
  pressure is computed using an additional call to compute phir_d.
  Does not return stepping/convergence info, but is expected to produce relative
  error in densities and pressure of 1e-7 up to Tc - 1 K. Error can be improved
  by using additional iterations. '''
  # Compute reciprocal reduced temperature
  cdef DTYPE_t t = Tc / T
  if t < 1.0:
    return SatTriple(-1.0, -1.0, -1.0)
  elif t == 1.0:
    # Special case: exactly critical
    return SatTriple(pc, -1.0, -1.0)

  cdef Derivatives_phi0_0_1_2 _phi0all_0, _phi0all_1
  cdef Derivatives_phir_d3 _phirall_0, _phirall_1
  cdef DTYPE_t _J00, _J01, _J10, _J11, _detJ
  cdef DTYPE_t _J00_update, _J01_update, _J10_update, _J11_update
  cdef DTYPE_t _phir_d1
  cdef DTYPE_t f0, f1
  cdef DTYPE_t step0, step1
  cdef DTYPE_t d0 = 1.0
  cdef DTYPE_t d1 = 0
  cdef DTYPE_t _c0
  cdef DTYPE_t _c1
  cdef DTYPE_t _c2

  cdef unsigned short i

  # Compute initial guess using mix of cubic splines and auxiliary equations
  d0 = satl_spline(T) / rhoc
  d1 = satv_spline(T) / rhoc

  for i in range(1):
    # Compute phi derivative values
    _phirall_0 = fused_phir_d3(d0, t)
    _phirall_1 = fused_phir_d3(d1, t)
    _phi0all_0 = fused_phi0_all(d0, t)
    _phi0all_1 = fused_phi0_all(d1, t)
    # Assemble Jacobian for Maxwell residual equation
    _J00 = -2.0 * _phirall_0.phir_d - d0 * _phirall_0.phir_dd - _phi0all_0.phi0_d
    _J01 = 2.0 * _phirall_1.phir_d + d1 * _phirall_1.phir_dd + _phi0all_1.phi0_d
    _J10 = 1.0 + 2.0 * d0 * _phirall_0.phir_d + d0 * d0 * _phirall_0.phir_dd
    _J11 = -1.0 - 2.0 * d1 * _phirall_1.phir_d - d1 * d1 * _phirall_1.phir_dd
    _detJ = _J00 * _J11 - _J01 * _J10
    # Assemble vector of Maxwell residuals
    f0 = d1 * _phirall_1.phir_d - d0 * _phirall_0.phir_d \
        - _phirall_0.phir - _phi0all_0.phi0 + _phirall_1.phir + _phi0all_1.phi0
    f1 = d0 + d0 * d0 * _phirall_0.phir_d - d1 - d1 * d1 * _phirall_1.phir_d
    # Compute Newton step
    step0 = -( _J11 * f0 - _J01 * f1) / (_detJ)
    step1 = -(-_J10 * f0 + _J00 * f1) / (_detJ)
    # Corrector step for Jacobian using gradient of Maxwell residual equation
    _J00_update = (-3.0 * _phirall_0.phir_dd - d0 * _phirall_0.phir_ddd \
      - _phi0all_0.phi0_dd) * step0
    _J10_update = (2.0 * _phirall_0.phir_d + 4.0 * d0 * _phirall_0.phir_dd \
      + d0*d0*_phirall_0.phir_ddd) * step0
    _J01_update = (3.0 * _phirall_1.phir_dd + d1 * _phirall_1.phir_ddd \
      + _phi0all_1.phi0_dd) * step1
    _J11_update = (-2.0 * _phirall_1.phir_d - 4.0 * d1 * _phirall_1.phir_dd \
      - d1*d1*_phirall_1.phir_ddd) * step1
    # Assemble updated inverse Jacobian
    _J00 += _J00_update
    _J01 += _J01_update
    _J10 += _J10_update
    _J11 += _J11_update
    _detJ = _J00 * _J11 - _J01 * _J10
    # Use average of predictor and corrector step
    d0 += 0.5 * (step0 + -( _J11 * f0 - _J01 * f1) / (_detJ))
    d1 += 0.5 * (step1 + -(-_J10 * f0 + _J00 * f1) / (_detJ))

  # Compute saturation pressure using vapour (more compressible -- near unit
  # sensitivity in the relative error)
  pair = fused_phir_d_phir_dd(d1, t)
  _phir_d1 = pair.first
  # Return psat, rho_satl, rho_satv, last_newton_step, residual
  return SatTriple(d1 * (1.0 + d1 * _phir_d1) * rhoc * R * T, \
    d0 * rhoc, d1 * rhoc)

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef Pair rho_sat(DTYPE_t T) noexcept:
  ''' Returns saturation density only. See prho_sat. Returns struct Pair,
  with first == d0 (dsatl) and second == d1 (dsatv). '''
  # Compute reciprocal reduced temperature
  cdef DTYPE_t t = Tc / T
  if t < 1.0:
    return Pair(-1.0, -1.0)
  elif t == 1.0:
    # Special case: exactly critical
    return Pair(-1.0, -1.0)

  cdef Derivatives_phi0_0_1_2 _phi0all_0, _phi0all_1
  cdef Derivatives_phir_d3 _phirall_0, _phirall_1
  cdef DTYPE_t _J00, _J01, _J10, _J11, _detJ
  cdef DTYPE_t _J00_update, _J01_update, _J10_update, _J11_update
  cdef DTYPE_t _phir_d1
  cdef DTYPE_t f0, f1
  cdef DTYPE_t step0, step1
  cdef DTYPE_t d0 = 1.0
  cdef DTYPE_t d1 = 0
  cdef DTYPE_t _c0
  cdef DTYPE_t _c1
  cdef DTYPE_t _c2

  cdef unsigned short i
  # Compute initial guess using mix of cubic splines and auxiliary equations
  d0 = satl_spline(T) / rhoc
  d1 = satv_spline(T) / rhoc

  for i in range(1):
    # Compute phi derivative values
    _phirall_0 = fused_phir_d3(d0, t)
    _phirall_1 = fused_phir_d3(d1, t)
    _phi0all_0 = fused_phi0_all(d0, t)
    _phi0all_1 = fused_phi0_all(d1, t)
    # Assemble Jacobian for Maxwell residual equation
    _J00 = -2.0 * _phirall_0.phir_d - d0 * _phirall_0.phir_dd - _phi0all_0.phi0_d
    _J01 = 2.0 * _phirall_1.phir_d + d1 * _phirall_1.phir_dd + _phi0all_1.phi0_d
    _J10 = 1.0 + 2.0 * d0 * _phirall_0.phir_d + d0 * d0 * _phirall_0.phir_dd
    _J11 = -1.0 - 2.0 * d1 * _phirall_1.phir_d - d1 * d1 * _phirall_1.phir_dd
    _detJ = _J00 * _J11 - _J01 * _J10
    # Assemble vector of Maxwell residuals
    f0 = d1 * _phirall_1.phir_d - d0 * _phirall_0.phir_d \
        - _phirall_0.phir - _phi0all_0.phi0 + _phirall_1.phir + _phi0all_1.phi0
    f1 = d0 + d0 * d0 * _phirall_0.phir_d - d1 - d1 * d1 * _phirall_1.phir_d
    # Compute Newton step
    step0 = -( _J11 * f0 - _J01 * f1) / (_detJ)
    step1 = -(-_J10 * f0 + _J00 * f1) / (_detJ)
    # Corrector step for Jacobian using gradient of Maxwell residual equation
    _J00_update = (-3.0 * _phirall_0.phir_dd - d0 * _phirall_0.phir_ddd \
      - _phi0all_0.phi0_dd) * step0
    _J10_update = (2.0 * _phirall_0.phir_d + 4.0 * d0 * _phirall_0.phir_dd \
      + d0*d0*_phirall_0.phir_ddd) * step0
    _J01_update = (3.0 * _phirall_1.phir_dd + d1 * _phirall_1.phir_ddd \
      + _phi0all_1.phi0_dd) * step1
    _J11_update = (-2.0 * _phirall_1.phir_d - 4.0 * d1 * _phirall_1.phir_dd \
      - d1*d1*_phirall_1.phir_ddd) * step1
    # Assemble updated inverse Jacobian
    _J00 += _J00_update
    _J01 += _J01_update
    _J10 += _J10_update
    _J11 += _J11_update
    _detJ = _J00 * _J11 - _J01 * _J10
    # Use average of predictor and corrector step
    d0 += 0.5 * (step0 + -( _J11 * f0 - _J01 * f1) / (_detJ))
    d1 += 0.5 * (step1 + -(-_J10 * f0 + _J00 * f1) / (_detJ))

  # Return d0 (d_satl) and d1 (d_satv)
  return Pair(d0, d1)

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef Derivatives_phir_0_1_2 _dummy_struct(DTYPE_t d, DTYPE_t t) noexcept:
  ''' Dummy function for timing cost of equivalent pow and exp ops plus
      the functional call overhead. '''
  cdef unsigned short i
  # Calls to operator** by type:
  # 5, 0, 0, 2+2*1
  # Calls to exp by type:
  # 0, 5, 3, 2
  cdef DTYPE_t out_dummy = 0.0
  for i in range(9):
    out_dummy += d**t
  for i in range(10):
    out_dummy += exp(-d)
  return Derivatives_phir_0_1_2(out_dummy, out_dummy, out_dummy, 0.0, 0.0, 0.0)

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef Derivatives_phir_0_1_2 fused_phir_all_stable_sum(DTYPE_t d, DTYPE_t t) noexcept:
  ''' Optimized routine for simultaneously computing all 0th, 1st and 2nd
  derivatives of the residual part of the dimless Helmholtz function
      phi = f/(RT).
  Cython implementation for float input. Typical bottlenecks are computation of
  exp(DTYPE_t, DTYPE_t) and pow(DTYPE_t, DTYPE_t), where DTYPE_t is a floating
  point representation.
  Stable summation implementation (with significant overhead).
  '''
  cdef DTYPE_t out_phir    = 0.0
  cdef DTYPE_t out_phir_d  = 0.0
  cdef DTYPE_t out_phir_dd = 0.0
  cdef DTYPE_t out_phir_t  = 0.0
  cdef DTYPE_t out_phir_tt = 0.0
  cdef DTYPE_t out_phir_dt = 0.0
  # Summation compensation variables
  cdef DTYPE_t comp_phir    = 0.0
  cdef DTYPE_t comp_phir_d  = 0.0
  cdef DTYPE_t comp_phir_dd = 0.0
  cdef DTYPE_t comp_phir_t  = 0.0
  cdef DTYPE_t comp_phir_tt = 0.0
  cdef DTYPE_t comp_phir_dt = 0.0
  cdef DTYPE_t term
  cdef DTYPE_t d_quad = (d - 1.0) * (d - 1.0)
  # Declare temporary registers
  cdef DTYPE_t _c1
  cdef DTYPE_t _c2
  cdef DTYPE_t _c3
  cdef DTYPE_t _c4
  cdef DTYPE_t _c_coeff
  cdef DTYPE_t _common
  cdef unsigned short i
  
  # Compute terms with 1-indices 1 to 7 (0-indices 0 to 6), partially unrolled
  #   Access coefficient array in order, but optimizes out some operator** calls
  #   Loops are identical up to t ** typed_ndt_1_7[i].t changed for t in some.
  for i in range(2):
    # Compute common factors, requiring pow(double, double)
    _common = typed_ndt_1_7[i].n * pow_fd(d, typed_ndt_1_7[i].d) \
      * (t ** typed_ndt_1_7[i].t)
    # Cache intermediate result phir_d
    _c1 = typed_ndt_1_7[i].d * _common / d
    # Compute output terms
    term = _common
    add_term(&out_phir, &term, &comp_phir)
    term = _c1
    add_term(&out_phir_d, &term, &comp_phir_d)
    term = (typed_ndt_1_7[i].d - 1) * _c1 / d
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    term = _common * typed_ndt_1_7[i].t / t
    add_term(&out_phir_t, &term, &comp_phir_t)
    term = _common * typed_ndt_1_7[i].t \
      * (typed_ndt_1_7[i].t - 1.0) / (t*t)
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    term = _c1 * typed_ndt_1_7[i].t / t
    add_term(&out_phir_dt, &term, &comp_phir_dt)
  for i in range(2,3):
    # Compute common factors, requiring pow(double, double)
    _common = typed_ndt_1_7[i].n * pow_fd(d, typed_ndt_1_7[i].d) \
      * t
    # Cache intermediate result phir_d
    _c1 = typed_ndt_1_7[i].d * _common / d
    # Compute output terms
    term = _common
    add_term(&out_phir, &term, &comp_phir)
    term = _c1
    add_term(&out_phir_d, &term, &comp_phir_d)
    term = (typed_ndt_1_7[i].d - 1) * _c1 / d
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    term = _common * typed_ndt_1_7[i].t / t
    add_term(&out_phir_t, &term, &comp_phir_t)
    term = _common * typed_ndt_1_7[i].t \
      * (typed_ndt_1_7[i].t - 1.0) / (t*t)
    add_term(&out_phir_tt, &term, &comp_phir_tt) 
    term = _c1 * typed_ndt_1_7[i].t / t
    add_term(&out_phir_dt, &term, &comp_phir_dt)
  for i in range(3,6):
    # Compute common factors, requiring pow(double, double)
    _common = typed_ndt_1_7[i].n * pow_fd(d, typed_ndt_1_7[i].d) \
      * (t ** typed_ndt_1_7[i].t)
    # Cache intermediate result phir_d
    _c1 = typed_ndt_1_7[i].d * _common / d
    # Compute output terms
    term = _common
    add_term(&out_phir, &term, &comp_phir)
    term = _c1
    add_term(&out_phir_d, &term, &comp_phir_d)
    term = (typed_ndt_1_7[i].d - 1) * _c1 / d
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    term = _common * typed_ndt_1_7[i].t / t
    add_term(&out_phir_t, &term, &comp_phir_t)
    term = _common * typed_ndt_1_7[i].t \
      * (typed_ndt_1_7[i].t - 1.0) / (t*t)
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    term = _c1 * typed_ndt_1_7[i].t / t
    add_term(&out_phir_dt, &term, &comp_phir_dt)
  for i in range(6,7):
    # Compute common factors, requiring pow(double, double)
    _common = typed_ndt_1_7[i].n * pow_fd(d, typed_ndt_1_7[i].d) \
      * t
    # Cache intermediate result phir_d
    _c1 = typed_ndt_1_7[i].d * _common / d
    # Compute output terms
    term = _common
    add_term(&out_phir, &term, &comp_phir)
    term = _c1
    add_term(&out_phir_d, &term, &comp_phir_d)
    term = (typed_ndt_1_7[i].d - 1) * _c1 / d
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    term = _common * typed_ndt_1_7[i].t / t
    add_term(&out_phir_t, &term, &comp_phir_t)
    term = _common * typed_ndt_1_7[i].t \
      * (typed_ndt_1_7[i].t - 1.0) / (t*t)
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    term = _c1 * typed_ndt_1_7[i].t / t
    add_term(&out_phir_dt, &term, &comp_phir_dt)
  
  # Terms with 1-indices 8 to 51 are unrolled by value of coefficient c_coeff
  #   range(7,22) -> 1
  #   range(22,42) -> 2
  #   range(42,46) -> 3
  #   range(46,47) -> 4
  #   range(47,51) -> 6
  # allowing evaluating d**c using pow_fd(double, int). Loops are identical,
  # with a different preamble for setting _c1, _c2, _c_coeff.
  _c1 = -d
  _c2 = exp(_c1)
  _c_coeff = 1.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(0,15):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    term = _common
    add_term(&out_phir, &term, &comp_phir)
    term = _common * _c4
    add_term(&out_phir_d, &term, &comp_phir_d)
    term = _common * (_c4 * (_c4 - 1.0/d) + _c3)
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    term = _common * typed_ndt_8_51[i].t / t
    add_term(&out_phir_t, &term, &comp_phir_t)
    term = _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    term = _common * _c4 * typed_ndt_8_51[i].t / t
    add_term(&out_phir_dt, &term, &comp_phir_dt)

  _c1 = -d * d
  _c2 = exp(_c1)
  _c_coeff = 2.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(15,35):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    term = _common
    add_term(&out_phir, &term, &comp_phir)
    term = _common * _c4
    add_term(&out_phir_d, &term, &comp_phir_d)
    term = _common * (_c4 * (_c4 - 1.0/d) + _c3)
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    term = _common * typed_ndt_8_51[i].t / t
    add_term(&out_phir_t, &term, &comp_phir_t)
    term = _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    term = _common * _c4 * typed_ndt_8_51[i].t / t
    add_term(&out_phir_dt, &term, &comp_phir_dt)
  _c1 = -d * d * d
  _c2 = exp(_c1)
  _c_coeff = 3.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(35,39):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    term = _common
    add_term(&out_phir, &term, &comp_phir)
    term = _common * _c4
    add_term(&out_phir_d, &term, &comp_phir_d)
    term = _common * (_c4 * (_c4 - 1.0/d) + _c3)
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    term = _common * typed_ndt_8_51[i].t / t
    add_term(&out_phir_t, &term, &comp_phir_t)
    term = _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    term = _common * _c4 * typed_ndt_8_51[i].t / t
    add_term(&out_phir_dt, &term, &comp_phir_dt)
  _c1 = d * d
  _c1 *= -_c1
  _c2 = exp(_c1)
  _c_coeff = 4.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(39,40):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    term = _common
    add_term(&out_phir, &term, &comp_phir)
    term = _common * _c4
    add_term(&out_phir_d, &term, &comp_phir_d)
    term = _common * (_c4 * (_c4 - 1.0/d) + _c3)
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    term = _common * typed_ndt_8_51[i].t / t
    add_term(&out_phir_t, &term, &comp_phir_t)
    term = _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    term = _common * _c4 * typed_ndt_8_51[i].t / t
    add_term(&out_phir_dt, &term, &comp_phir_dt)
  _c1 = d * d * d
  _c1 *= -_c1
  _c2 = exp(_c1)
  _c_coeff = 6.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(40,44):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    term = _common
    add_term(&out_phir, &term, &comp_phir)
    term = _common * _c4
    add_term(&out_phir_d, &term, &comp_phir_d)
    term = _common * (_c4 * (_c4 - 1.0/d) + _c3)
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    term = _common * typed_ndt_8_51[i].t / t
    add_term(&out_phir_t, &term, &comp_phir_t)
    term = _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    term = _common * _c4 * typed_ndt_8_51[i].t / t
    add_term(&out_phir_dt, &term, &comp_phir_dt)
  
  # Terms with 1-indices 52 to 54 are Gaussian terms. Factors with coefficients
  # that are shared across all terms are computed in the preamble.
  cdef DTYPE_t _c5
  # Compute Gaussian terms for 1-indices 52 to 54
  _c1 = d - eps_res52_54[0]     # d_shift
  _c4 = d_res[51] - 2.0 * alpha_res52_54[0] * d * _c1
  _c5 = d * (-2.0 * alpha_res52_54[0]
      + 4.0 * alpha_res52_54[0] * alpha_res52_54[0]
        * _c1 * _c1
      - 4.0 * d_res[51] * alpha_res52_54[0] / d * _c1
      + d_res[51] * (d_res[51] - 1.0) / (d * d))
  for i in range(51,54):
    # Compute commons    
    _c2 = t - gamma_res52_54[i-51]   # t_shift
    _common = n_res[i] * exp(-alpha_res52_54[i-51] * _c1 * _c1 \
      -beta_res52_54[i-51] * _c2 * _c2) \
      * (d * d # unrolled d ** (d_res[i]-1.0)
        ) * pow_fd(t, t_res_52_54[i-51])
    # Compute d derivative path
    term = _common * d
    add_term(&out_phir, &term, &comp_phir)
    term = _common * _c4
    add_term(&out_phir_d, &term, &comp_phir_d)
    term = _common * _c5
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    # Compute t derivative path
    _c3 = (t_res[i] - 2.0 * beta_res52_54[i-51] * t * _c2) / t
    term = _common * d * _c3
    add_term(&out_phir_t, &term, &comp_phir_t)
    term = _common * d \
      * (_c3 * _c3 - t_res[i]/ (t * t) - 2.0 * beta_res52_54[i-51])
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    # Compute mixed derivative
    term = _common * _c4 * _c3
    add_term(&out_phir_dt, &term, &comp_phir_dt)

  # Terms with 1-indices 55 to 56 are the two nonanalytical terms.  
  # Declare temporary registers
  cdef DTYPE_t _theta
  cdef DTYPE_t _Delta
  cdef DTYPE_t _dDelta
  cdef DTYPE_t _ddDelta
  cdef bint phir_tt_isinf = False
  _c1 = d_quad ** (2.0 / 3.0) # d ** (1/(2 *beta) - 1)
  _c2 = d_quad ** (2.5) # d ** (a - 1)
  _theta = (1.0 - t) + A_res55_56[0] * _c1 * d_quad
  _Delta = _theta*_theta + B_res55_56[0] * _c2 * d_quad
  # Compute d(Delta)/d(delta) divided by (delta - 1.0) for numerical stability
  _dDelta = (A_res55_56[0] * _theta * 2.0 / beta_res55_56[0] * _c1
    + 2.0 * B_res55_56[0] * a_res55_56[0] * _c2)
  # Compute second derivative of Delta
  _c3 = A_res55_56[0] / beta_res55_56[0] * _c1
  _ddDelta = _dDelta + (
    4.0 * B_res55_56[0] * a_res55_56[0] * (a_res55_56[0] - 1.0) * _c2
    + 2.0 * _c3 * _c3 * d_quad
    + 4.0 * _theta * A_res55_56[0] / beta_res55_56[0] \
      * (_exp1_55_56[0] - 1.0) * _c1
  )
  # Finish d(Delta)/d(delta) computation in-place
  _dDelta *= d - 1.0
  for i in range(54,56):
    # Compute factor common to all derivatives
    _common = n_res[i] * exp(-C_res55_56[i-54] * d_quad \
      - D_res55_56[i-54]*(t - 1.0)*(t - 1.0))
    # Replace limiting value of Delta**(b-2) if Delta == 0
    if _Delta != 0.0:
      _common *= _Delta ** (b_res55_56[i-54] - 2.0) # 0.85 to 0.95
    else:
      _common = 0.0

    # Compute d derivative path
    term = _common * d * _Delta * _Delta
    add_term(&out_phir, &term, &comp_phir)
    # Compute phir_d term
    term = _common * _Delta * (
      _Delta * (1.0 - 2.0 * C_res55_56[i-54] * (d-1.0) * d)
      + b_res55_56[i-54] * d * (d-1.0) * (
        A_res55_56[i-54] * _theta * 2.0 / beta_res55_56[i-54] * _c1
        + 2.0 * B_res55_56[i-54] * a_res55_56[i-54] * _c2
      )
    )
    add_term(&out_phir_d, &term, &comp_phir_d)
    # Compute phir_dd term
    _c3 = _Delta*_Delta * (-4.0 * C_res55_56[i-54] * (d-1.0) 
      + d * (2.0*C_res55_56[i-54]*d_quad - 1.0) * 2.0 * C_res55_56[i-54])
    _c3 += _Delta * 2.0 * b_res55_56[i-54] * _dDelta \
      * (1.0 - 2.0 * d * C_res55_56[i-54] * (d - 1.0))
    _c3 += b_res55_56[i-54] * (_Delta * _ddDelta
      + (b_res55_56[i-54] - 1.0) * _dDelta * _dDelta) * d
    term = _c3 * _common
    add_term(&out_phir_dd, &term, &comp_phir_dd)

    # Compute t derivative path
    term = _common * 2.0 * d * (
      -_theta * b_res55_56[i-54] + _Delta * D_res55_56[i-54] * (1.0 - t)
      ) * _Delta
    add_term(&out_phir_t, &term, &comp_phir_t)
    # Compute phir_tt term
    # Replace limiting value if Delta == 0
    if _Delta == 0.0:
      phir_tt_isinf = True    
    term = _common * 2.0 * d * (
      b_res55_56[i-54] * (_Delta \
        + 2.0 * _theta*_theta * (b_res55_56[i-54] - 1.0)
        + 4.0 * _theta * _Delta * D_res55_56[i-54] * (t - 1.0))
      + _Delta * _Delta * D_res55_56[i-54] \
        * (2.0 * D_res55_56[i-54] * (t - 1.0) * (t - 1.0) - 1.0)
    )
    add_term(&out_phir_tt, &term, &comp_phir_tt)

    # Compute mixed derivative
    term = _common * (
      _Delta * _Delta * (-2.0 * D_res55_56[i-54] * (t - 1.0) \
      + d * 4.0 * C_res55_56[i-54] * D_res55_56[i-54] * (d - 1.0) * (t - 1.0))
      + d * _Delta * b_res55_56[i-54] * _dDelta \
        * (-2.0 * D_res55_56[i-54] * (t - 1.0))
      - 2.0 * _theta * b_res55_56[i-54] * _Delta \
        * (1.0 - 2.0 * d * C_res55_56[i-54] * (d - 1.0))
      + d * (
        -A_res55_56[i-54] * b_res55_56[i-54] * 2.0 / beta_res55_56[i-54] \
          * _Delta * (d - 1.0) * _c1
        - 2.0 * _theta * b_res55_56[i-54] * (b_res55_56[i-54] - 1.0) * _dDelta
      )
    )
    add_term(&out_phir_dt, &term, &comp_phir_dt)

  if phir_tt_isinf:
    out_phir_tt = -float("inf")
  return Derivatives_phir_0_1_2(out_phir, out_phir_d, out_phir_dd,
    out_phir_t, out_phir_tt, out_phir_dt)

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef Derivatives_phir_0_1_2 fused_phir_all(DTYPE_t d, DTYPE_t t) noexcept:
  ''' Optimized routine for simultaneously computing all 0th, 1st and 2nd
  derivatives of the residual part of the dimless Helmholtz function
      phi = f/(RT).
  Cython implementation for float input. Typical bottlenecks are computation of
  exp(DTYPE_t, DTYPE_t) and pow(DTYPE_t, DTYPE_t), where DTYPE_t is a floating
  point representation. 

  Version with no stable summation.
  '''
  cdef DTYPE_t out_phir    = 0.0
  cdef DTYPE_t out_phir_d  = 0.0
  cdef DTYPE_t out_phir_dd = 0.0
  cdef DTYPE_t out_phir_t  = 0.0
  cdef DTYPE_t out_phir_tt = 0.0
  cdef DTYPE_t out_phir_dt = 0.0
  cdef DTYPE_t d_quad = (d - 1.0) * (d - 1.0)
  # Declare temporary registers
  cdef DTYPE_t _c1
  cdef DTYPE_t _c2
  cdef DTYPE_t _c3
  cdef DTYPE_t _c4
  cdef DTYPE_t _c_coeff
  cdef DTYPE_t _common
  cdef unsigned short i
  
  # Compute terms with 1-indices 1 to 7 (0-indices 0 to 6), partially unrolled
  #   Access coefficient array in order, but optimizes out some operator** calls
  #   Loops are identical up to t ** typed_ndt_1_7[i].t changed for t in some.
  for i in range(2):
    # Compute common factors, requiring pow(double, double)
    _common = typed_ndt_1_7[i].n * pow_fd(d, typed_ndt_1_7[i].d) \
      * (t ** typed_ndt_1_7[i].t)
    # Cache intermediate result phir_d
    _c1 = typed_ndt_1_7[i].d * _common / d
    # Compute output terms
    out_phir += _common
    out_phir_d += _c1
    out_phir_dd += (typed_ndt_1_7[i].d - 1) * _c1 / d
    out_phir_t += _common * typed_ndt_1_7[i].t / t
    out_phir_tt += _common * typed_ndt_1_7[i].t \
      * (typed_ndt_1_7[i].t - 1.0) / (t*t)
    out_phir_dt += _c1 * typed_ndt_1_7[i].t / t
  for i in range(2,3):
    # Compute common factors, requiring pow(double, double)
    _common = typed_ndt_1_7[i].n * pow_fd(d, typed_ndt_1_7[i].d) \
      * t
    # Cache intermediate result phir_d
    _c1 = typed_ndt_1_7[i].d * _common / d
    # Compute output terms
    out_phir += _common
    out_phir_d += _c1
    out_phir_dd += (typed_ndt_1_7[i].d - 1) * _c1 / d
    out_phir_t += _common * typed_ndt_1_7[i].t / t
    out_phir_tt += _common * typed_ndt_1_7[i].t \
      * (typed_ndt_1_7[i].t - 1.0) / (t*t)
    out_phir_dt += _c1 * typed_ndt_1_7[i].t / t
  for i in range(3,6):
    # Compute common factors, requiring pow(double, double)
    _common = typed_ndt_1_7[i].n * pow_fd(d, typed_ndt_1_7[i].d) \
      * (t ** typed_ndt_1_7[i].t)
    # Cache intermediate result phir_d
    _c1 = typed_ndt_1_7[i].d * _common / d
    # Compute output terms
    out_phir += _common
    out_phir_d += _c1
    out_phir_dd += (typed_ndt_1_7[i].d - 1) * _c1 / d
    out_phir_t += _common * typed_ndt_1_7[i].t / t
    out_phir_tt += _common * typed_ndt_1_7[i].t \
      * (typed_ndt_1_7[i].t - 1.0) / (t*t)
    out_phir_dt += _c1 * typed_ndt_1_7[i].t / t
  for i in range(6,7):
    # Compute common factors, requiring pow(double, double)
    _common = typed_ndt_1_7[i].n * pow_fd(d, typed_ndt_1_7[i].d) \
      * t
    # Cache intermediate result phir_d
    _c1 = typed_ndt_1_7[i].d * _common / d
    # Compute output terms
    out_phir += _common
    out_phir_d += _c1
    out_phir_dd += (typed_ndt_1_7[i].d - 1) * _c1 / d
    out_phir_t += _common * typed_ndt_1_7[i].t / t
    out_phir_tt += _common * typed_ndt_1_7[i].t \
      * (typed_ndt_1_7[i].t - 1.0) / (t*t)
    out_phir_dt += _c1 * typed_ndt_1_7[i].t / t
  
  # Terms with 1-indices 8 to 51 are unrolled by value of coefficient c_coeff
  #   range(7,22) -> 1
  #   range(22,42) -> 2
  #   range(42,46) -> 3
  #   range(46,47) -> 4
  #   range(47,51) -> 6
  # allowing evaluating d**c using pow_fd(double, int). Loops are identical,
  # with a different preamble for setting _c1, _c2, _c_coeff.
  _c1 = -d
  _c2 = exp(_c1)
  _c_coeff = 1.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(0,15):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir += _common
    out_phir_d += _common * _c4
    out_phir_dd += _common * (_c4 * (_c4 - 1.0/d) + _c3)
    out_phir_t += _common * typed_ndt_8_51[i].t / t
    out_phir_tt += _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    out_phir_dt += _common * _c4 * typed_ndt_8_51[i].t / t
  _c1 = -d * d
  _c2 = exp(_c1)
  _c_coeff = 2.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(15,35):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir += _common
    out_phir_d += _common * _c4
    out_phir_dd += _common * (_c4 * (_c4 - 1.0/d) + _c3)
    out_phir_t += _common * typed_ndt_8_51[i].t / t
    out_phir_tt += _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    out_phir_dt += _common * _c4 * typed_ndt_8_51[i].t / t
  _c1 = -d * d * d
  _c2 = exp(_c1)
  _c_coeff = 3.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(35,39):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir += _common
    out_phir_d += _common * _c4
    out_phir_dd += _common * (_c4 * (_c4 - 1.0/d) + _c3)
    out_phir_t += _common * typed_ndt_8_51[i].t / t
    out_phir_tt += _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    out_phir_dt += _common * _c4 * typed_ndt_8_51[i].t / t
  _c1 = d * d
  _c1 *= -_c1
  _c2 = exp(_c1)
  _c_coeff = 4.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(39,40):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir += _common
    out_phir_d += _common * _c4
    out_phir_dd += _common * (_c4 * (_c4 - 1.0/d) + _c3)
    out_phir_t += _common * typed_ndt_8_51[i].t / t
    out_phir_tt += _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    out_phir_dt += _common * _c4 * typed_ndt_8_51[i].t / t
  _c1 = d * d * d
  _c1 *= -_c1
  _c2 = exp(_c1)
  _c_coeff = 6.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(40,44):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir += _common
    out_phir_d += _common * _c4
    out_phir_dd += _common * (_c4 * (_c4 - 1.0/d) + _c3)
    out_phir_t += _common * typed_ndt_8_51[i].t / t
    out_phir_tt += _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    out_phir_dt += _common * _c4 * typed_ndt_8_51[i].t / t
  
  # Terms with 1-indices 52 to 54 are Gaussian terms. Factors with coefficients
  # that are shared across all terms are computed in the preamble.
  cdef DTYPE_t _c5
  # Compute Gaussian terms for 1-indices 52 to 54
  _c1 = d - eps_res52_54[0]     # d_shift
  _c4 = d_res[51] - 2.0 * alpha_res52_54[0] * d * _c1
  _c5 = d * (-2.0 * alpha_res52_54[0]
      + 4.0 * alpha_res52_54[0] * alpha_res52_54[0]
        * _c1 * _c1
      - 4.0 * d_res[51] * alpha_res52_54[0] / d * _c1
      + d_res[51] * (d_res[51] - 1.0) / (d * d))
  for i in range(51,54):
    # Compute commons    
    _c2 = t - gamma_res52_54[i-51]   # t_shift
    _common = n_res[i] * exp(-alpha_res52_54[i-51] * _c1 * _c1 \
      -beta_res52_54[i-51] * _c2 * _c2) \
      * (d * d # unrolled d ** (d_res[i]-1.0)
        ) * pow_fd(t, t_res_52_54[i-51])
    # Compute d derivative path
    out_phir += _common * d
    out_phir_d += _common * _c4
    out_phir_dd += _common * _c5
    # Compute t derivative path
    _c3 = (t_res[i] - 2.0 * beta_res52_54[i-51] * t * _c2) / t
    out_phir_t += _common * d * _c3
    out_phir_tt += _common * d \
      * (_c3 * _c3 - t_res[i]/ (t * t) - 2.0 * beta_res52_54[i-51])
    # Compute mixed derivative
    out_phir_dt += _common * _c4 * _c3

  # Terms with 1-indices 55 to 56 are the two nonanalytical terms.  
  # Declare temporary registers
  cdef DTYPE_t _theta
  cdef DTYPE_t _Delta
  cdef DTYPE_t _dDelta
  cdef DTYPE_t _ddDelta
  cdef bint phir_tt_isinf = False
  _c1 = d_quad ** (2.0 / 3.0) # d ** (1/(2 *beta) - 1)
  _c2 = d_quad ** (2.5) # d ** (a - 1)
  _theta = (1.0 - t) + A_res55_56[0] * _c1 * d_quad
  _Delta = _theta*_theta + B_res55_56[0] * _c2 * d_quad
  # Compute d(Delta)/d(delta) divided by (delta - 1.0) for numerical stability
  _dDelta = (A_res55_56[0] * _theta * 2.0 / beta_res55_56[0] * _c1
    + 2.0 * B_res55_56[0] * a_res55_56[0] * _c2)
  # Compute second derivative of Delta
  _c3 = A_res55_56[0] / beta_res55_56[0] * _c1
  _ddDelta = _dDelta + (
    4.0 * B_res55_56[0] * a_res55_56[0] * (a_res55_56[0] - 1.0) * _c2
    + 2.0 * _c3 * _c3 * d_quad
    + 4.0 * _theta * A_res55_56[0] / beta_res55_56[0] \
      * (_exp1_55_56[0] - 1.0) * _c1
  )
  # Finish d(Delta)/d(delta) computation in-place
  _dDelta *= d - 1.0
  for i in range(54,56):
    # Compute factor common to all derivatives
    _common = n_res[i] * exp(-C_res55_56[i-54] * d_quad \
      - D_res55_56[i-54]*(t - 1.0)*(t - 1.0))
    # Replace limiting value of Delta**(b-2) if Delta == 0
    if _Delta != 0.0:
      _common *= _Delta ** (b_res55_56[i-54] - 2.0) # 0.85 to 0.95
    else:
      _common = 0.0

    # Compute d derivative path
    out_phir += _common * d * _Delta * _Delta
    # Compute phir_d term
    out_phir_d += _common * _Delta * (
      _Delta * (1.0 - 2.0 * C_res55_56[i-54] * (d-1.0) * d)
      + b_res55_56[i-54] * d * (d-1.0) * (
        A_res55_56[i-54] * _theta * 2.0 / beta_res55_56[i-54] * _c1
        + 2.0 * B_res55_56[i-54] * a_res55_56[i-54] * _c2
      )
    )
    # Compute phir_dd term
    _c3 = _Delta*_Delta * (-4.0 * C_res55_56[i-54] * (d-1.0) 
      + d * (2.0*C_res55_56[i-54]*d_quad - 1.0) * 2.0 * C_res55_56[i-54])
    _c3 += _Delta * 2.0 * b_res55_56[i-54] * _dDelta \
      * (1.0 - 2.0 * d * C_res55_56[i-54] * (d - 1.0))
    _c3 += b_res55_56[i-54] * (_Delta * _ddDelta
      + (b_res55_56[i-54] - 1.0) * _dDelta * _dDelta) * d
    out_phir_dd += _c3 * _common

    # Compute t derivative path
    out_phir_t += _common * 2.0 * d * (
      -_theta * b_res55_56[i-54] + _Delta * D_res55_56[i-54] * (1.0 - t)
      ) * _Delta
    # Compute phir_tt term
    # Replace limiting value if Delta == 0
    if _Delta == 0.0:
      phir_tt_isinf = True    
    out_phir_tt += _common * 2.0 * d * (
      b_res55_56[i-54] * (_Delta \
        + 2.0 * _theta*_theta * (b_res55_56[i-54] - 1.0)
        + 4.0 * _theta * _Delta * D_res55_56[i-54] * (t - 1.0))
      + _Delta * _Delta * D_res55_56[i-54] \
        * (2.0 * D_res55_56[i-54] * (t - 1.0) * (t - 1.0) - 1.0)
    )

    # Compute mixed derivative
    out_phir_dt += _common * (
      _Delta * _Delta * (-2.0 * D_res55_56[i-54] * (t - 1.0) \
      + d * 4.0 * C_res55_56[i-54] * D_res55_56[i-54] * (d - 1.0) * (t - 1.0))
      + d * _Delta * b_res55_56[i-54] * _dDelta \
        * (-2.0 * D_res55_56[i-54] * (t - 1.0))
      - 2.0 * _theta * b_res55_56[i-54] * _Delta \
        * (1.0 - 2.0 * d * C_res55_56[i-54] * (d - 1.0))
      + d * (
        -A_res55_56[i-54] * b_res55_56[i-54] * 2.0 / beta_res55_56[i-54] \
          * _Delta * (d - 1.0) * _c1
        - 2.0 * _theta * b_res55_56[i-54] * (b_res55_56[i-54] - 1.0) * _dDelta
      )
    )

  if phir_tt_isinf:
    out_phir_tt = -float("inf")
  return Derivatives_phir_0_1_2(out_phir, out_phir_d, out_phir_dd,
    out_phir_t, out_phir_tt, out_phir_dt)

@cython.boundscheck(True)
@cython.wraparound(True)
@cython.nonecheck(True)
@cython.cdivision(False)
cpdef fused_phir_debug(DTYPE_t d, DTYPE_t t):
  ''' Returns phir and its <= 2nd derivatives as well as the terms that
  constitute the sum, as well as the final value of the compensation 
  variables. '''
  cdef DTYPE_t out_phir    = 0.0
  cdef DTYPE_t out_phir_d  = 0.0
  cdef DTYPE_t out_phir_dd = 0.0
  cdef DTYPE_t out_phir_t  = 0.0
  cdef DTYPE_t out_phir_tt = 0.0
  cdef DTYPE_t out_phir_dt = 0.0
  # Terms array
  cdef DTYPE_t arr_phir[56]
  cdef DTYPE_t arr_phir_d[56]
  cdef DTYPE_t arr_phir_dd[56]
  cdef DTYPE_t arr_phir_t[56]
  cdef DTYPE_t arr_phir_tt[56]
  cdef DTYPE_t arr_phir_dt[56]
  # Summation compensation variables
  cdef DTYPE_t comp_phir    = 0.0
  cdef DTYPE_t comp_phir_d  = 0.0
  cdef DTYPE_t comp_phir_dd = 0.0
  cdef DTYPE_t comp_phir_t  = 0.0
  cdef DTYPE_t comp_phir_tt = 0.0
  cdef DTYPE_t comp_phir_dt = 0.0
  cdef DTYPE_t term
  cdef DTYPE_t d_quad = (d - 1.0) * (d - 1.0)
  # Declare temporary registers
  cdef DTYPE_t _c1
  cdef DTYPE_t _c2
  cdef DTYPE_t _c3
  cdef DTYPE_t _c4
  cdef DTYPE_t _c_coeff
  cdef DTYPE_t _common
  cdef unsigned short i
  
  # Compute terms with 1-indices 1 to 7 (0-indices 0 to 6), partially unrolled
  #   Access coefficient array in order, but optimizes out some operator** calls
  #   Loops are identical up to t ** typed_ndt_1_7[i].t changed for t in some.
  for i in range(2):
    # Compute common factors, requiring pow(double, double)
    _common = typed_ndt_1_7[i].n * pow_fd(d, typed_ndt_1_7[i].d) \
      * (t ** typed_ndt_1_7[i].t)
    # Cache intermediate result phir_d
    _c1 = typed_ndt_1_7[i].d * _common / d
    # Compute output terms
    term = _common
    add_term(&out_phir, &term, &comp_phir)
    arr_phir[i] = term
    term = _c1
    add_term(&out_phir_d, &term, &comp_phir_d)
    arr_phir_d[i] = term
    term = (typed_ndt_1_7[i].d - 1) * _c1 / d
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    arr_phir_dd[i] = term
    term = _common * typed_ndt_1_7[i].t / t
    add_term(&out_phir_t, &term, &comp_phir_t)
    arr_phir_t[i] = term
    term = _common * typed_ndt_1_7[i].t \
      * (typed_ndt_1_7[i].t - 1.0) / (t*t)
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    arr_phir_tt[i] = term
    term = _c1 * typed_ndt_1_7[i].t / t
    add_term(&out_phir_dt, &term, &comp_phir_dt)
    arr_phir_dt[i] = term
  for i in range(2,3):
    # Compute common factors, requiring pow(double, double)
    _common = typed_ndt_1_7[i].n * pow_fd(d, typed_ndt_1_7[i].d) \
      * t
    # Cache intermediate result phir_d
    _c1 = typed_ndt_1_7[i].d * _common / d
    # Compute output terms
    term = _common
    add_term(&out_phir, &term, &comp_phir)
    arr_phir[i] = term
    term = _c1
    add_term(&out_phir_d, &term, &comp_phir_d)
    arr_phir_d[i] = term
    term = (typed_ndt_1_7[i].d - 1) * _c1 / d
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    arr_phir_dd[i] = term
    term = _common * typed_ndt_1_7[i].t / t
    add_term(&out_phir_t, &term, &comp_phir_t)
    arr_phir_t[i] = term
    term = _common * typed_ndt_1_7[i].t \
      * (typed_ndt_1_7[i].t - 1.0) / (t*t)
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    arr_phir_tt[i] = term
    term = _c1 * typed_ndt_1_7[i].t / t
    add_term(&out_phir_dt, &term, &comp_phir_dt)
    arr_phir_dt[i] = term
  for i in range(3,6):
    # Compute common factors, requiring pow(double, double)
    _common = typed_ndt_1_7[i].n * pow_fd(d, typed_ndt_1_7[i].d) \
      * (t ** typed_ndt_1_7[i].t)
    # Cache intermediate result phir_d
    _c1 = typed_ndt_1_7[i].d * _common / d
    # Compute output terms
    term = _common
    add_term(&out_phir, &term, &comp_phir)
    arr_phir[i] = term
    term = _c1
    add_term(&out_phir_d, &term, &comp_phir_d)
    arr_phir_d[i] = term
    term = (typed_ndt_1_7[i].d - 1) * _c1 / d
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    arr_phir_dd[i] = term
    term = _common * typed_ndt_1_7[i].t / t
    add_term(&out_phir_t, &term, &comp_phir_t)
    arr_phir_t[i] = term
    term = _common * typed_ndt_1_7[i].t \
      * (typed_ndt_1_7[i].t - 1.0) / (t*t)
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    arr_phir_tt[i] = term
    term = _c1 * typed_ndt_1_7[i].t / t
    add_term(&out_phir_dt, &term, &comp_phir_dt)
    arr_phir_dt[i] = term
  for i in range(6,7):
    # Compute common factors, requiring pow(double, double)
    _common = typed_ndt_1_7[i].n * pow_fd(d, typed_ndt_1_7[i].d) \
      * t
    # Cache intermediate result phir_d
    _c1 = typed_ndt_1_7[i].d * _common / d
    # Compute output terms
    term = _common
    add_term(&out_phir, &term, &comp_phir)
    arr_phir[i] = term
    term = _c1
    add_term(&out_phir_d, &term, &comp_phir_d)
    arr_phir_d[i] = term
    term = (typed_ndt_1_7[i].d - 1) * _c1 / d
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    arr_phir_dd[i] = term
    term = _common * typed_ndt_1_7[i].t / t
    add_term(&out_phir_t, &term, &comp_phir_t)
    arr_phir_t[i] = term
    term = _common * typed_ndt_1_7[i].t \
      * (typed_ndt_1_7[i].t - 1.0) / (t*t)
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    arr_phir_tt[i] = term
    term = _c1 * typed_ndt_1_7[i].t / t
    add_term(&out_phir_dt, &term, &comp_phir_dt)
    arr_phir_dt[i] = term
  
  # Terms with 1-indices 8 to 51 are unrolled by value of coefficient c_coeff
  #   range(7,22) -> 1
  #   range(22,42) -> 2
  #   range(42,46) -> 3
  #   range(46,47) -> 4
  #   range(47,51) -> 6
  # allowing evaluating d**c using pow_fd(double, int). Loops are identical,
  # with a different preamble for setting _c1, _c2, _c_coeff.
  _c1 = -d
  _c2 = exp(_c1)
  _c_coeff = 1.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(0,15):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    term = _common
    add_term(&out_phir, &term, &comp_phir)
    arr_phir[i+7] = term
    term = _common * _c4
    add_term(&out_phir_d, &term, &comp_phir_d)
    arr_phir_d[i+7] = term
    term = _common * (_c4 * (_c4 - 1.0/d) + _c3)
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    arr_phir_dd[i+7] = term
    term = _common * typed_ndt_8_51[i].t / t
    add_term(&out_phir_t, &term, &comp_phir_t)
    arr_phir_t[i+7] = term
    term = _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    arr_phir_tt[i+7] = term
    term = _common * _c4 * typed_ndt_8_51[i].t / t
    add_term(&out_phir_dt, &term, &comp_phir_dt)
    arr_phir_dt[i+7] = term
  _c1 = -d * d
  _c2 = exp(_c1)
  _c_coeff = 2.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(15,35):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    term = _common
    add_term(&out_phir, &term, &comp_phir)
    arr_phir[i+7] = term
    term = _common * _c4
    add_term(&out_phir_d, &term, &comp_phir_d)
    arr_phir_d[i+7] = term
    term = _common * (_c4 * (_c4 - 1.0/d) + _c3)
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    arr_phir_dd[i+7] = term
    term = _common * typed_ndt_8_51[i].t / t
    add_term(&out_phir_t, &term, &comp_phir_t)
    arr_phir_t[i+7] = term
    term = _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    arr_phir_tt[i+7] = term
    term = _common * _c4 * typed_ndt_8_51[i].t / t
    add_term(&out_phir_dt, &term, &comp_phir_dt)
    arr_phir_dt[i+7] = term
  _c1 = -d * d * d
  _c2 = exp(_c1)
  _c_coeff = 3.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(35,39):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    term = _common
    add_term(&out_phir, &term, &comp_phir)
    arr_phir[i+7] = term
    term = _common * _c4
    add_term(&out_phir_d, &term, &comp_phir_d)
    arr_phir_d[i+7] = term
    term = _common * (_c4 * (_c4 - 1.0/d) + _c3)
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    arr_phir_dd[i+7] = term
    term = _common * typed_ndt_8_51[i].t / t
    add_term(&out_phir_t, &term, &comp_phir_t)
    arr_phir_t[i+7] = term
    term = _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    arr_phir_tt[i+7] = term
    term = _common * _c4 * typed_ndt_8_51[i].t / t
    add_term(&out_phir_dt, &term, &comp_phir_dt)
    arr_phir_dt[i+7] = term
  _c1 = d * d
  _c1 *= -_c1
  _c2 = exp(_c1)
  _c_coeff = 4.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(39,40):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    term = _common
    add_term(&out_phir, &term, &comp_phir)
    arr_phir[i+7] = term
    term = _common * _c4
    add_term(&out_phir_d, &term, &comp_phir_d)
    arr_phir_d[i+7] = term
    term = _common * (_c4 * (_c4 - 1.0/d) + _c3)
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    arr_phir_dd[i+7] = term
    term = _common * typed_ndt_8_51[i].t / t
    add_term(&out_phir_t, &term, &comp_phir_t)
    arr_phir_t[i+7] = term
    term = _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    arr_phir_tt[i+7] = term
    term = _common * _c4 * typed_ndt_8_51[i].t / t
    add_term(&out_phir_dt, &term, &comp_phir_dt)
    arr_phir_dt[i+7] = term
  _c1 = d * d * d
  _c1 *= -_c1
  _c2 = exp(_c1)
  _c_coeff = 6.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(40,44):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    term = _common
    add_term(&out_phir, &term, &comp_phir)
    arr_phir[i+7] = term
    term = _common * _c4
    add_term(&out_phir_d, &term, &comp_phir_d)
    arr_phir_d[i+7] = term
    term = _common * (_c4 * (_c4 - 1.0/d) + _c3)
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    arr_phir_dd[i+7] = term
    term = _common * typed_ndt_8_51[i].t / t
    add_term(&out_phir_t, &term, &comp_phir_t)
    arr_phir_t[i+7] = term
    term = _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    arr_phir_tt[i+7] = term
    term = _common * _c4 * typed_ndt_8_51[i].t / t
    add_term(&out_phir_dt, &term, &comp_phir_dt)
    arr_phir_dt[i+7] = term
  
  # Terms with 1-indices 52 to 54 are Gaussian terms. Factors with coefficients
  # that are shared across all terms are computed in the preamble.
  cdef DTYPE_t _c5
  # Compute Gaussian terms for 1-indices 52 to 54
  _c1 = d - eps_res52_54[0]     # d_shift
  _c4 = d_res[51] - 2.0 * alpha_res52_54[0] * d * _c1
  _c5 = d * (-2.0 * alpha_res52_54[0]
      + 4.0 * alpha_res52_54[0] * alpha_res52_54[0]
        * _c1 * _c1
      - 4.0 * d_res[51] * alpha_res52_54[0] / d * _c1
      + d_res[51] * (d_res[51] - 1.0) / (d * d))
  for i in range(51,54):
    # Compute commons    
    _c2 = t - gamma_res52_54[i-51]   # t_shift
    _common = n_res[i] * exp(-alpha_res52_54[i-51] * _c1 * _c1 \
      -beta_res52_54[i-51] * _c2 * _c2) \
      * (d * d # unrolled d ** (d_res[i]-1.0)
        ) * pow_fd(t, t_res_52_54[i-51])
    # Compute d derivative path
    term = _common * d
    add_term(&out_phir, &term, &comp_phir)
    arr_phir[i] = term
    term = _common * _c4
    add_term(&out_phir_d, &term, &comp_phir_d)
    arr_phir_d[i] = term
    term = _common * _c5
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    arr_phir_dd[i] = term
    # Compute t derivative path
    _c3 = (t_res[i] - 2.0 * beta_res52_54[i-51] * t * _c2) / t
    term = _common * d * _c3
    add_term(&out_phir_t, &term, &comp_phir_t)
    arr_phir_t[i] = term
    term = _common * d \
      * (_c3 * _c3 - t_res[i]/ (t * t) - 2.0 * beta_res52_54[i-51])
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    arr_phir_tt[i] = term
    # Compute mixed derivative
    term = _common * _c4 * _c3
    add_term(&out_phir_dt, &term, &comp_phir_dt)
    arr_phir_dt[i] = term

  # Terms with 1-indices 55 to 56 are the two nonanalytical terms.  
  # Declare temporary registers
  cdef DTYPE_t _theta
  cdef DTYPE_t _Delta
  cdef DTYPE_t _dDelta
  cdef DTYPE_t _ddDelta
  cdef bint phir_tt_isinf = False
  _c1 = d_quad ** (2.0 / 3.0) # d ** (1/(2 *beta) - 1)
  _c2 = d_quad ** (2.5) # d ** (a - 1)
  _theta = (1.0 - t) + A_res55_56[0] * _c1 * d_quad
  _Delta = _theta*_theta + B_res55_56[0] * _c2 * d_quad
  # Compute d(Delta)/d(delta) divided by (delta - 1.0) for numerical stability
  _dDelta = (A_res55_56[0] * _theta * 2.0 / beta_res55_56[0] * _c1
    + 2.0 * B_res55_56[0] * a_res55_56[0] * _c2)
  # Compute second derivative of Delta
  _c3 = A_res55_56[0] / beta_res55_56[0] * _c1
  _ddDelta = _dDelta + (
    4.0 * B_res55_56[0] * a_res55_56[0] * (a_res55_56[0] - 1.0) * _c2
    + 2.0 * _c3 * _c3 * d_quad
    + 4.0 * _theta * A_res55_56[0] / beta_res55_56[0] \
      * (_exp1_55_56[0] - 1.0) * _c1
  )
  # Finish d(Delta)/d(delta) computation in-place
  _dDelta *= d - 1.0
  for i in range(54,56):
    # Compute factor common to all derivatives
    _common = n_res[i] * exp(-C_res55_56[i-54] * d_quad \
      - D_res55_56[i-54]*(t - 1.0)*(t - 1.0))
    # Replace limiting value of Delta**(b-2) if Delta == 0
    if _Delta != 0.0:
      _common *= _Delta ** (b_res55_56[i-54] - 2.0) # 0.85 to 0.95
    else:
      _common = 0.0

    # Compute d derivative path
    term = _common * d * _Delta * _Delta
    add_term(&out_phir, &term, &comp_phir)
    arr_phir[i] = term
    # Compute phir_d term
    term = _common * _Delta * (
      _Delta * (1.0 - 2.0 * C_res55_56[i-54] * (d-1.0) * d)
      + b_res55_56[i-54] * d * (d-1.0) * (
        A_res55_56[i-54] * _theta * 2.0 / beta_res55_56[i-54] * _c1
        + 2.0 * B_res55_56[i-54] * a_res55_56[i-54] * _c2
      )
    )
    arr_phir_d[i] = term
    add_term(&out_phir_d, &term, &comp_phir_d)
    # Compute phir_dd term
    _c3 = _Delta*_Delta * (-4.0 * C_res55_56[i-54] * (d-1.0) 
      + d * (2.0*C_res55_56[i-54]*d_quad - 1.0) * 2.0 * C_res55_56[i-54])
    _c3 += _Delta * 2.0 * b_res55_56[i-54] * _dDelta \
      * (1.0 - 2.0 * d * C_res55_56[i-54] * (d - 1.0))
    _c3 += b_res55_56[i-54] * (_Delta * _ddDelta
      + (b_res55_56[i-54] - 1.0) * _dDelta * _dDelta) * d
    term = _c3 * _common
    add_term(&out_phir_dd, &term, &comp_phir_dd)
    arr_phir_dd[i] = term

    # Compute t derivative path
    term = _common * 2.0 * d * (
      -_theta * b_res55_56[i-54] + _Delta * D_res55_56[i-54] * (1.0 - t)
      ) * _Delta
    add_term(&out_phir_t, &term, &comp_phir_t)
    arr_phir_t[i] = term
    # Compute phir_tt term
    # Replace limiting value if Delta == 0
    if _Delta == 0.0:
      phir_tt_isinf = True    
    term = _common * 2.0 * d * (
      b_res55_56[i-54] * (_Delta \
        + 2.0 * _theta*_theta * (b_res55_56[i-54] - 1.0)
        + 4.0 * _theta * _Delta * D_res55_56[i-54] * (t - 1.0))
      + _Delta * _Delta * D_res55_56[i-54] \
        * (2.0 * D_res55_56[i-54] * (t - 1.0) * (t - 1.0) - 1.0)
    )
    add_term(&out_phir_tt, &term, &comp_phir_tt)
    arr_phir_tt[i] = term

    # Compute mixed derivative
    term = _common * (
      _Delta * _Delta * (-2.0 * D_res55_56[i-54] * (t - 1.0) \
      + d * 4.0 * C_res55_56[i-54] * D_res55_56[i-54] * (d - 1.0) * (t - 1.0))
      + d * _Delta * b_res55_56[i-54] * _dDelta \
        * (-2.0 * D_res55_56[i-54] * (t - 1.0))
      - 2.0 * _theta * b_res55_56[i-54] * _Delta \
        * (1.0 - 2.0 * d * C_res55_56[i-54] * (d - 1.0))
      + d * (
        -A_res55_56[i-54] * b_res55_56[i-54] * 2.0 / beta_res55_56[i-54] \
          * _Delta * (d - 1.0) * _c1
        - 2.0 * _theta * b_res55_56[i-54] * (b_res55_56[i-54] - 1.0) * _dDelta
      )
    )
    add_term(&out_phir_dt, &term, &comp_phir_dt)
    arr_phir_dt[i] = term

  if phir_tt_isinf:
    out_phir_tt = -float("inf")
  return Derivatives_phir_0_1_2(out_phir, out_phir_d, out_phir_dd,
    out_phir_t, out_phir_tt, out_phir_dt), {
      "arr_phir": arr_phir,
      "arr_phir_d": arr_phir_d,
      "arr_phir_dd": arr_phir_dd,
      "arr_phir_t": arr_phir_t,
      "arr_phir_tt": arr_phir_tt,
      "arr_phir_dt": arr_phir_dt,
      "comp_phir": comp_phir,
      "comp_phir_d": comp_phir_d,
      "comp_phir_dd": comp_phir_dd,
      "comp_phir_t": comp_phir_t,
      "comp_phir_tt": comp_phir_tt,
      "comp_phir_dt": comp_phir_dt,
    }

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef Pair fused_phir_d_phir_dd(DTYPE_t d, DTYPE_t t) noexcept:
  ''' Optimized routine for simultaneously computing only the 1st and 2nd
  d-derivatives of the residual part of the dimless Helmholtz function
      phi = f/(RT).
  '''
  cdef DTYPE_t out_phir_d  = 0.0
  cdef DTYPE_t out_phir_dd = 0.0
  cdef DTYPE_t d_quad = (d - 1.0) * (d - 1.0)
  # Declare temporary registers
  cdef DTYPE_t _c1
  cdef DTYPE_t _c2
  cdef DTYPE_t _c3
  cdef DTYPE_t _c4
  cdef DTYPE_t _c_coeff
  cdef DTYPE_t _common

  cdef unsigned short i
  
  # Compute terms with 1-indices 1 to 7 (0-indices 0 to 6), partially unrolled
  #   Access coefficient array in order, but optimizes out some operator** calls
  #   Loops are identical up to t ** typed_ndt_1_7[i].t changed for t in some.
  for i in range(2):
    _c1 = typed_ndt_1_7[i].d * typed_ndt_1_7[i].n \
      * pow_fd(d, typed_ndt_1_7[i].d) \
      * (t ** typed_ndt_1_7[i].t) / d
    out_phir_d += _c1
    out_phir_dd += (typed_ndt_1_7[i].d - 1) * _c1 / d
  for i in range(2,3):
    _c1 = typed_ndt_1_7[i].d * typed_ndt_1_7[i].n \
      * pow_fd(d, typed_ndt_1_7[i].d) \
      * t / d
    out_phir_d += _c1
    out_phir_dd += (typed_ndt_1_7[i].d - 1) * _c1 / d
  for i in range(3,6):
    _c1 = typed_ndt_1_7[i].d * typed_ndt_1_7[i].n \
      * pow_fd(d, typed_ndt_1_7[i].d) \
      * (t ** typed_ndt_1_7[i].t) / d
    out_phir_d += _c1
    out_phir_dd += (typed_ndt_1_7[i].d - 1) * _c1 / d
  for i in range(6,7):
    _c1 = typed_ndt_1_7[i].d * typed_ndt_1_7[i].n \
      * pow_fd(d, typed_ndt_1_7[i].d) \
      * t / d
    out_phir_d += _c1
    out_phir_dd += (typed_ndt_1_7[i].d - 1) * _c1 / d
  
  # Terms with 1-indices 8 to 51 are unrolled by value of coefficient c_coeff
  #   range(7,22) -> 1
  #   range(22,42) -> 2
  #   range(42,46) -> 3
  #   range(46,47) -> 4
  #   range(47,51) -> 6
  # allowing evaluating d**c using pow_fd(double, int). Loops are identical,
  # with a different preamble for setting _c1, _c2, _c_coeff.
  _c1 = -d
  _c2 = exp(_c1)
  _c_coeff = 1.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(0,15):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir_d += _common * _c4
    out_phir_dd += _common * (_c4 * (_c4 - 1.0/d) + _c3)
  _c1 = -d * d
  _c2 = exp(_c1)
  _c_coeff = 2.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(15,35):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir_d += _common * _c4
    out_phir_dd += _common * (_c4 * (_c4 - 1.0/d) + _c3)
  _c1 = -d * d * d
  _c2 = exp(_c1)
  _c_coeff = 3.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(35,39):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir_d += _common * _c4
    out_phir_dd += _common * (_c4 * (_c4 - 1.0/d) + _c3)
  _c1 = d * d
  _c1 *= -_c1
  _c2 = exp(_c1)
  _c_coeff = 4.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(39,40):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir_d += _common * _c4
    out_phir_dd += _common * (_c4 * (_c4 - 1.0/d) + _c3)
  _c1 = d * d * d
  _c1 *= -_c1
  _c2 = exp(_c1)
  _c_coeff = 6.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(40,44):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir_d += _common * _c4
    out_phir_dd += _common * (_c4 * (_c4 - 1.0/d) + _c3)
  
  # Terms with 1-indices 52 to 54 are Gaussian terms. Factors with coefficients
  # that are shared across all terms are computed in the preamble.
  cdef DTYPE_t _c5
  # Compute Gaussian terms for 1-indices 52 to 54
  _c1 = d - eps_res52_54[0]     # d_shift
  _c4 = d_res[51] - 2.0 * alpha_res52_54[0] * d * _c1
  _c5 = d * (-2.0 * alpha_res52_54[0]
      + 4.0 * alpha_res52_54[0] * alpha_res52_54[0]
        * _c1 * _c1
      - 4.0 * d_res[51] * alpha_res52_54[0] / d * _c1
      + d_res[51] * (d_res[51] - 1.0) / (d * d))
  for i in range(51,54):
    # Compute commons    
    _c2 = t - gamma_res52_54[i-51]   # t_shift
    _common = n_res[i] * exp(-alpha_res52_54[i-51] * _c1 * _c1 \
      -beta_res52_54[i-51] * _c2 * _c2) \
      * (d * d # unrolled d ** (d_res[i]-1.0)
        ) * pow_fd(t, t_res_52_54[i-51])
    # Compute d derivative path
    out_phir_d += _common * _c4
    out_phir_dd += _common * _c5

  # Terms with 1-indices 55 to 56 are the two nonanalytical terms.  
  # Declare temporary registers
  cdef DTYPE_t _theta
  cdef DTYPE_t _Delta
  cdef DTYPE_t _dDelta
  cdef DTYPE_t _ddDelta
  _c1 = d_quad ** (2.0 / 3.0) # d ** (1/(2 *beta) - 1)
  _c2 = d_quad ** (2.5) # d ** (a - 1)
  _theta = (1.0 - t) + A_res55_56[0] * _c1 * d_quad
  _Delta = _theta*_theta + B_res55_56[0] * _c2 * d_quad
  # Compute d(Delta)/d(delta) divided by (delta - 1.0) for numerical stability
  _dDelta = (A_res55_56[0] * _theta * 2.0 / beta_res55_56[0] * _c1
    + 2.0 * B_res55_56[0] * a_res55_56[0] * _c2)
  # Compute second derivative of Delta
  _c3 = A_res55_56[0] / beta_res55_56[0] * _c1
  _ddDelta = _dDelta + (
    4.0 * B_res55_56[0] * a_res55_56[0] * (a_res55_56[0] - 1.0) * _c2
    + 2.0 * _c3 * _c3 * d_quad
    + 4.0 * _theta * A_res55_56[0] / beta_res55_56[0] \
      * (_exp1_55_56[0] - 1.0) * _c1
  )
  # Finish d(Delta)/d(delta) computation in-place
  _dDelta *= d - 1.0
  for i in range(54,56):
    # Compute factor common to all derivatives
    _common = n_res[i] * exp(-C_res55_56[i-54] * d_quad \
      - D_res55_56[i-54]*(t - 1.0)*(t - 1.0))
    # Replace limiting value of Delta**(b-2) if Delta == 0
    if _Delta != 0.0:
      _common *= _Delta ** (b_res55_56[i-54] - 2.0) # 0.85 to 0.95
    else:
      _common = 0.0
    # Compute phir_d term
    out_phir_d += _common * _Delta * (
      _Delta * (1.0 - 2.0 * C_res55_56[i-54] * (d-1.0) * d)
      + b_res55_56[i-54] * d * (d-1.0) * (
        A_res55_56[i-54] * _theta * 2.0 / beta_res55_56[i-54] * _c1
        + 2.0 * B_res55_56[i-54] * a_res55_56[i-54] * _c2
      )
    )
    # Compute phir_dd term
    _c3 = _Delta*_Delta * (-4.0 * C_res55_56[i-54] * (d-1.0) 
      + d * (2.0*C_res55_56[i-54]*d_quad - 1.0) * 2.0 * C_res55_56[i-54])
    _c3 += _Delta * 2.0 * b_res55_56[i-54] * _dDelta \
      * (1.0 - 2.0 * d * C_res55_56[i-54] * (d - 1.0))
    _c3 += b_res55_56[i-54] * (_Delta * _ddDelta
      + (b_res55_56[i-54] - 1.0) * _dDelta * _dDelta) * d
    out_phir_dd += _c3 * _common

  return Pair(out_phir_d, out_phir_dd)

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef Derivatives_phir_d3 fused_phir_d3(DTYPE_t d, DTYPE_t t) noexcept:
  ''' Optimized routine for simultaneously computing the 0th, 1st, 2nd, and 3rd
  d-derivatives of the residual part of the dimless Helmholtz function
      phi = f/(RT).
  This routine may be useful for performing pressure-equilibrium calculations
  that require faster asymptotic convergence than Newton's method.
  '''
  cdef DTYPE_t out_phir  = 0.0
  cdef DTYPE_t out_phir_d  = 0.0
  cdef DTYPE_t out_phir_dd = 0.0
  cdef DTYPE_t out_phir_ddd = 0.0
  cdef DTYPE_t d_quad = (d - 1.0) * (d - 1.0)
  # Declare temporary registers
  cdef DTYPE_t _c1
  cdef DTYPE_t _c2
  cdef DTYPE_t _c3
  cdef DTYPE_t _c4
  cdef DTYPE_t _c5
  cdef DTYPE_t _c6
  cdef DTYPE_t _c_coeff
  cdef DTYPE_t _common

  cdef unsigned short i
  
  # Compute terms with 1-indices 1 to 7 (0-indices 0 to 6), partially unrolled
  #   Access coefficient array in order, but optimizes out some operator** calls
  #   Loops are identical up to t ** typed_ndt_1_7[i].t changed for t in some.
  for i in range(2):
    _c1 = typed_ndt_1_7[i].d * typed_ndt_1_7[i].n \
      * pow_fd(d, typed_ndt_1_7[i].d) \
      * (t ** typed_ndt_1_7[i].t) / d
    out_phir += _c1 * d / typed_ndt_1_7[i].d
    out_phir_d += _c1
    out_phir_dd += (typed_ndt_1_7[i].d - 1) * _c1 / d
    out_phir_ddd += (typed_ndt_1_7[i].d - 1) * (typed_ndt_1_7[i].d - 2) \
      * _c1 / (d*d)
  for i in range(2,3):
    _c1 = typed_ndt_1_7[i].d * typed_ndt_1_7[i].n \
      * pow_fd(d, typed_ndt_1_7[i].d) \
      * t / d
    out_phir += _c1 * d / typed_ndt_1_7[i].d
    out_phir_d += _c1
    out_phir_dd += (typed_ndt_1_7[i].d - 1) * _c1 / d
    out_phir_ddd += (typed_ndt_1_7[i].d - 1) * (typed_ndt_1_7[i].d - 2) \
      * _c1 / (d*d)
  for i in range(3,6):
    _c1 = typed_ndt_1_7[i].d * typed_ndt_1_7[i].n \
      * pow_fd(d, typed_ndt_1_7[i].d) \
      * (t ** typed_ndt_1_7[i].t) / d
    out_phir += _c1 * d / typed_ndt_1_7[i].d
    out_phir_d += _c1
    out_phir_dd += (typed_ndt_1_7[i].d - 1) * _c1 / d
    out_phir_ddd += (typed_ndt_1_7[i].d - 1) * (typed_ndt_1_7[i].d - 2) \
      * _c1 / (d*d)
  for i in range(6,7):
    _c1 = typed_ndt_1_7[i].d * typed_ndt_1_7[i].n \
      * pow_fd(d, typed_ndt_1_7[i].d) \
      * t / d
    out_phir += _c1 * d / typed_ndt_1_7[i].d
    out_phir_d += _c1
    out_phir_dd += (typed_ndt_1_7[i].d - 1) * _c1 / d
    out_phir_ddd += (typed_ndt_1_7[i].d - 1) * (typed_ndt_1_7[i].d - 2) \
      * _c1 / (d*d)
  
  # Terms with 1-indices 8 to 51 are unrolled by value of coefficient c_coeff
  #   range(7,22) -> 1
  #   range(22,42) -> 2
  #   range(42,46) -> 3
  #   range(46,47) -> 4
  #   range(47,51) -> 6
  # allowing evaluating d**c using pow_fd(double, int). Loops are identical,
  # with a different preamble for setting _c1, _c2, _c_coeff.
  _c1 = -d
  _c2 = exp(_c1)
  _c_coeff = 1.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(0,15):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir += _common
    out_phir_d += _common * _c4
    out_phir_dd += _common * (_c4 * (_c4 - 1.0/d) + _c3)
    # Compute d/dd (_c4)
    _c5 = (-typed_ndt_8_51[i].d + _c_coeff * (_c_coeff - 1.0) * _c1) / (d * d)
    # Compute d/dd (_c3)
    _c6 = (_c_coeff - 2.0) * _c3 / d
    out_phir_ddd += _common * (
      (typed_ndt_8_51[i].d + _c_coeff * _c1) \
        * (_c4 * (_c4 - 1.0/d) + _c3) / d  # d/dd[common]
      + 2.0 * _c5 * _c4 - _c5 / d + _c4 / (d * d) + _c6 # d/dd[the rest]
    )
  _c1 = -d * d
  _c2 = exp(_c1)
  _c_coeff = 2.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(15,35):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir += _common
    out_phir_d += _common * _c4
    out_phir_dd += _common * (_c4 * (_c4 - 1.0/d) + _c3)
    # Compute d/dd (_c4)
    _c5 = (-typed_ndt_8_51[i].d + _c_coeff * (_c_coeff - 1.0) * _c1) / (d * d)
    # Compute d/dd (_c3)
    _c6 = (_c_coeff - 2.0) * _c3 / d
    out_phir_ddd += _common * (
      (typed_ndt_8_51[i].d + _c_coeff * _c1) \
        * (_c4 * (_c4 - 1.0/d) + _c3) / d  # d/dd[common]
      + 2.0 * _c5 * _c4 - _c5 / d + _c4 / (d * d) + _c6 # d/dd[the rest]
    )
  _c1 = -d * d * d
  _c2 = exp(_c1)
  _c_coeff = 3.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(35,39):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir += _common
    out_phir_d += _common * _c4
    out_phir_dd += _common * (_c4 * (_c4 - 1.0/d) + _c3)
    # Compute d/dd (_c4)
    _c5 = (-typed_ndt_8_51[i].d + _c_coeff * (_c_coeff - 1.0) * _c1) / (d * d)
    # Compute d/dd (_c3)
    _c6 = (_c_coeff - 2.0) * _c3 / d
    out_phir_ddd += _common * (
      (typed_ndt_8_51[i].d + _c_coeff * _c1) \
        * (_c4 * (_c4 - 1.0/d) + _c3) / d  # d/dd[common]
      + 2.0 * _c5 * _c4 - _c5 / d + _c4 / (d * d) + _c6 # d/dd[the rest]
    )
  _c1 = d * d
  _c1 *= -_c1
  _c2 = exp(_c1)
  _c_coeff = 4.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(39,40):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir += _common
    out_phir_d += _common * _c4
    out_phir_dd += _common * (_c4 * (_c4 - 1.0/d) + _c3)
    # Compute d/dd (_c4)
    _c5 = (-typed_ndt_8_51[i].d + _c_coeff * (_c_coeff - 1.0) * _c1) / (d * d)
    # Compute d/dd (_c3)
    _c6 = (_c_coeff - 2.0) * _c3 / d
    out_phir_ddd += _common * (
      (typed_ndt_8_51[i].d + _c_coeff * _c1) \
        * (_c4 * (_c4 - 1.0/d) + _c3) / d  # d/dd[common]
      + 2.0 * _c5 * _c4 - _c5 / d + _c4 / (d * d) + _c6 # d/dd[the rest]
    )
  _c1 = d * d * d
  _c1 *= -_c1
  _c2 = exp(_c1)
  _c_coeff = 6.0
  _c3 = _c_coeff * _c_coeff * _c1 / (d*d)
  for i in range(40,44):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Compute first d-derivative operator
    _c4 = (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir += _common
    out_phir_d += _common * _c4
    out_phir_dd += _common * (_c4 * (_c4 - 1.0/d) + _c3)
    # Compute d/dd (_c4)
    _c5 = (-typed_ndt_8_51[i].d + _c_coeff * (_c_coeff - 1.0) * _c1) / (d * d)
    # Compute d/dd (_c3)
    _c6 = (_c_coeff - 2.0) * _c3 / d
    out_phir_ddd += _common * (
      (typed_ndt_8_51[i].d + _c_coeff * _c1) \
        * (_c4 * (_c4 - 1.0/d) + _c3) / d  # d/dd[common]
      + 2.0 * _c5 * _c4 - _c5 / d + _c4 / (d * d) + _c6 # d/dd[the rest]
    )
  
  # Terms with 1-indices 52 to 54 are Gaussian terms. Factors with coefficients
  # that are shared across all terms are computed in the preamble.
  # Compute Gaussian terms for 1-indices 52 to 54
  _c1 = d - eps_res52_54[0]     # d_shift
  _c4 = d_res[51] - 2.0 * alpha_res52_54[0] * d * _c1
  _c5 = d * (-2.0 * alpha_res52_54[0]
      + 4.0 * alpha_res52_54[0] * alpha_res52_54[0]
        * _c1 * _c1
      - 4.0 * d_res[51] * alpha_res52_54[0] / d * _c1
      + d_res[51] * (d_res[51] - 1.0) / (d * d))
  # Compute d/dd[_c5] / _common
  _c6 = -2.0 * alpha_res52_54[0] \
      + 4.0 * alpha_res52_54[0] * alpha_res52_54[0] \
        * (3*d - eps_res52_54[0]) * _c1 \
      - 4.0 * d_res[51] * alpha_res52_54[0] \
      - d_res[51] * (d_res[51] - 1.0) / (d * d)
  for i in range(51,54):
    # Compute commons    
    _c2 = t - gamma_res52_54[i-51]   # t_shift
    _common = n_res[i] * exp(-alpha_res52_54[i-51] * _c1 * _c1 \
      -beta_res52_54[i-51] * _c2 * _c2) \
      * (d * d # unrolled d ** (d_res[i]-1.0)
        ) * pow_fd(t, t_res_52_54[i-51])
    # Compute d derivative path
    out_phir += _common * d
    out_phir_d += _common * _c4
    out_phir_dd += _common * _c5
    out_phir_ddd += _common * ((_c4 - 1) / d * _c5 + _c6)

  # Terms with 1-indices 55 to 56 are the two nonanalytical terms.  
  # Declare temporary registers
  cdef DTYPE_t _theta
  cdef DTYPE_t _Delta
  cdef DTYPE_t _dDelta
  cdef DTYPE_t _ddDelta
  cdef DTYPE_t _dddDelta
  _c1 = d_quad ** (2.0 / 3.0) # d ** (1/(2 *beta) - 1)
  _c2 = d_quad ** 2.5 # d ** (a - 1) # not equivalent to pow_fd
  _theta = (1.0 - t) + A_res55_56[0] * _c1 * d_quad
  _Delta = _theta*_theta + B_res55_56[0] * _c2 * d_quad
  # Compute d(Delta)/d(delta) divided by (delta - 1.0) for numerical stability
  _dDelta = (A_res55_56[0] * _theta * 2.0 / beta_res55_56[0] * _c1
    + 2.0 * B_res55_56[0] * a_res55_56[0] * _c2)
  # Compute second derivative of Delta
  _c3 = A_res55_56[0] / beta_res55_56[0] * _c1
  _ddDelta = _dDelta + (
    4.0 * B_res55_56[0] * a_res55_56[0] * (a_res55_56[0] - 1.0) * _c2
    + 2.0 * _c3 * _c3 * d_quad
    + 4.0 * _theta * A_res55_56[0] / beta_res55_56[0] \
      * (_exp1_55_56[0] - 1.0) * _c1
  )
  if d - 1.0 == 0.0:
    _dddDelta = 0.0
  else:
    # Using _dDelta as d(Delta)/d(delta) / (d - 1)
    _dddDelta = (_ddDelta - _dDelta) / (d - 1.0) \
      + (
      4.0 * B_res55_56[0] * a_res55_56[0] * (a_res55_56[0] - 1.0) \
        * 5.0 *_c2 / (d - 1.0) # unrolled d/dd (d_quad ** (a-1.0))
      + 2.0 * (A_res55_56[0] / beta_res55_56[0]) \
        * (A_res55_56[0] / beta_res55_56[0]) * _c1 * _c1 * (d - 1.0)\
        * (8.0 / 3.0 + 2.0)
      + 4.0 * (_exp1_55_56[0] - 1.0) * A_res55_56[0] / beta_res55_56[0] \
        * (
          (A_res55_56[0] * (10.0 / 3.0) * _c1 * (d - 1.0)) * _c1
          + _theta * (4.0 / 3.0) * (_c1) / (d - 1.0)
        )
    )
  # Finish d(Delta)/d(delta) computation in-place
  _dDelta *= d - 1.0
  for i in range(54,56):
    # Compute factor common to all derivatives
    _common = n_res[i] * exp(-C_res55_56[i-54] * d_quad \
      - D_res55_56[i-54]*(t - 1.0)*(t - 1.0))
    # Replace limiting value of Delta**(b-2) if Delta == 0
    if _Delta != 0.0:
      _common *= _Delta ** (b_res55_56[i-54] - 2.0) # 0.85 to 0.95
    else:
      _common = 0.0
    # Compute phir term
    out_phir += _common * _Delta * _Delta * d
    # Compute phir_d term
    out_phir_d += _common * _Delta * (
      _Delta * (1.0 - 2.0 * C_res55_56[i-54] * (d-1.0) * d)
      + b_res55_56[i-54] * d * (d-1.0) * (
        A_res55_56[i-54] * _theta * 2.0 / beta_res55_56[i-54] * _c1
        + 2.0 * B_res55_56[i-54] * a_res55_56[i-54] * _c2
      )
    )
    # Compute phir_dd term
    _c3 = _Delta*_Delta * (-4.0 * C_res55_56[i-54] * (d-1.0) 
      + d * (2.0*C_res55_56[i-54]*d_quad - 1.0) * 2.0 * C_res55_56[i-54])
    _c3 += _Delta * 2.0 * b_res55_56[i-54] * _dDelta \
      * (1.0 - 2.0 * d * C_res55_56[i-54] * (d - 1.0))
    _c3 += b_res55_56[i-54] * (_Delta * _ddDelta
      + (b_res55_56[i-54] - 1.0) * _dDelta * _dDelta) * d
    out_phir_dd += _c3 * _common
    # Compute ddd derivative using product rule
    if _Delta != 0.0:
      out_phir_ddd += _c3 * _common * (-2.0 * C_res55_56[i-54] * (d - 1.0)) \
        + _c3 * _common * (b_res55_56[i-54] - 2.0) / _Delta * _dDelta \
        + _common * ( #d/dd[_c3]
          2.0 * _Delta * _dDelta * (-4.0 * C_res55_56[i-54] * (d-1.0) 
            + d * (2.0*C_res55_56[i-54]*d_quad - 1.0) * 2.0 * C_res55_56[i-54])
          + _Delta * _Delta * (-4.0 * C_res55_56[i-54] \
            + 2.0 * C_res55_56[i-54] * (
              2.0 * C_res55_56[i-54] * (3.0*d - 1.0)*(d - 1.0) - 1.0))
          + 2.0 * b_res55_56[i-54] * (_dDelta * _dDelta + _Delta * _ddDelta) \
            * (1.0 - 2.0 * d * C_res55_56[i-54] * (d - 1.0))
          + 2.0 * b_res55_56[i-54] * _Delta * _dDelta \
            * (- 2.0 * C_res55_56[i-54] * (2.0*d - 1.0))
          + b_res55_56[i-54] * (_Delta * _ddDelta + d * _dDelta * _ddDelta \
            + d * _Delta * _dddDelta \
            + (b_res55_56[i-54] - 1.0) * (_dDelta * _dDelta
              + 2.0 * d * _ddDelta * _dDelta)
          )
        )

  return Derivatives_phir_d3(out_phir, out_phir_d, out_phir_dd, out_phir_ddd)

''' Saturation curve functions '''

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef DTYPE_t satl_spline(DTYPE_t T) noexcept:
  ''' Returns cubic spline interpolation for T within range. Extrapolates
  for temperatures below triple point. For temperatures above 647 K, uses the
  IAPWS95 auxiliary equation instead. '''
  # Select index, defaulting to endpoints for extrapolation
  if T >= 647.0:
    return rhosatl_aux(T)
  cdef unsigned short idx = 0
  # # Iteratively find idx
  # cdef unsigned short i
  # for i in range(319):
  #   if T >= sat_spline_T[i]:
  #     idx = i
  #  else:
  #     break
  #
  # Compute idx directly based on spread of sampling T vector, assuming T < 647
  idx = int(319 - (((647.0 - T)/(647.0 - 260.0))**0.25)*319)
  if idx < 0:
    idx = 0
  # Translated coordinate in local monomial basis
  cdef DTYPE_t z = T - sat_spline_T[idx]
  cdef DTYPE_t result = \
    ((satl_spline_coeffs[4*idx] * z + satl_spline_coeffs[4*idx+1]) * z \
    + satl_spline_coeffs[4*idx+2]) * z + satl_spline_coeffs[4*idx+3]
  if result < rhoc:
    return rhoc
  return result

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef DTYPE_t satv_spline(DTYPE_t T) noexcept:
  ''' Returns cubic spline interpolation for T within range. Extrapolates
  for temperatures below triple point. For temperatures above 647 K, uses the
  IAPWS95 auxiliary equation instead. '''
  # Select index, defaulting to endpoints for extrapolation
  if T >= 647.0:
    return rhosatv_aux(T)
  cdef unsigned short idx = 0
  # # Iteratively find idx
  # cdef unsigned short i
  # for i in range(319):
  #   if T >= sat_spline_T[i]:
  #     idx = i
  #  else:
  #     break
  #
  # Compute idx directly based on spread of sampling T vector, assuming T < 647
  idx = int(319 - (((647.0 - T)/(647.0 - 260.0))**0.25)*319)
  if idx < 0:
    idx = 0
  # Translated coordinate in local monomial basis
  cdef DTYPE_t z = T - sat_spline_T[idx]
  cdef DTYPE_t result = \
    ((satv_spline_coeffs[4*idx] * z + satv_spline_coeffs[4*idx+1]) * z \
    + satv_spline_coeffs[4*idx+2]) * z + satv_spline_coeffs[4*idx+3]
  if result > rhoc:
    return rhoc
  return result

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef DTYPE_t rhosatl_aux(DTYPE_t T) noexcept:
  cdef unsigned short i
  cdef DTYPE_t dsatl = 1.0
  cdef DTYPE_t _c0, _c2
  cdef DTYPE_t t = Tc / T
  if t > 1.0:
    _c0 = 1.0-1.0/t
    _c2 = _c0**(1.0/3.0)
    for i in range(6):
      dsatl += satl_coeffsb[i] * pow_fd(_c2, satl_powsb_times3[i])
    return dsatl * rhoc

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef DTYPE_t rhosatv_aux(DTYPE_t T) noexcept:
  cdef unsigned short i
  cdef DTYPE_t dsatv = 0.0
  cdef DTYPE_t _c0, _c1
  cdef DTYPE_t t = Tc / T
  if t > 1.0:
    _c0 = 1.0-1.0/t
    _c1 = _c0**(1.0/6.0)
    for i in range(6):
      dsatv += satv_coeffsc[i] * pow_fd(_c1, satv_powsc_times6[i])
    dsatv = exp(dsatv)
    return dsatv * rhoc

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
def p(DTYPE_t rho, DTYPE_t T) -> DTYPE_t:
  ''' Pressure (SI -- Pa). '''
  cdef DTYPE_t d = rho / rhoc
  cdef DTYPE_t t = Tc / T
  cdef DTYPE_t _phir_d, _phir_dd
  cdef DTYPE_t _c0, _c1, _c2
  cdef DTYPE_t dsatl = 1.0
  cdef DTYPE_t dsatv = 0
  cdef DTYPE_t sat_atol = 0.5e-2
  cdef Pair pair
  cdef SatTriple sat_triple

  # Compute approximate saturation curve
  cdef unsigned short i
  if t > 1.0:
    _c0 = 1.0-1.0/t
    _c1 = _c0**(1.0/6.0)
    _c2 = _c1 * _c1
    for i in range(6):
      dsatl += satl_coeffsb[i] * pow_fd(_c2, satl_powsb_times3[i])
      dsatv += satv_coeffsc[i] * pow_fd(_c1, satv_powsc_times6[i])
    dsatv = exp(dsatv)

    # Check if in or near phase equilibrium region
    if d < dsatl + sat_atol and d > dsatv - sat_atol:
      # Compute precise saturation curve and saturation pressure
      sat_triple = prho_sat(T)
      if d <= sat_triple.rho_satl / rhoc and d >= sat_triple.rho_satv / rhoc:
        return sat_triple.psat

    # TODO: Near-critical-point treatment
    pass

  # Pure phase pressure computation
  pair = fused_phir_d_phir_dd(d, t)
  _phir_d = pair.first
  return rho * R * T * (1.0 + d * _phir_d)

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
def u(DTYPE_t rho, DTYPE_t T) -> DTYPE_t:
  ''' Energy per unit mass (SI -- J / kg). '''
  cdef DTYPE_t d = rho / rhoc
  cdef DTYPE_t t = Tc / T
  cdef DTYPE_t _c0, _c1, _c2
  cdef DTYPE_t dsatl = 1.0
  cdef DTYPE_t dsatv = 0
  cdef DTYPE_t sat_atol = 0.5e-2
  cdef Pair sat_pair
  cdef DTYPE_t x

  # Compute approximate saturation curve
  cdef unsigned short i
  if t > 1.0:
    _c0 = 1.0-1.0/t
    _c1 = _c0**(1.0/6.0)
    _c2 = _c1 * _c1
    for i in range(6):
      dsatl += satl_coeffsb[i] * pow_fd(_c2, satl_powsb_times3[i])
      dsatv += satv_coeffsc[i] * pow_fd(_c1, satv_powsc_times6[i])
    dsatv = exp(dsatv)

    # Check if in or near phase equilibrium region
    if d < dsatl + sat_atol and d > dsatv - sat_atol:
      # Compute precise saturation curve and saturation pressure
      sat_pair = rho_sat(T)
      dsatl = sat_pair.first / rhoc
      dsatv = sat_pair.second / rhoc
      if d <= dsatl and d >= dsatv:
        # Compute vapour mass fraction
        x = (1.0 / rho - 1.0 / sat_pair.first) \
             / (1.0 / sat_pair.second - 1.0 / sat_pair.first)
        # Return mass-weighted sum saturation energies
        return t * R * T * (
          x * (fused_phir_all(dsatv, t).phir_t + phi0_t(dsatv, t)) \
          + (1.0-x) * (fused_phir_all(dsatl, t).phir_t + phi0_t(dsatl, t)))

    # TODO: Near-critical-point treatment
    pass

  # Pure phase pressure computation
  return t * R * T * (fused_phir_all(d, t).phir_t + phi0_t(d, t))

def rho_pT(p, T):
  pass

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef Derivatives_phi0_0_1_2 fused_phi0_all(DTYPE_t d, DTYPE_t t) noexcept:
  ''' Ideal gas part phi0 of dimless Helmholtz function. '''

  # Compute d-dependent term and first three t-dependent terms
  cdef DTYPE_t phi0 = log(d) + n_ideal[0] + n_ideal[1] * t + n_ideal[2] * log(t)
  cdef DTYPE_t phi0_t = n_ideal[1] + n_ideal[2] / t
  cdef DTYPE_t phi0_tt = -n_ideal[2] / (t * t)
  cdef DTYPE_t _exp_result
  cdef unsigned short i
  for i in range(3,8):
    _exp_result = exp(-g_ideal[i] * t)
    phi0 += n_ideal[i] * log(1.0 - _exp_result)
    phi0_t += n_ideal[i] * g_ideal[i] * (1.0 / (1.0 - _exp_result) - 1.0)
    phi0_tt += -n_ideal[i] * g_ideal[i] * g_ideal[i] \
      * _exp_result/((1.0 - _exp_result)*(1.0 - _exp_result))

  # Initializer list: DTYPE_t phi0, phi0_d, phi0_dd,  phi0_t, phi0_tt, phi0_dt
  return Derivatives_phi0_0_1_2(phi0, 1.0/d, -1.0/(d*d), phi0_t, phi0_tt, 0.0)

''' Test functions. '''

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
# @cython.inline
cdef void add_term(DTYPE_t* psum, DTYPE_t* summand, DTYPE_t* comp): #noexcept:
  ''' Adds summand to psum, with compensation value comp. Updates comp. '''
  '''  # Compute tentative output value
    cdef DTYPE_t tentative = psum[0] + summand[0] + comp[0]
    # Compute new compensation value
    comp[0] = (summand[0] + comp[0]) - (tentative - psum[0])
    # Assign tentative output value to partial sum
    psum[0] = tentative
  '''
  cdef DTYPE_t y = summand[0] - comp[0]
  cdef DTYPE_t t = psum[0] + y
  comp[0] = (t - psum[0]) - y
  psum[0] = t


@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef double summation_test() noexcept:
  ''' Test of Kahan summation in simple test case. '''
  cdef DTYPE_t x = 1.0
  cdef DTYPE_t y = 1e17
  cdef DTYPE_t z = 0.0
  cdef DTYPE_t comp = 0
  # Intention:
  # z += y
  # z += x
  # z -= y
  # Stable summation:
  # tent = z + y + comp            # 1e17
  # comp = (y + comp) - (tent - z) # 1e17 - 1e17 == 0
  # z = tent                       # 1e17
  # tent = z + x + comp            # 1e17+1+0 == 1e17
  # comp = (x + comp) - (tent - z) # 1 - (1e17 - 1e17) == 1
  # z = tent                       # 1e17
  # tent = z + -y + comp           # 1e17 - 1e17 + 1 == 1
  # comp = (-y + comp) - (tent - z)# (-1e17 + 1) - (1 - 1e17) == 0
  # z = tent                       # 1
  add_term(&z, &y, &comp)
  add_term(&z, &x, &comp)
  y = -y
  add_term(&z, &y, &comp)
  
  return z

''' Legacy functions. '''


@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef Derivatives_phir_0_1_2 _fused_phir_all_clean(DTYPE_t d, DTYPE_t t) noexcept:
  ''' Optimized routine for simultaneously computing all 0th, 1st and 2nd
  derivatives of the residual part of the dimless Helmholtz function
      phi = f/(RT).
  Cython implementation for float input. Typical bottlenecks are computation of
  exp(DTYPE_t, DTYPE_t) and pow(DTYPE_t, DTYPE_t), where DTYPE_t is a floating
  point representation.
  Less aggressively optimized version for code readability.
  '''
  cdef DTYPE_t out_phir    = 0.0
  cdef DTYPE_t out_phir_d  = 0.0
  cdef DTYPE_t out_phir_dd = 0.0
  cdef DTYPE_t out_phir_t  = 0.0
  cdef DTYPE_t out_phir_tt = 0.0
  cdef DTYPE_t out_phir_dt = 0.0
  cdef DTYPE_t d_quad = (d - 1.0) * (d - 1.0)
  # Declare temporary registers
  cdef DTYPE_t _c1
  cdef DTYPE_t _c2
  cdef DTYPE_t _c3
  cdef DTYPE_t _c_coeff
  cdef DTYPE_t _common

  cdef unsigned short i
  
  # Compute terms with 1-indices 1 to 7 (0-indices 0 to 6)
  for i in range(7):
    # Compute common factors, requiring pow(double, double)
    _common = typed_ndt_1_7[i].n * pow_fd(d, typed_ndt_1_7[i].d) \
      * (t ** typed_ndt_1_7[i].t)
    # Cache intermediate result phir_d
    _c1 = typed_ndt_1_7[i].d * _common / d
    # Compute output terms
    out_phir += _common
    out_phir_d += _c1
    out_phir_dd += (typed_ndt_1_7[i].d - 1) * _c1 / d
    out_phir_t += _common * typed_ndt_1_7[i].t / t
    out_phir_tt += _common * typed_ndt_1_7[i].t \
      * (typed_ndt_1_7[i].t - 1.0) / (t*t)
    out_phir_dt += _c1 * typed_ndt_1_7[i].t / t

  

  # Terms with 1-indices 8 to 51 are unrolled by value of coefficient c_coeff
  #   range(7,22) -> 1
  #   range(22,42) -> 2
  #   range(42,46) -> 3
  #   range(46,47) -> 4
  #   range(47,51) -> 6
  # and manually exponentiate d**c

  _c1 = -d
  _c2 = exp(_c1)
  _c_coeff = 1.0
  for i in range(0,15):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Apply derivative operators
    out_phir += _common
    out_phir_d += _common * (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir_dd += _common * ((typed_ndt_8_51[i].d + _c_coeff * _c1) \
        * (typed_ndt_8_51[i].d + _c_coeff * _c1 - 1.0) \
        + _c_coeff * _c_coeff * _c1 ) / (d*d)
    out_phir_t += _common * typed_ndt_8_51[i].t / t
    out_phir_tt += _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    out_phir_dt += _common * (typed_ndt_8_51[i].d + _c_coeff * _c1) / d \
      * typed_ndt_8_51[i].t / t

  _c1 = -d * d
  _c2 = exp(_c1)
  _c_coeff = 2.0
  for i in range(15,35):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Apply derivative operators
    out_phir += _common
    out_phir_d += _common * (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir_dd += _common * ((typed_ndt_8_51[i].d + _c_coeff * _c1) \
        * (typed_ndt_8_51[i].d + _c_coeff * _c1 - 1.0) \
        + _c_coeff * _c_coeff * _c1 ) / (d*d)
    out_phir_t += _common * typed_ndt_8_51[i].t / t
    out_phir_tt += _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    out_phir_dt += _common * (typed_ndt_8_51[i].d + _c_coeff * _c1) / d \
      * typed_ndt_8_51[i].t / t

  _c1 = -d * d * d
  _c2 = exp(_c1)
  _c_coeff = 3.0
  for i in range(35,39):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Apply derivative operators
    out_phir += _common
    out_phir_d += _common * (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir_dd += _common * ((typed_ndt_8_51[i].d + _c_coeff * _c1) \
        * (typed_ndt_8_51[i].d + _c_coeff * _c1 - 1.0) \
        + _c_coeff * _c_coeff * _c1 ) / (d*d)
    out_phir_t += _common * typed_ndt_8_51[i].t / t
    out_phir_tt += _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    out_phir_dt += _common * (typed_ndt_8_51[i].d + _c_coeff * _c1) / d \
      * typed_ndt_8_51[i].t / t

  _c1 = d * d
  _c1 *= -_c1
  _c2 = exp(_c1)
  _c_coeff = 4.0
  for i in range(39,40):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Apply derivative operators
    out_phir += _common
    out_phir_d += _common * (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir_dd += _common * ((typed_ndt_8_51[i].d + _c_coeff * _c1) \
        * (typed_ndt_8_51[i].d + _c_coeff * _c1 - 1.0) \
        + _c_coeff * _c_coeff * _c1 ) / (d*d)
    out_phir_t += _common * typed_ndt_8_51[i].t / t
    out_phir_tt += _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    out_phir_dt += _common * (typed_ndt_8_51[i].d + _c_coeff * _c1) / d \
      * typed_ndt_8_51[i].t / t

  _c1 = d * d * d
  _c1 *= -_c1
  _c2 = exp(_c1)
  _c_coeff = 6.0
  for i in range(40,44):
    # Compute common factors
    _common = typed_ndt_8_51[i].n \
      * pow_fd(d, typed_ndt_8_51[i].d) * pow_fd(t, typed_ndt_8_51[i].t) * _c2
    # Apply derivative operators
    out_phir += _common
    out_phir_d += _common * (typed_ndt_8_51[i].d + _c_coeff * _c1) / d
    out_phir_dd += _common * ((typed_ndt_8_51[i].d + _c_coeff * _c1) \
        * (typed_ndt_8_51[i].d + _c_coeff * _c1 - 1.0) \
        + _c_coeff * _c_coeff * _c1 ) / (d*d)
    out_phir_t += _common * typed_ndt_8_51[i].t / t
    out_phir_tt += _common * typed_ndt_8_51[i].t \
      * (typed_ndt_8_51[i].t - 1.0) / (t*t)
    out_phir_dt += _common * (typed_ndt_8_51[i].d + _c_coeff * _c1) / d \
      * typed_ndt_8_51[i].t / t
  
  # Compute Gaussian terms for 1-indices 52 to 54
  for i in range(51,54):
    # Compute commons
    _c1 = d - eps_res52_54[i-51]     # d_shift
    _c2 = t - gamma_res52_54[i-51]   # t_shift
    _common = n_res[i] * exp(-alpha_res52_54[i-51] * _c1 * _c1 \
      -beta_res52_54[i-51] * _c2 * _c2) \
      * (d * d # unrolled d ** (d_res[i]-1.0)
        ) * pow_fd(t, t_res_52_54[i-51])
    # Compute d derivative path
    out_phir += _common * d
    out_phir_d += _common * (d_res[i] \
      - 2.0 * alpha_res52_54[i-51] * d * _c1)
    out_phir_dd += _common * d * (-2.0 * alpha_res52_54[i-51]
      + 4.0 * alpha_res52_54[i-51] * alpha_res52_54[i-51]
        * _c1 * _c1
      - 4.0 * d_res[i] * alpha_res52_54[i-51] / d * _c1
      + d_res[i] * (d_res[i] - 1.0) / (d * d))
    # Compute t derivative path
    out_phir_t += _common * d / t \
      * (t_res[i] - 2.0 * beta_res52_54[i-51] * t * _c2)
    _c3 = t_res[i] - 2.0 * beta_res52_54[i-51] * t \
      * (t - gamma_res52_54[i-51])
    out_phir_tt += _common * d / (t * t) \
      * (_c3 * _c3 - t_res[i] - 2.0 * beta_res52_54[i-51] * t * t)
    # Compute mixed derivative
    out_phir_dt += _common / t \
      * (d_res[i] - 2.0 * alpha_res52_54[i-51] * d * _c1) \
      * (t_res[i] - 2.0 * beta_res52_54[i-51] * t * _c2)
  
  # Declare temporary registers
  cdef DTYPE_t _theta
  cdef DTYPE_t _Delta
  cdef DTYPE_t _dDelta
  cdef DTYPE_t _ddDelta
  cdef bint phir_tt_isinf = False
    
  # Compute nonanalytical terms for 1-indices 55 to 56
  for i in range(54,56):
    # Compute commons
    _c1 = d_quad ** (_exp1_55_56[i-54] - 1.0) # _exp1_55_56 vals: 5/3
    _c2 = d_quad ** (a_res55_56[i-54] - 1.0)
    _theta = (1.0 - t) + A_res55_56[i-54] * _c1 * d_quad
    _Delta = _theta*_theta + B_res55_56[i-54] * _c2 * d_quad
    _common = n_res[i] * exp(-C_res55_56[i-54] * d_quad \
      - D_res55_56[i-54]*(t - 1.0)*(t - 1.0))
    # Replace limiting value of Delta**(b-2) if Delta == 0
    if _Delta != 0.0:
      _common *= _Delta ** (b_res55_56[i-54] - 2.0) # 0.85 to 0.95
    else:
      _common = 0.0

    # Compute d derivative path
    out_phir += _common * d * _Delta * _Delta
    # Compute phir_d term
    out_phir_d += _common * _Delta * (
      _Delta * (1.0 - 2.0 * C_res55_56[i-54] * (d-1.0) * d)
      + b_res55_56[i-54] * d * (d-1.0) * (
        A_res55_56[i-54] * _theta * 2.0 / beta_res55_56[i-54] * _c1
        + 2.0 * B_res55_56[i-54] * a_res55_56[i-54] * _c2
      )
    )
    # Compute d(Delta)/d(delta) divided by (delta - 1.0) for numerical stability
    _dDelta = (A_res55_56[i-54] * _theta * 2.0 / beta_res55_56[i-54] * _c1
      + 2.0 * B_res55_56[i-54] * a_res55_56[i-54] * _c2)
    # Compute second derivative of Delta
    _c3 = A_res55_56[i-54] / beta_res55_56[i-54] * _c1
    _ddDelta = _dDelta + (
      4.0 * B_res55_56[i-54] * a_res55_56[i-54] * (a_res55_56[i-54] - 1.0) * _c2
      + 2.0 * _c3 * _c3 * d_quad
      + 4.0 * _theta * A_res55_56[i-54] / beta_res55_56[i-54] \
        * (_exp1_55_56[i-54] - 1.0) * _c1
    )
    # Finish d(Delta)/d(delta) computation in-place
    _dDelta *= d - 1.0
    # Compute phir_dd term
    _c2 = _Delta*_Delta * (-4.0 * C_res55_56[i-54] * (d-1.0) 
      + d * (2.0*C_res55_56[i-54]*d_quad - 1.0) * 2.0 * C_res55_56[i-54])
    _c2 += _Delta * 2.0 * b_res55_56[i-54] * _dDelta \
      * (1.0 - 2.0 * d * C_res55_56[i-54] * (d - 1.0))
    _c2 += b_res55_56[i-54] * (_Delta * _ddDelta
      + (b_res55_56[i-54] - 1.0) * _dDelta * _dDelta) * d
    out_phir_dd += _c2 * _common

    # Compute t derivative path
    out_phir_t += _common * 2.0 * d * (
      -_theta * b_res55_56[i-54] + _Delta * D_res55_56[i-54] * (1.0 - t)
      ) * _Delta
    # Compute phir_tt term
    # Replace limiting value if Delta == 0
    if _Delta == 0.0:
      phir_tt_isinf = True    
    out_phir_tt += _common * 2.0 * d * (
      b_res55_56[i-54] * (_Delta \
        + 2.0 * _theta*_theta * (b_res55_56[i-54] - 1.0)
        + 4.0 * _theta * _Delta * D_res55_56[i-54] * (t - 1.0))
      + _Delta * _Delta * D_res55_56[i-54] \
        * (2.0 * D_res55_56[i-54] * (t - 1.0) * (t - 1.0) - 1.0)
    )

    # Compute mixed derivative
    out_phir_dt += _common * (
      _Delta * _Delta * (-2.0 * D_res55_56[i-54] * (t - 1.0) \
      + d * 4.0 * C_res55_56[i-54] * D_res55_56[i-54] * (d - 1.0) * (t - 1.0))
      + d * _Delta * b_res55_56[i-54] * _dDelta \
        * (-2.0 * D_res55_56[i-54] * (t - 1.0))
      - 2.0 * _theta * b_res55_56[i-54] * _Delta \
        * (1.0 - 2.0 * d * C_res55_56[i-54] * (d - 1.0))
      + d * (
        -A_res55_56[i-54] * b_res55_56[i-54] * 2.0 / beta_res55_56[i-54] \
          * _Delta * (d - 1.0) * _c1
        - 2.0 * _theta * b_res55_56[i-54] * (b_res55_56[i-54] - 1.0) * _dDelta
      )
    )

  if phir_tt_isinf:
    out_phir_tt = -float("inf")
  return Derivatives_phir_0_1_2(out_phir, out_phir_d, out_phir_dd,
    out_phir_t, out_phir_tt, out_phir_dt)

@cython.boundscheck(False)
@cython.wraparound(False)
@cython.nonecheck(False)
@cython.cdivision(True)
cpdef Pair _fused_phir_d_phir_dd_clean(DTYPE_t d, DTYPE_t t) noexcept:
  ''' Optimized routine for simultaneously computing the first and second
  delta-derivatives of residual part of dimless Helmholtz function
      phi = f/(RT).
  See also phir for more details.
  Cython implementation for float input.
  '''

  cdef DTYPE_t out_phir_d = 0.0
  cdef DTYPE_t out_phir_dd = 0.0
  cdef DTYPE_t d_quad = (d - 1.0) * (d - 1.0)
  # Declare temporary registers
  cdef DTYPE_t _c1
  cdef DTYPE_t _c2
  cdef DTYPE_t _c_coeff
  cdef DTYPE_t _common

  # Use strides as below
  # cdef n_coeff ndt1_51[3*i]
  # cdef d_coeff ndt1_51[3*i+1]
  # cdef t_coeff ndt1_51[3*i+2]

  # Compute uniform coefficients with mixed coefficients ndt (1-indices 1 to 51)
  cdef unsigned short i
  for i in range(7):
    _common = ndt1_51[3*i] * ndt1_51[3*i+1] \
      * (d ** (ndt1_51[3*i+1]-1.0)) * (t ** ndt1_51[3*i+2])
    out_phir_d += _common
    out_phir_dd += _common * (ndt1_51[3*i+1] - 1.0) / d
  # Integer c_coeff optimization: use c as
  #   range(7,22) -> 1
  #   range(22,42) -> 2
  #   range(42,46) -> 3
  #   range(46,47) -> 4
  #   range(47,51) -> 6
  # and manually exponentiate d**c
  _c1 = -d
  _c2 = exp(_c1)
  _c_coeff = 1.0
  for i in range(7,22):
    _common = ndt1_51[3*i] \
      * (d ** (ndt1_51[3*i+1]-1.0)) * (t ** ndt1_51[3*i+2]) * _c2
    out_phir_d += _common * (ndt1_51[3*i+1] + _c_coeff * _c1)
    out_phir_dd += _common * ((ndt1_51[3*i+1] + _c_coeff * _c1) \
        * (ndt1_51[3*i+1] + _c_coeff * _c1 - 1.0) \
        + _c_coeff * _c_coeff * _c1 ) / d
  _c1 = -d * d
  _c2 = exp(_c1)
  _c_coeff = 2.0
  for i in range(22,42):
    _common = ndt1_51[3*i] \
      * (d ** (ndt1_51[3*i+1]-1.0)) * (t ** ndt1_51[3*i+2]) * _c2
    out_phir_d += _common * (ndt1_51[3*i+1] + _c_coeff * _c1)
    out_phir_dd += _common * ((ndt1_51[3*i+1] + _c_coeff * _c1) \
        * (ndt1_51[3*i+1] + _c_coeff * _c1 - 1.0) \
        + _c_coeff * _c_coeff * _c1 ) / d
  _c1 = -d * d * d
  _c2 = exp(_c1)
  _c_coeff = 3.0
  for i in range(42,46):
    _common = ndt1_51[3*i] \
      * (d ** (ndt1_51[3*i+1]-1.0)) * (t ** ndt1_51[3*i+2]) * _c2
    out_phir_d += _common * (ndt1_51[3*i+1] + _c_coeff * _c1)
    out_phir_dd += _common * ((ndt1_51[3*i+1] + _c_coeff * _c1) \
        * (ndt1_51[3*i+1] + _c_coeff * _c1 - 1.0) \
        + _c_coeff * _c_coeff * _c1 ) / d
  _c1 = d * d
  _c1 *= -_c1
  _c2 = exp(_c1)
  _c_coeff = 4.0
  for i in range(46,47):
    _common = ndt1_51[3*i] \
      * (d ** (ndt1_51[3*i+1]-1.0)) * (t ** ndt1_51[3*i+2]) * _c2
    out_phir_d += _common * (ndt1_51[3*i+1] + _c_coeff * _c1)
    out_phir_dd += _common * ((ndt1_51[3*i+1] + _c_coeff * _c1) \
        * (ndt1_51[3*i+1] + _c_coeff * _c1 - 1.0) \
        + _c_coeff * _c_coeff * _c1 ) / d
  _c1 = d * d * d
  _c1 *= -_c1
  _c2 = exp(_c1)
  _c_coeff = 6.0
  for i in range(47,51):
    _common = ndt1_51[3*i] \
      * (d ** (ndt1_51[3*i+1]-1.0)) * (t ** ndt1_51[3*i+2]) * _c2
    out_phir_d += _common * (ndt1_51[3*i+1] + _c_coeff * _c1)
    out_phir_dd += _common * ((ndt1_51[3*i+1] + _c_coeff * _c1) \
        * (ndt1_51[3*i+1] + _c_coeff * _c1 - 1.0) \
        + _c_coeff * _c_coeff * _c1 ) / d
  
  # One-loop form of range(7,51) (approx. 40% more load)
  # for i in range(7, 51):
  #   _c1 = -d ** ndtc1_51[4*i+3]
  #   _common = ndtc1_51[4*i] \
  #     * (d ** (ndtc1_51[4*i+1]-1.0)) * (t ** ndtc1_51[4*i+2]) \
  #     * exp(_c1)
  #   out_phir_d += _common * (ndtc1_51[4*i+1] + ndtc1_51[4*i+3] * _c1)
  #   out_phir_dd += _common * ((ndtc1_51[4*i+1] + ndtc1_51[4*i+3] * _c1) \
  #       * (ndtc1_51[4*i+1] + ndtc1_51[4*i+3] * _c1 - 1.0) \
  #       + ndtc1_51[4*i+3] * ndtc1_51[4*i+3] * _c1 ) / d

  # Declare temporary registers
  cdef DTYPE_t _c3
  cdef DTYPE_t _c4
  cdef DTYPE_t _theta
  cdef DTYPE_t _Delta
  cdef DTYPE_t _dDelta_div
  cdef DTYPE_t _ddDelta
  # Compute heterogeneous coefficients for 1-indices 52 to 54
  for i in range(51,54):
    # Compute commons
    _c1 = d - eps_res52_54[i-51]
    _c2 = t - gamma_res52_54[i-51]
    _common = n_res[i] * exp(-alpha_res52_54[i-51] * _c1 * _c1 \
      -beta_res52_54[i-51] * _c2 * _c2) \
      * (d * d # d ** (d_res[i]-1.0)
        ) * (t ** t_res[i])
    # Compute phir_d term
    out_phir_d += _common * (d_res[i] \
      - 2.0 * alpha_res52_54[i-51] * d * _c1)
    # Compute phir_dd term
    out_phir_dd += _common * d * (-2.0 * alpha_res52_54[i-51]
      + 4.0 * alpha_res52_54[i-51] * alpha_res52_54[i-51]
        * _c1 * _c1
      - 4.0 * d_res[i] * alpha_res52_54[i-51] / d * _c1
      + d_res[i] * (d_res[i] - 1.0) / (d * d))
  # Compute heterogeneous coefficients for 1-indices 55 to 56
  for i in range(54,56):
    # Compute commons
    _c1 = d_quad ** (_exp1_55_56[i-54] - 1.0) # 5/3
    _c2 = d_quad ** (a_res55_56[i-54] - 1.0)
    _theta = (1.0 - t) + A_res55_56[i-54] * _c1 * d_quad
    _Delta = _theta*_theta + B_res55_56[i-54] * _c2 * d_quad
    _common = n_res[i] * exp(-C_res55_56[i-54] * d_quad \
      - D_res55_56[i-54]*(t - 1.0)*(t - 1.0))
    # Replace limiting value if Delta == 0
    if _Delta != 0.0:
      _common *= _Delta ** (b_res55_56[i-54] - 2.0) # 0.85 to 0.95
    else:
      _common = 0.0

    # Compute phir_d term
    _c3 = (
      _Delta * (1.0 - 2.0 * C_res55_56[i-54] * (d-1.0) * d)
      + b_res55_56[i-54] * d * (d-1.0) * (
        A_res55_56[i-54] * _theta * 2.0 / beta_res55_56[i-54] * _c1
        + 2.0 * B_res55_56[i-54] * a_res55_56[i-54] * _c2
      )
    )    
    out_phir_d += _c3 * _Delta * _common

    # Compute phir_dd term
    # Compute d(Delta)/d(delta) divided by (delta - 1.0) for numerical stability
    _dDelta_div = (A_res55_56[i-54] * _theta * 2.0 / beta_res55_56[i-54] * _c1
      + 2.0 * B_res55_56[i-54] * a_res55_56[i-54] * _c2)
    # Compute second derivative of Delta
    _c3 = A_res55_56[i-54] / beta_res55_56[i-54] * _c1
    _ddDelta = _dDelta_div + (
      4.0 * B_res55_56[i-54] * a_res55_56[i-54] * (a_res55_56[i-54] - 1.0) * _c2
      + 2.0 * _c3 * _c3 * d_quad
      + 4.0 * _theta * A_res55_56[i-54] / beta_res55_56[i-54] \
        * (_exp1_55_56[i-54] - 1.0) * _c1
    )
    # Finish d(Delta)/d(delta) computation in-place
    _dDelta_div *= d - 1.0
    # Compute coefficient to phir_dd
    _c1 = _Delta*_Delta * (-4.0 * C_res55_56[i-54] * (d-1.0) 
      + d * (2.0*C_res55_56[i-54]*d_quad - 1.0) * 2.0 * C_res55_56[i-54])
    _c1 += _Delta * 2.0 * b_res55_56[i-54] * _dDelta_div \
      * (1.0 - 2.0 * d * C_res55_56[i-54] * (d - 1.0))
    _c1 += b_res55_56[i-54] * (_Delta * _ddDelta
      + (b_res55_56[i-54] - 1.0) * _dDelta_div * _dDelta_div) * d
    out_phir_dd += _c1 * _common

  return Pair(out_phir_d, out_phir_dd)

